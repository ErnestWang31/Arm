
dev_board_stm32f4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dc7c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  0800de0c  0800de0c  0000ee0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800debc  0800debc  0000f100  2**0
                  CONTENTS
  4 .ARM          00000008  0800debc  0800debc  0000eebc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dec4  0800dec4  0000f100  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dec4  0800dec4  0000eec4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800dec8  0800dec8  0000eec8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000100  20000000  0800decc  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000f100  2**0
                  CONTENTS
 10 .bss          00013098  20000100  20000100  0000f100  2**2
                  ALLOC
 11 ._user_heap_stack 00004400  20013198  20013198  0000f100  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000f100  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002c378  00000000  00000000  0000f130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006934  00000000  00000000  0003b4a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002550  00000000  00000000  00041de0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001cd1  00000000  00000000  00044330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000287c3  00000000  00000000  00046001  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002f8a8  00000000  00000000  0006e7c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e2996  00000000  00000000  0009e06c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00180a02  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00009bf8  00000000  00000000  00180a48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005e  00000000  00000000  0018a640  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000100 	.word	0x20000100
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ddf4 	.word	0x0800ddf4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000104 	.word	0x20000104
 80001cc:	0800ddf4 	.word	0x0800ddf4

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001e4:	f000 b96a 	b.w	80004bc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	460c      	mov	r4, r1
 8000208:	2b00      	cmp	r3, #0
 800020a:	d14e      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020c:	4694      	mov	ip, r2
 800020e:	458c      	cmp	ip, r1
 8000210:	4686      	mov	lr, r0
 8000212:	fab2 f282 	clz	r2, r2
 8000216:	d962      	bls.n	80002de <__udivmoddi4+0xde>
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0320 	rsb	r3, r2, #32
 800021e:	4091      	lsls	r1, r2
 8000220:	fa20 f303 	lsr.w	r3, r0, r3
 8000224:	fa0c fc02 	lsl.w	ip, ip, r2
 8000228:	4319      	orrs	r1, r3
 800022a:	fa00 fe02 	lsl.w	lr, r0, r2
 800022e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000232:	fa1f f68c 	uxth.w	r6, ip
 8000236:	fbb1 f4f7 	udiv	r4, r1, r7
 800023a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800023e:	fb07 1114 	mls	r1, r7, r4, r1
 8000242:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000246:	fb04 f106 	mul.w	r1, r4, r6
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000256:	f080 8112 	bcs.w	800047e <__udivmoddi4+0x27e>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 810f 	bls.w	800047e <__udivmoddi4+0x27e>
 8000260:	3c02      	subs	r4, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a59      	subs	r1, r3, r1
 8000266:	fa1f f38e 	uxth.w	r3, lr
 800026a:	fbb1 f0f7 	udiv	r0, r1, r7
 800026e:	fb07 1110 	mls	r1, r7, r0, r1
 8000272:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000276:	fb00 f606 	mul.w	r6, r0, r6
 800027a:	429e      	cmp	r6, r3
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x94>
 800027e:	eb1c 0303 	adds.w	r3, ip, r3
 8000282:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000286:	f080 80fc 	bcs.w	8000482 <__udivmoddi4+0x282>
 800028a:	429e      	cmp	r6, r3
 800028c:	f240 80f9 	bls.w	8000482 <__udivmoddi4+0x282>
 8000290:	4463      	add	r3, ip
 8000292:	3802      	subs	r0, #2
 8000294:	1b9b      	subs	r3, r3, r6
 8000296:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029a:	2100      	movs	r1, #0
 800029c:	b11d      	cbz	r5, 80002a6 <__udivmoddi4+0xa6>
 800029e:	40d3      	lsrs	r3, r2
 80002a0:	2200      	movs	r2, #0
 80002a2:	e9c5 3200 	strd	r3, r2, [r5]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d905      	bls.n	80002ba <__udivmoddi4+0xba>
 80002ae:	b10d      	cbz	r5, 80002b4 <__udivmoddi4+0xb4>
 80002b0:	e9c5 0100 	strd	r0, r1, [r5]
 80002b4:	2100      	movs	r1, #0
 80002b6:	4608      	mov	r0, r1
 80002b8:	e7f5      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002ba:	fab3 f183 	clz	r1, r3
 80002be:	2900      	cmp	r1, #0
 80002c0:	d146      	bne.n	8000350 <__udivmoddi4+0x150>
 80002c2:	42a3      	cmp	r3, r4
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xcc>
 80002c6:	4290      	cmp	r0, r2
 80002c8:	f0c0 80f0 	bcc.w	80004ac <__udivmoddi4+0x2ac>
 80002cc:	1a86      	subs	r6, r0, r2
 80002ce:	eb64 0303 	sbc.w	r3, r4, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	2d00      	cmp	r5, #0
 80002d6:	d0e6      	beq.n	80002a6 <__udivmoddi4+0xa6>
 80002d8:	e9c5 6300 	strd	r6, r3, [r5]
 80002dc:	e7e3      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002de:	2a00      	cmp	r2, #0
 80002e0:	f040 8090 	bne.w	8000404 <__udivmoddi4+0x204>
 80002e4:	eba1 040c 	sub.w	r4, r1, ip
 80002e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002ec:	fa1f f78c 	uxth.w	r7, ip
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb4 f6f8 	udiv	r6, r4, r8
 80002f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fa:	fb08 4416 	mls	r4, r8, r6, r4
 80002fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000302:	fb07 f006 	mul.w	r0, r7, r6
 8000306:	4298      	cmp	r0, r3
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x11c>
 800030a:	eb1c 0303 	adds.w	r3, ip, r3
 800030e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x11a>
 8000314:	4298      	cmp	r0, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 800031a:	4626      	mov	r6, r4
 800031c:	1a1c      	subs	r4, r3, r0
 800031e:	fa1f f38e 	uxth.w	r3, lr
 8000322:	fbb4 f0f8 	udiv	r0, r4, r8
 8000326:	fb08 4410 	mls	r4, r8, r0, r4
 800032a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800032e:	fb00 f707 	mul.w	r7, r0, r7
 8000332:	429f      	cmp	r7, r3
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x148>
 8000336:	eb1c 0303 	adds.w	r3, ip, r3
 800033a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x146>
 8000340:	429f      	cmp	r7, r3
 8000342:	f200 80b0 	bhi.w	80004a6 <__udivmoddi4+0x2a6>
 8000346:	4620      	mov	r0, r4
 8000348:	1bdb      	subs	r3, r3, r7
 800034a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800034e:	e7a5      	b.n	800029c <__udivmoddi4+0x9c>
 8000350:	f1c1 0620 	rsb	r6, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 f706 	lsr.w	r7, r2, r6
 800035a:	431f      	orrs	r7, r3
 800035c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000360:	fa04 f301 	lsl.w	r3, r4, r1
 8000364:	ea43 030c 	orr.w	r3, r3, ip
 8000368:	40f4      	lsrs	r4, r6
 800036a:	fa00 f801 	lsl.w	r8, r0, r1
 800036e:	0c38      	lsrs	r0, r7, #16
 8000370:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000374:	fbb4 fef0 	udiv	lr, r4, r0
 8000378:	fa1f fc87 	uxth.w	ip, r7
 800037c:	fb00 441e 	mls	r4, r0, lr, r4
 8000380:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000384:	fb0e f90c 	mul.w	r9, lr, ip
 8000388:	45a1      	cmp	r9, r4
 800038a:	fa02 f201 	lsl.w	r2, r2, r1
 800038e:	d90a      	bls.n	80003a6 <__udivmoddi4+0x1a6>
 8000390:	193c      	adds	r4, r7, r4
 8000392:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000396:	f080 8084 	bcs.w	80004a2 <__udivmoddi4+0x2a2>
 800039a:	45a1      	cmp	r9, r4
 800039c:	f240 8081 	bls.w	80004a2 <__udivmoddi4+0x2a2>
 80003a0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a4:	443c      	add	r4, r7
 80003a6:	eba4 0409 	sub.w	r4, r4, r9
 80003aa:	fa1f f983 	uxth.w	r9, r3
 80003ae:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b2:	fb00 4413 	mls	r4, r0, r3, r4
 80003b6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ba:	fb03 fc0c 	mul.w	ip, r3, ip
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d907      	bls.n	80003d2 <__udivmoddi4+0x1d2>
 80003c2:	193c      	adds	r4, r7, r4
 80003c4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003c8:	d267      	bcs.n	800049a <__udivmoddi4+0x29a>
 80003ca:	45a4      	cmp	ip, r4
 80003cc:	d965      	bls.n	800049a <__udivmoddi4+0x29a>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003d6:	fba0 9302 	umull	r9, r3, r0, r2
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	429c      	cmp	r4, r3
 80003e0:	46ce      	mov	lr, r9
 80003e2:	469c      	mov	ip, r3
 80003e4:	d351      	bcc.n	800048a <__udivmoddi4+0x28a>
 80003e6:	d04e      	beq.n	8000486 <__udivmoddi4+0x286>
 80003e8:	b155      	cbz	r5, 8000400 <__udivmoddi4+0x200>
 80003ea:	ebb8 030e 	subs.w	r3, r8, lr
 80003ee:	eb64 040c 	sbc.w	r4, r4, ip
 80003f2:	fa04 f606 	lsl.w	r6, r4, r6
 80003f6:	40cb      	lsrs	r3, r1
 80003f8:	431e      	orrs	r6, r3
 80003fa:	40cc      	lsrs	r4, r1
 80003fc:	e9c5 6400 	strd	r6, r4, [r5]
 8000400:	2100      	movs	r1, #0
 8000402:	e750      	b.n	80002a6 <__udivmoddi4+0xa6>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f103 	lsr.w	r1, r0, r3
 800040c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000410:	fa24 f303 	lsr.w	r3, r4, r3
 8000414:	4094      	lsls	r4, r2
 8000416:	430c      	orrs	r4, r1
 8000418:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800041c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000420:	fa1f f78c 	uxth.w	r7, ip
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3110 	mls	r1, r8, r0, r3
 800042c:	0c23      	lsrs	r3, r4, #16
 800042e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000432:	fb00 f107 	mul.w	r1, r0, r7
 8000436:	4299      	cmp	r1, r3
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x24c>
 800043a:	eb1c 0303 	adds.w	r3, ip, r3
 800043e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000442:	d22c      	bcs.n	800049e <__udivmoddi4+0x29e>
 8000444:	4299      	cmp	r1, r3
 8000446:	d92a      	bls.n	800049e <__udivmoddi4+0x29e>
 8000448:	3802      	subs	r0, #2
 800044a:	4463      	add	r3, ip
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb3 f1f8 	udiv	r1, r3, r8
 8000454:	fb08 3311 	mls	r3, r8, r1, r3
 8000458:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800045c:	fb01 f307 	mul.w	r3, r1, r7
 8000460:	42a3      	cmp	r3, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x276>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800046c:	d213      	bcs.n	8000496 <__udivmoddi4+0x296>
 800046e:	42a3      	cmp	r3, r4
 8000470:	d911      	bls.n	8000496 <__udivmoddi4+0x296>
 8000472:	3902      	subs	r1, #2
 8000474:	4464      	add	r4, ip
 8000476:	1ae4      	subs	r4, r4, r3
 8000478:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800047c:	e739      	b.n	80002f2 <__udivmoddi4+0xf2>
 800047e:	4604      	mov	r4, r0
 8000480:	e6f0      	b.n	8000264 <__udivmoddi4+0x64>
 8000482:	4608      	mov	r0, r1
 8000484:	e706      	b.n	8000294 <__udivmoddi4+0x94>
 8000486:	45c8      	cmp	r8, r9
 8000488:	d2ae      	bcs.n	80003e8 <__udivmoddi4+0x1e8>
 800048a:	ebb9 0e02 	subs.w	lr, r9, r2
 800048e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000492:	3801      	subs	r0, #1
 8000494:	e7a8      	b.n	80003e8 <__udivmoddi4+0x1e8>
 8000496:	4631      	mov	r1, r6
 8000498:	e7ed      	b.n	8000476 <__udivmoddi4+0x276>
 800049a:	4603      	mov	r3, r0
 800049c:	e799      	b.n	80003d2 <__udivmoddi4+0x1d2>
 800049e:	4630      	mov	r0, r6
 80004a0:	e7d4      	b.n	800044c <__udivmoddi4+0x24c>
 80004a2:	46d6      	mov	lr, sl
 80004a4:	e77f      	b.n	80003a6 <__udivmoddi4+0x1a6>
 80004a6:	4463      	add	r3, ip
 80004a8:	3802      	subs	r0, #2
 80004aa:	e74d      	b.n	8000348 <__udivmoddi4+0x148>
 80004ac:	4606      	mov	r6, r0
 80004ae:	4623      	mov	r3, r4
 80004b0:	4608      	mov	r0, r1
 80004b2:	e70f      	b.n	80002d4 <__udivmoddi4+0xd4>
 80004b4:	3e02      	subs	r6, #2
 80004b6:	4463      	add	r3, ip
 80004b8:	e730      	b.n	800031c <__udivmoddi4+0x11c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b084      	sub	sp, #16
 80004c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80004c6:	463b      	mov	r3, r7
 80004c8:	2200      	movs	r2, #0
 80004ca:	601a      	str	r2, [r3, #0]
 80004cc:	605a      	str	r2, [r3, #4]
 80004ce:	609a      	str	r2, [r3, #8]
 80004d0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80004d2:	4b44      	ldr	r3, [pc, #272]	@ (80005e4 <MX_ADC1_Init+0x124>)
 80004d4:	4a44      	ldr	r2, [pc, #272]	@ (80005e8 <MX_ADC1_Init+0x128>)
 80004d6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80004d8:	4b42      	ldr	r3, [pc, #264]	@ (80005e4 <MX_ADC1_Init+0x124>)
 80004da:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80004de:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80004e0:	4b40      	ldr	r3, [pc, #256]	@ (80005e4 <MX_ADC1_Init+0x124>)
 80004e2:	2200      	movs	r2, #0
 80004e4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80004e6:	4b3f      	ldr	r3, [pc, #252]	@ (80005e4 <MX_ADC1_Init+0x124>)
 80004e8:	2201      	movs	r2, #1
 80004ea:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80004ec:	4b3d      	ldr	r3, [pc, #244]	@ (80005e4 <MX_ADC1_Init+0x124>)
 80004ee:	2201      	movs	r2, #1
 80004f0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80004f2:	4b3c      	ldr	r3, [pc, #240]	@ (80005e4 <MX_ADC1_Init+0x124>)
 80004f4:	2200      	movs	r2, #0
 80004f6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80004fa:	4b3a      	ldr	r3, [pc, #232]	@ (80005e4 <MX_ADC1_Init+0x124>)
 80004fc:	2200      	movs	r2, #0
 80004fe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000500:	4b38      	ldr	r3, [pc, #224]	@ (80005e4 <MX_ADC1_Init+0x124>)
 8000502:	4a3a      	ldr	r2, [pc, #232]	@ (80005ec <MX_ADC1_Init+0x12c>)
 8000504:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000506:	4b37      	ldr	r3, [pc, #220]	@ (80005e4 <MX_ADC1_Init+0x124>)
 8000508:	2200      	movs	r2, #0
 800050a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 6;
 800050c:	4b35      	ldr	r3, [pc, #212]	@ (80005e4 <MX_ADC1_Init+0x124>)
 800050e:	2206      	movs	r2, #6
 8000510:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000512:	4b34      	ldr	r3, [pc, #208]	@ (80005e4 <MX_ADC1_Init+0x124>)
 8000514:	2201      	movs	r2, #1
 8000516:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800051a:	4b32      	ldr	r3, [pc, #200]	@ (80005e4 <MX_ADC1_Init+0x124>)
 800051c:	2201      	movs	r2, #1
 800051e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000520:	4830      	ldr	r0, [pc, #192]	@ (80005e4 <MX_ADC1_Init+0x124>)
 8000522:	f001 fd05 	bl	8001f30 <HAL_ADC_Init>
 8000526:	4603      	mov	r3, r0
 8000528:	2b00      	cmp	r3, #0
 800052a:	d001      	beq.n	8000530 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800052c:	f000 fd3a 	bl	8000fa4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000530:	230c      	movs	r3, #12
 8000532:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000534:	2301      	movs	r3, #1
 8000536:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8000538:	2302      	movs	r3, #2
 800053a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800053c:	463b      	mov	r3, r7
 800053e:	4619      	mov	r1, r3
 8000540:	4828      	ldr	r0, [pc, #160]	@ (80005e4 <MX_ADC1_Init+0x124>)
 8000542:	f001 fe67 	bl	8002214 <HAL_ADC_ConfigChannel>
 8000546:	4603      	mov	r3, r0
 8000548:	2b00      	cmp	r3, #0
 800054a:	d001      	beq.n	8000550 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800054c:	f000 fd2a 	bl	8000fa4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8000550:	230d      	movs	r3, #13
 8000552:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000554:	2302      	movs	r3, #2
 8000556:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000558:	463b      	mov	r3, r7
 800055a:	4619      	mov	r1, r3
 800055c:	4821      	ldr	r0, [pc, #132]	@ (80005e4 <MX_ADC1_Init+0x124>)
 800055e:	f001 fe59 	bl	8002214 <HAL_ADC_ConfigChannel>
 8000562:	4603      	mov	r3, r0
 8000564:	2b00      	cmp	r3, #0
 8000566:	d001      	beq.n	800056c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000568:	f000 fd1c 	bl	8000fa4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 800056c:	230e      	movs	r3, #14
 800056e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000570:	2303      	movs	r3, #3
 8000572:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000574:	463b      	mov	r3, r7
 8000576:	4619      	mov	r1, r3
 8000578:	481a      	ldr	r0, [pc, #104]	@ (80005e4 <MX_ADC1_Init+0x124>)
 800057a:	f001 fe4b 	bl	8002214 <HAL_ADC_ConfigChannel>
 800057e:	4603      	mov	r3, r0
 8000580:	2b00      	cmp	r3, #0
 8000582:	d001      	beq.n	8000588 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8000584:	f000 fd0e 	bl	8000fa4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000588:	230f      	movs	r3, #15
 800058a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 800058c:	2304      	movs	r3, #4
 800058e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000590:	463b      	mov	r3, r7
 8000592:	4619      	mov	r1, r3
 8000594:	4813      	ldr	r0, [pc, #76]	@ (80005e4 <MX_ADC1_Init+0x124>)
 8000596:	f001 fe3d 	bl	8002214 <HAL_ADC_ConfigChannel>
 800059a:	4603      	mov	r3, r0
 800059c:	2b00      	cmp	r3, #0
 800059e:	d001      	beq.n	80005a4 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 80005a0:	f000 fd00 	bl	8000fa4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80005a4:	2310      	movs	r3, #16
 80005a6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 80005a8:	2305      	movs	r3, #5
 80005aa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005ac:	463b      	mov	r3, r7
 80005ae:	4619      	mov	r1, r3
 80005b0:	480c      	ldr	r0, [pc, #48]	@ (80005e4 <MX_ADC1_Init+0x124>)
 80005b2:	f001 fe2f 	bl	8002214 <HAL_ADC_ConfigChannel>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d001      	beq.n	80005c0 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 80005bc:	f000 fcf2 	bl	8000fa4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 80005c0:	2311      	movs	r3, #17
 80005c2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 80005c4:	2306      	movs	r3, #6
 80005c6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005c8:	463b      	mov	r3, r7
 80005ca:	4619      	mov	r1, r3
 80005cc:	4805      	ldr	r0, [pc, #20]	@ (80005e4 <MX_ADC1_Init+0x124>)
 80005ce:	f001 fe21 	bl	8002214 <HAL_ADC_ConfigChannel>
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d001      	beq.n	80005dc <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 80005d8:	f000 fce4 	bl	8000fa4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80005dc:	bf00      	nop
 80005de:	3710      	adds	r7, #16
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}
 80005e4:	2000011c 	.word	0x2000011c
 80005e8:	40012000 	.word	0x40012000
 80005ec:	0f000001 	.word	0x0f000001

080005f0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b08a      	sub	sp, #40	@ 0x28
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005f8:	f107 0314 	add.w	r3, r7, #20
 80005fc:	2200      	movs	r2, #0
 80005fe:	601a      	str	r2, [r3, #0]
 8000600:	605a      	str	r2, [r3, #4]
 8000602:	609a      	str	r2, [r3, #8]
 8000604:	60da      	str	r2, [r3, #12]
 8000606:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	4a33      	ldr	r2, [pc, #204]	@ (80006dc <HAL_ADC_MspInit+0xec>)
 800060e:	4293      	cmp	r3, r2
 8000610:	d15f      	bne.n	80006d2 <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000612:	2300      	movs	r3, #0
 8000614:	613b      	str	r3, [r7, #16]
 8000616:	4b32      	ldr	r3, [pc, #200]	@ (80006e0 <HAL_ADC_MspInit+0xf0>)
 8000618:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800061a:	4a31      	ldr	r2, [pc, #196]	@ (80006e0 <HAL_ADC_MspInit+0xf0>)
 800061c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000620:	6453      	str	r3, [r2, #68]	@ 0x44
 8000622:	4b2f      	ldr	r3, [pc, #188]	@ (80006e0 <HAL_ADC_MspInit+0xf0>)
 8000624:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000626:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800062a:	613b      	str	r3, [r7, #16]
 800062c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800062e:	2300      	movs	r3, #0
 8000630:	60fb      	str	r3, [r7, #12]
 8000632:	4b2b      	ldr	r3, [pc, #172]	@ (80006e0 <HAL_ADC_MspInit+0xf0>)
 8000634:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000636:	4a2a      	ldr	r2, [pc, #168]	@ (80006e0 <HAL_ADC_MspInit+0xf0>)
 8000638:	f043 0304 	orr.w	r3, r3, #4
 800063c:	6313      	str	r3, [r2, #48]	@ 0x30
 800063e:	4b28      	ldr	r3, [pc, #160]	@ (80006e0 <HAL_ADC_MspInit+0xf0>)
 8000640:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000642:	f003 0304 	and.w	r3, r3, #4
 8000646:	60fb      	str	r3, [r7, #12]
 8000648:	68fb      	ldr	r3, [r7, #12]
    PC2     ------> ADC1_IN12
    PC3     ------> ADC1_IN13
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800064a:	233c      	movs	r3, #60	@ 0x3c
 800064c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800064e:	2303      	movs	r3, #3
 8000650:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000652:	2300      	movs	r3, #0
 8000654:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000656:	f107 0314 	add.w	r3, r7, #20
 800065a:	4619      	mov	r1, r3
 800065c:	4821      	ldr	r0, [pc, #132]	@ (80006e4 <HAL_ADC_MspInit+0xf4>)
 800065e:	f002 ff93 	bl	8003588 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000662:	4b21      	ldr	r3, [pc, #132]	@ (80006e8 <HAL_ADC_MspInit+0xf8>)
 8000664:	4a21      	ldr	r2, [pc, #132]	@ (80006ec <HAL_ADC_MspInit+0xfc>)
 8000666:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000668:	4b1f      	ldr	r3, [pc, #124]	@ (80006e8 <HAL_ADC_MspInit+0xf8>)
 800066a:	2200      	movs	r2, #0
 800066c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800066e:	4b1e      	ldr	r3, [pc, #120]	@ (80006e8 <HAL_ADC_MspInit+0xf8>)
 8000670:	2200      	movs	r2, #0
 8000672:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000674:	4b1c      	ldr	r3, [pc, #112]	@ (80006e8 <HAL_ADC_MspInit+0xf8>)
 8000676:	2200      	movs	r2, #0
 8000678:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800067a:	4b1b      	ldr	r3, [pc, #108]	@ (80006e8 <HAL_ADC_MspInit+0xf8>)
 800067c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000680:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000682:	4b19      	ldr	r3, [pc, #100]	@ (80006e8 <HAL_ADC_MspInit+0xf8>)
 8000684:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000688:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800068a:	4b17      	ldr	r3, [pc, #92]	@ (80006e8 <HAL_ADC_MspInit+0xf8>)
 800068c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000690:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000692:	4b15      	ldr	r3, [pc, #84]	@ (80006e8 <HAL_ADC_MspInit+0xf8>)
 8000694:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000698:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800069a:	4b13      	ldr	r3, [pc, #76]	@ (80006e8 <HAL_ADC_MspInit+0xf8>)
 800069c:	2200      	movs	r2, #0
 800069e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80006a0:	4b11      	ldr	r3, [pc, #68]	@ (80006e8 <HAL_ADC_MspInit+0xf8>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80006a6:	4810      	ldr	r0, [pc, #64]	@ (80006e8 <HAL_ADC_MspInit+0xf8>)
 80006a8:	f002 fbf2 	bl	8002e90 <HAL_DMA_Init>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 80006b2:	f000 fc77 	bl	8000fa4 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	4a0b      	ldr	r2, [pc, #44]	@ (80006e8 <HAL_ADC_MspInit+0xf8>)
 80006ba:	639a      	str	r2, [r3, #56]	@ 0x38
 80006bc:	4a0a      	ldr	r2, [pc, #40]	@ (80006e8 <HAL_ADC_MspInit+0xf8>)
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 80006c2:	2200      	movs	r2, #0
 80006c4:	2105      	movs	r1, #5
 80006c6:	2012      	movs	r0, #18
 80006c8:	f002 fbb8 	bl	8002e3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80006cc:	2012      	movs	r0, #18
 80006ce:	f002 fbd1 	bl	8002e74 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80006d2:	bf00      	nop
 80006d4:	3728      	adds	r7, #40	@ 0x28
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	40012000 	.word	0x40012000
 80006e0:	40023800 	.word	0x40023800
 80006e4:	40020800 	.word	0x40020800
 80006e8:	20000164 	.word	0x20000164
 80006ec:	40026410 	.word	0x40026410

080006f0 <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan2;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80006f4:	4b17      	ldr	r3, [pc, #92]	@ (8000754 <MX_CAN1_Init+0x64>)
 80006f6:	4a18      	ldr	r2, [pc, #96]	@ (8000758 <MX_CAN1_Init+0x68>)
 80006f8:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 7;
 80006fa:	4b16      	ldr	r3, [pc, #88]	@ (8000754 <MX_CAN1_Init+0x64>)
 80006fc:	2207      	movs	r2, #7
 80006fe:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000700:	4b14      	ldr	r3, [pc, #80]	@ (8000754 <MX_CAN1_Init+0x64>)
 8000702:	2200      	movs	r2, #0
 8000704:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000706:	4b13      	ldr	r3, [pc, #76]	@ (8000754 <MX_CAN1_Init+0x64>)
 8000708:	2200      	movs	r2, #0
 800070a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_3TQ;
 800070c:	4b11      	ldr	r3, [pc, #68]	@ (8000754 <MX_CAN1_Init+0x64>)
 800070e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000712:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000714:	4b0f      	ldr	r3, [pc, #60]	@ (8000754 <MX_CAN1_Init+0x64>)
 8000716:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800071a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800071c:	4b0d      	ldr	r3, [pc, #52]	@ (8000754 <MX_CAN1_Init+0x64>)
 800071e:	2200      	movs	r2, #0
 8000720:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000722:	4b0c      	ldr	r3, [pc, #48]	@ (8000754 <MX_CAN1_Init+0x64>)
 8000724:	2200      	movs	r2, #0
 8000726:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = ENABLE;
 8000728:	4b0a      	ldr	r3, [pc, #40]	@ (8000754 <MX_CAN1_Init+0x64>)
 800072a:	2201      	movs	r2, #1
 800072c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800072e:	4b09      	ldr	r3, [pc, #36]	@ (8000754 <MX_CAN1_Init+0x64>)
 8000730:	2200      	movs	r2, #0
 8000732:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000734:	4b07      	ldr	r3, [pc, #28]	@ (8000754 <MX_CAN1_Init+0x64>)
 8000736:	2200      	movs	r2, #0
 8000738:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = ENABLE;
 800073a:	4b06      	ldr	r3, [pc, #24]	@ (8000754 <MX_CAN1_Init+0x64>)
 800073c:	2201      	movs	r2, #1
 800073e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000740:	4804      	ldr	r0, [pc, #16]	@ (8000754 <MX_CAN1_Init+0x64>)
 8000742:	f001 ff8f 	bl	8002664 <HAL_CAN_Init>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 800074c:	f000 fc2a 	bl	8000fa4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000750:	bf00      	nop
 8000752:	bd80      	pop	{r7, pc}
 8000754:	200001c4 	.word	0x200001c4
 8000758:	40006400 	.word	0x40006400

0800075c <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8000760:	4b17      	ldr	r3, [pc, #92]	@ (80007c0 <MX_CAN2_Init+0x64>)
 8000762:	4a18      	ldr	r2, [pc, #96]	@ (80007c4 <MX_CAN2_Init+0x68>)
 8000764:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 7;
 8000766:	4b16      	ldr	r3, [pc, #88]	@ (80007c0 <MX_CAN2_Init+0x64>)
 8000768:	2207      	movs	r2, #7
 800076a:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 800076c:	4b14      	ldr	r3, [pc, #80]	@ (80007c0 <MX_CAN2_Init+0x64>)
 800076e:	2200      	movs	r2, #0
 8000770:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000772:	4b13      	ldr	r3, [pc, #76]	@ (80007c0 <MX_CAN2_Init+0x64>)
 8000774:	2200      	movs	r2, #0
 8000776:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_3TQ;
 8000778:	4b11      	ldr	r3, [pc, #68]	@ (80007c0 <MX_CAN2_Init+0x64>)
 800077a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800077e:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000780:	4b0f      	ldr	r3, [pc, #60]	@ (80007c0 <MX_CAN2_Init+0x64>)
 8000782:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8000786:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8000788:	4b0d      	ldr	r3, [pc, #52]	@ (80007c0 <MX_CAN2_Init+0x64>)
 800078a:	2200      	movs	r2, #0
 800078c:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 800078e:	4b0c      	ldr	r3, [pc, #48]	@ (80007c0 <MX_CAN2_Init+0x64>)
 8000790:	2200      	movs	r2, #0
 8000792:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = ENABLE;
 8000794:	4b0a      	ldr	r3, [pc, #40]	@ (80007c0 <MX_CAN2_Init+0x64>)
 8000796:	2201      	movs	r2, #1
 8000798:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 800079a:	4b09      	ldr	r3, [pc, #36]	@ (80007c0 <MX_CAN2_Init+0x64>)
 800079c:	2200      	movs	r2, #0
 800079e:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 80007a0:	4b07      	ldr	r3, [pc, #28]	@ (80007c0 <MX_CAN2_Init+0x64>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 80007a6:	4b06      	ldr	r3, [pc, #24]	@ (80007c0 <MX_CAN2_Init+0x64>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 80007ac:	4804      	ldr	r0, [pc, #16]	@ (80007c0 <MX_CAN2_Init+0x64>)
 80007ae:	f001 ff59 	bl	8002664 <HAL_CAN_Init>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 80007b8:	f000 fbf4 	bl	8000fa4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 80007bc:	bf00      	nop
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	200001ec 	.word	0x200001ec
 80007c4:	40006800 	.word	0x40006800

080007c8 <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b08c      	sub	sp, #48	@ 0x30
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d0:	f107 031c 	add.w	r3, r7, #28
 80007d4:	2200      	movs	r2, #0
 80007d6:	601a      	str	r2, [r3, #0]
 80007d8:	605a      	str	r2, [r3, #4]
 80007da:	609a      	str	r2, [r3, #8]
 80007dc:	60da      	str	r2, [r3, #12]
 80007de:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	4a74      	ldr	r2, [pc, #464]	@ (80009b8 <HAL_CAN_MspInit+0x1f0>)
 80007e6:	4293      	cmp	r3, r2
 80007e8:	d167      	bne.n	80008ba <HAL_CAN_MspInit+0xf2>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 80007ea:	4b74      	ldr	r3, [pc, #464]	@ (80009bc <HAL_CAN_MspInit+0x1f4>)
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	3301      	adds	r3, #1
 80007f0:	4a72      	ldr	r2, [pc, #456]	@ (80009bc <HAL_CAN_MspInit+0x1f4>)
 80007f2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80007f4:	4b71      	ldr	r3, [pc, #452]	@ (80009bc <HAL_CAN_MspInit+0x1f4>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	2b01      	cmp	r3, #1
 80007fa:	d10d      	bne.n	8000818 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80007fc:	2300      	movs	r3, #0
 80007fe:	61bb      	str	r3, [r7, #24]
 8000800:	4b6f      	ldr	r3, [pc, #444]	@ (80009c0 <HAL_CAN_MspInit+0x1f8>)
 8000802:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000804:	4a6e      	ldr	r2, [pc, #440]	@ (80009c0 <HAL_CAN_MspInit+0x1f8>)
 8000806:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800080a:	6413      	str	r3, [r2, #64]	@ 0x40
 800080c:	4b6c      	ldr	r3, [pc, #432]	@ (80009c0 <HAL_CAN_MspInit+0x1f8>)
 800080e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000810:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000814:	61bb      	str	r3, [r7, #24]
 8000816:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000818:	2300      	movs	r3, #0
 800081a:	617b      	str	r3, [r7, #20]
 800081c:	4b68      	ldr	r3, [pc, #416]	@ (80009c0 <HAL_CAN_MspInit+0x1f8>)
 800081e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000820:	4a67      	ldr	r2, [pc, #412]	@ (80009c0 <HAL_CAN_MspInit+0x1f8>)
 8000822:	f043 0302 	orr.w	r3, r3, #2
 8000826:	6313      	str	r3, [r2, #48]	@ 0x30
 8000828:	4b65      	ldr	r3, [pc, #404]	@ (80009c0 <HAL_CAN_MspInit+0x1f8>)
 800082a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082c:	f003 0302 	and.w	r3, r3, #2
 8000830:	617b      	str	r3, [r7, #20]
 8000832:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000834:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000838:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800083a:	2302      	movs	r3, #2
 800083c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800083e:	2301      	movs	r3, #1
 8000840:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000842:	2303      	movs	r3, #3
 8000844:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000846:	2309      	movs	r3, #9
 8000848:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800084a:	f107 031c 	add.w	r3, r7, #28
 800084e:	4619      	mov	r1, r3
 8000850:	485c      	ldr	r0, [pc, #368]	@ (80009c4 <HAL_CAN_MspInit+0x1fc>)
 8000852:	f002 fe99 	bl	8003588 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000856:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800085a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800085c:	2302      	movs	r3, #2
 800085e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000860:	2300      	movs	r3, #0
 8000862:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000864:	2303      	movs	r3, #3
 8000866:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000868:	2309      	movs	r3, #9
 800086a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800086c:	f107 031c 	add.w	r3, r7, #28
 8000870:	4619      	mov	r1, r3
 8000872:	4854      	ldr	r0, [pc, #336]	@ (80009c4 <HAL_CAN_MspInit+0x1fc>)
 8000874:	f002 fe88 	bl	8003588 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 5, 0);
 8000878:	2200      	movs	r2, #0
 800087a:	2105      	movs	r1, #5
 800087c:	2013      	movs	r0, #19
 800087e:	f002 fadd 	bl	8002e3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8000882:	2013      	movs	r0, #19
 8000884:	f002 faf6 	bl	8002e74 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8000888:	2200      	movs	r2, #0
 800088a:	2105      	movs	r1, #5
 800088c:	2014      	movs	r0, #20
 800088e:	f002 fad5 	bl	8002e3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000892:	2014      	movs	r0, #20
 8000894:	f002 faee 	bl	8002e74 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 8000898:	2200      	movs	r2, #0
 800089a:	2105      	movs	r1, #5
 800089c:	2015      	movs	r0, #21
 800089e:	f002 facd 	bl	8002e3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 80008a2:	2015      	movs	r0, #21
 80008a4:	f002 fae6 	bl	8002e74 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 5, 0);
 80008a8:	2200      	movs	r2, #0
 80008aa:	2105      	movs	r1, #5
 80008ac:	2016      	movs	r0, #22
 80008ae:	f002 fac5 	bl	8002e3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 80008b2:	2016      	movs	r0, #22
 80008b4:	f002 fade 	bl	8002e74 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(CAN2_SCE_IRQn);
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 80008b8:	e079      	b.n	80009ae <HAL_CAN_MspInit+0x1e6>
  else if(canHandle->Instance==CAN2)
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	4a42      	ldr	r2, [pc, #264]	@ (80009c8 <HAL_CAN_MspInit+0x200>)
 80008c0:	4293      	cmp	r3, r2
 80008c2:	d174      	bne.n	80009ae <HAL_CAN_MspInit+0x1e6>
    __HAL_RCC_CAN2_CLK_ENABLE();
 80008c4:	2300      	movs	r3, #0
 80008c6:	613b      	str	r3, [r7, #16]
 80008c8:	4b3d      	ldr	r3, [pc, #244]	@ (80009c0 <HAL_CAN_MspInit+0x1f8>)
 80008ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008cc:	4a3c      	ldr	r2, [pc, #240]	@ (80009c0 <HAL_CAN_MspInit+0x1f8>)
 80008ce:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80008d2:	6413      	str	r3, [r2, #64]	@ 0x40
 80008d4:	4b3a      	ldr	r3, [pc, #232]	@ (80009c0 <HAL_CAN_MspInit+0x1f8>)
 80008d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008d8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80008dc:	613b      	str	r3, [r7, #16]
 80008de:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 80008e0:	4b36      	ldr	r3, [pc, #216]	@ (80009bc <HAL_CAN_MspInit+0x1f4>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	3301      	adds	r3, #1
 80008e6:	4a35      	ldr	r2, [pc, #212]	@ (80009bc <HAL_CAN_MspInit+0x1f4>)
 80008e8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80008ea:	4b34      	ldr	r3, [pc, #208]	@ (80009bc <HAL_CAN_MspInit+0x1f4>)
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	2b01      	cmp	r3, #1
 80008f0:	d10d      	bne.n	800090e <HAL_CAN_MspInit+0x146>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80008f2:	2300      	movs	r3, #0
 80008f4:	60fb      	str	r3, [r7, #12]
 80008f6:	4b32      	ldr	r3, [pc, #200]	@ (80009c0 <HAL_CAN_MspInit+0x1f8>)
 80008f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008fa:	4a31      	ldr	r2, [pc, #196]	@ (80009c0 <HAL_CAN_MspInit+0x1f8>)
 80008fc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000900:	6413      	str	r3, [r2, #64]	@ 0x40
 8000902:	4b2f      	ldr	r3, [pc, #188]	@ (80009c0 <HAL_CAN_MspInit+0x1f8>)
 8000904:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000906:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800090a:	60fb      	str	r3, [r7, #12]
 800090c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800090e:	2300      	movs	r3, #0
 8000910:	60bb      	str	r3, [r7, #8]
 8000912:	4b2b      	ldr	r3, [pc, #172]	@ (80009c0 <HAL_CAN_MspInit+0x1f8>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000916:	4a2a      	ldr	r2, [pc, #168]	@ (80009c0 <HAL_CAN_MspInit+0x1f8>)
 8000918:	f043 0302 	orr.w	r3, r3, #2
 800091c:	6313      	str	r3, [r2, #48]	@ 0x30
 800091e:	4b28      	ldr	r3, [pc, #160]	@ (80009c0 <HAL_CAN_MspInit+0x1f8>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000922:	f003 0302 	and.w	r3, r3, #2
 8000926:	60bb      	str	r3, [r7, #8]
 8000928:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800092a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800092e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000930:	2302      	movs	r3, #2
 8000932:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000934:	2301      	movs	r3, #1
 8000936:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000938:	2303      	movs	r3, #3
 800093a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 800093c:	2309      	movs	r3, #9
 800093e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000940:	f107 031c 	add.w	r3, r7, #28
 8000944:	4619      	mov	r1, r3
 8000946:	481f      	ldr	r0, [pc, #124]	@ (80009c4 <HAL_CAN_MspInit+0x1fc>)
 8000948:	f002 fe1e 	bl	8003588 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800094c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000950:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000952:	2302      	movs	r3, #2
 8000954:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000956:	2300      	movs	r3, #0
 8000958:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800095a:	2303      	movs	r3, #3
 800095c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 800095e:	2309      	movs	r3, #9
 8000960:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000962:	f107 031c 	add.w	r3, r7, #28
 8000966:	4619      	mov	r1, r3
 8000968:	4816      	ldr	r0, [pc, #88]	@ (80009c4 <HAL_CAN_MspInit+0x1fc>)
 800096a:	f002 fe0d 	bl	8003588 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_TX_IRQn, 5, 0);
 800096e:	2200      	movs	r2, #0
 8000970:	2105      	movs	r1, #5
 8000972:	203f      	movs	r0, #63	@ 0x3f
 8000974:	f002 fa62 	bl	8002e3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_TX_IRQn);
 8000978:	203f      	movs	r0, #63	@ 0x3f
 800097a:	f002 fa7b 	bl	8002e74 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 5, 0);
 800097e:	2200      	movs	r2, #0
 8000980:	2105      	movs	r1, #5
 8000982:	2040      	movs	r0, #64	@ 0x40
 8000984:	f002 fa5a 	bl	8002e3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8000988:	2040      	movs	r0, #64	@ 0x40
 800098a:	f002 fa73 	bl	8002e74 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 5, 0);
 800098e:	2200      	movs	r2, #0
 8000990:	2105      	movs	r1, #5
 8000992:	2041      	movs	r0, #65	@ 0x41
 8000994:	f002 fa52 	bl	8002e3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 8000998:	2041      	movs	r0, #65	@ 0x41
 800099a:	f002 fa6b 	bl	8002e74 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_SCE_IRQn, 5, 0);
 800099e:	2200      	movs	r2, #0
 80009a0:	2105      	movs	r1, #5
 80009a2:	2042      	movs	r0, #66	@ 0x42
 80009a4:	f002 fa4a 	bl	8002e3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_SCE_IRQn);
 80009a8:	2042      	movs	r0, #66	@ 0x42
 80009aa:	f002 fa63 	bl	8002e74 <HAL_NVIC_EnableIRQ>
}
 80009ae:	bf00      	nop
 80009b0:	3730      	adds	r7, #48	@ 0x30
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	40006400 	.word	0x40006400
 80009bc:	20000214 	.word	0x20000214
 80009c0:	40023800 	.word	0x40023800
 80009c4:	40020400 	.word	0x40020400
 80009c8:	40006800 	.word	0x40006800

080009cc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b082      	sub	sp, #8
 80009d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80009d2:	2300      	movs	r3, #0
 80009d4:	607b      	str	r3, [r7, #4]
 80009d6:	4b23      	ldr	r3, [pc, #140]	@ (8000a64 <MX_DMA_Init+0x98>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009da:	4a22      	ldr	r2, [pc, #136]	@ (8000a64 <MX_DMA_Init+0x98>)
 80009dc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80009e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80009e2:	4b20      	ldr	r3, [pc, #128]	@ (8000a64 <MX_DMA_Init+0x98>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009e6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80009ea:	607b      	str	r3, [r7, #4]
 80009ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80009ee:	2300      	movs	r3, #0
 80009f0:	603b      	str	r3, [r7, #0]
 80009f2:	4b1c      	ldr	r3, [pc, #112]	@ (8000a64 <MX_DMA_Init+0x98>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009f6:	4a1b      	ldr	r2, [pc, #108]	@ (8000a64 <MX_DMA_Init+0x98>)
 80009f8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80009fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80009fe:	4b19      	ldr	r3, [pc, #100]	@ (8000a64 <MX_DMA_Init+0x98>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a02:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000a06:	603b      	str	r3, [r7, #0]
 8000a08:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 6, 0);
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	2106      	movs	r1, #6
 8000a0e:	200b      	movs	r0, #11
 8000a10:	f002 fa14 	bl	8002e3c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000a14:	200b      	movs	r0, #11
 8000a16:	f002 fa2d 	bl	8002e74 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 6, 0);
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	2106      	movs	r1, #6
 8000a1e:	200d      	movs	r0, #13
 8000a20:	f002 fa0c 	bl	8002e3c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000a24:	200d      	movs	r0, #13
 8000a26:	f002 fa25 	bl	8002e74 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 6, 0);
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	2106      	movs	r1, #6
 8000a2e:	200f      	movs	r0, #15
 8000a30:	f002 fa04 	bl	8002e3c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000a34:	200f      	movs	r0, #15
 8000a36:	f002 fa1d 	bl	8002e74 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 6, 0);
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	2106      	movs	r1, #6
 8000a3e:	202f      	movs	r0, #47	@ 0x2f
 8000a40:	f002 f9fc 	bl	8002e3c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8000a44:	202f      	movs	r0, #47	@ 0x2f
 8000a46:	f002 fa15 	bl	8002e74 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	2105      	movs	r1, #5
 8000a4e:	2038      	movs	r0, #56	@ 0x38
 8000a50:	f002 f9f4 	bl	8002e3c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000a54:	2038      	movs	r0, #56	@ 0x38
 8000a56:	f002 fa0d 	bl	8002e74 <HAL_NVIC_EnableIRQ>

}
 8000a5a:	bf00      	nop
 8000a5c:	3708      	adds	r7, #8
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	40023800 	.word	0x40023800

08000a68 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000a6c:	4a04      	ldr	r2, [pc, #16]	@ (8000a80 <MX_FREERTOS_Init+0x18>)
 8000a6e:	2100      	movs	r1, #0
 8000a70:	4804      	ldr	r0, [pc, #16]	@ (8000a84 <MX_FREERTOS_Init+0x1c>)
 8000a72:	f009 ff67 	bl	800a944 <osThreadNew>
 8000a76:	4603      	mov	r3, r0
 8000a78:	4a03      	ldr	r2, [pc, #12]	@ (8000a88 <MX_FREERTOS_Init+0x20>)
 8000a7a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000a7c:	bf00      	nop
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	0800de78 	.word	0x0800de78
 8000a84:	08000a8d 	.word	0x08000a8d
 8000a88:	20000218 	.word	0x20000218

08000a8c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b082      	sub	sp, #8
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8000a94:	f00c fc90 	bl	800d3b8 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000a98:	2001      	movs	r0, #1
 8000a9a:	f009 ffe5 	bl	800aa68 <osDelay>
 8000a9e:	e7fb      	b.n	8000a98 <StartDefaultTask+0xc>

08000aa0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b08a      	sub	sp, #40	@ 0x28
 8000aa4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa6:	f107 0314 	add.w	r3, r7, #20
 8000aaa:	2200      	movs	r2, #0
 8000aac:	601a      	str	r2, [r3, #0]
 8000aae:	605a      	str	r2, [r3, #4]
 8000ab0:	609a      	str	r2, [r3, #8]
 8000ab2:	60da      	str	r2, [r3, #12]
 8000ab4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	613b      	str	r3, [r7, #16]
 8000aba:	4b35      	ldr	r3, [pc, #212]	@ (8000b90 <MX_GPIO_Init+0xf0>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000abe:	4a34      	ldr	r2, [pc, #208]	@ (8000b90 <MX_GPIO_Init+0xf0>)
 8000ac0:	f043 0304 	orr.w	r3, r3, #4
 8000ac4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ac6:	4b32      	ldr	r3, [pc, #200]	@ (8000b90 <MX_GPIO_Init+0xf0>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aca:	f003 0304 	and.w	r3, r3, #4
 8000ace:	613b      	str	r3, [r7, #16]
 8000ad0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	60fb      	str	r3, [r7, #12]
 8000ad6:	4b2e      	ldr	r3, [pc, #184]	@ (8000b90 <MX_GPIO_Init+0xf0>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ada:	4a2d      	ldr	r2, [pc, #180]	@ (8000b90 <MX_GPIO_Init+0xf0>)
 8000adc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ae0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ae2:	4b2b      	ldr	r3, [pc, #172]	@ (8000b90 <MX_GPIO_Init+0xf0>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ae6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000aea:	60fb      	str	r3, [r7, #12]
 8000aec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aee:	2300      	movs	r3, #0
 8000af0:	60bb      	str	r3, [r7, #8]
 8000af2:	4b27      	ldr	r3, [pc, #156]	@ (8000b90 <MX_GPIO_Init+0xf0>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000af6:	4a26      	ldr	r2, [pc, #152]	@ (8000b90 <MX_GPIO_Init+0xf0>)
 8000af8:	f043 0301 	orr.w	r3, r3, #1
 8000afc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000afe:	4b24      	ldr	r3, [pc, #144]	@ (8000b90 <MX_GPIO_Init+0xf0>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b02:	f003 0301 	and.w	r3, r3, #1
 8000b06:	60bb      	str	r3, [r7, #8]
 8000b08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	607b      	str	r3, [r7, #4]
 8000b0e:	4b20      	ldr	r3, [pc, #128]	@ (8000b90 <MX_GPIO_Init+0xf0>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b12:	4a1f      	ldr	r2, [pc, #124]	@ (8000b90 <MX_GPIO_Init+0xf0>)
 8000b14:	f043 0302 	orr.w	r3, r3, #2
 8000b18:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b1a:	4b1d      	ldr	r3, [pc, #116]	@ (8000b90 <MX_GPIO_Init+0xf0>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b1e:	f003 0302 	and.w	r3, r3, #2
 8000b22:	607b      	str	r3, [r7, #4]
 8000b24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b26:	2300      	movs	r3, #0
 8000b28:	603b      	str	r3, [r7, #0]
 8000b2a:	4b19      	ldr	r3, [pc, #100]	@ (8000b90 <MX_GPIO_Init+0xf0>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b2e:	4a18      	ldr	r2, [pc, #96]	@ (8000b90 <MX_GPIO_Init+0xf0>)
 8000b30:	f043 0308 	orr.w	r3, r3, #8
 8000b34:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b36:	4b16      	ldr	r3, [pc, #88]	@ (8000b90 <MX_GPIO_Init+0xf0>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b3a:	f003 0308 	and.w	r3, r3, #8
 8000b3e:	603b      	str	r3, [r7, #0]
 8000b40:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000b42:	2201      	movs	r2, #1
 8000b44:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000b48:	4812      	ldr	r0, [pc, #72]	@ (8000b94 <MX_GPIO_Init+0xf4>)
 8000b4a:	f002 feb9 	bl	80038c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY_Pin;
 8000b4e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b54:	2300      	movs	r3, #0
 8000b56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b58:	2301      	movs	r3, #1
 8000b5a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(KEY_GPIO_Port, &GPIO_InitStruct);
 8000b5c:	f107 0314 	add.w	r3, r7, #20
 8000b60:	4619      	mov	r1, r3
 8000b62:	480c      	ldr	r0, [pc, #48]	@ (8000b94 <MX_GPIO_Init+0xf4>)
 8000b64:	f002 fd10 	bl	8003588 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000b68:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b6e:	2301      	movs	r3, #1
 8000b70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b72:	2300      	movs	r3, #0
 8000b74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b76:	2302      	movs	r3, #2
 8000b78:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000b7a:	f107 0314 	add.w	r3, r7, #20
 8000b7e:	4619      	mov	r1, r3
 8000b80:	4804      	ldr	r0, [pc, #16]	@ (8000b94 <MX_GPIO_Init+0xf4>)
 8000b82:	f002 fd01 	bl	8003588 <HAL_GPIO_Init>

}
 8000b86:	bf00      	nop
 8000b88:	3728      	adds	r7, #40	@ 0x28
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	40023800 	.word	0x40023800
 8000b94:	40020800 	.word	0x40020800

08000b98 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c2;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b9c:	4b12      	ldr	r3, [pc, #72]	@ (8000be8 <MX_I2C1_Init+0x50>)
 8000b9e:	4a13      	ldr	r2, [pc, #76]	@ (8000bec <MX_I2C1_Init+0x54>)
 8000ba0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000ba2:	4b11      	ldr	r3, [pc, #68]	@ (8000be8 <MX_I2C1_Init+0x50>)
 8000ba4:	4a12      	ldr	r2, [pc, #72]	@ (8000bf0 <MX_I2C1_Init+0x58>)
 8000ba6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ba8:	4b0f      	ldr	r3, [pc, #60]	@ (8000be8 <MX_I2C1_Init+0x50>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000bae:	4b0e      	ldr	r3, [pc, #56]	@ (8000be8 <MX_I2C1_Init+0x50>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000bb4:	4b0c      	ldr	r3, [pc, #48]	@ (8000be8 <MX_I2C1_Init+0x50>)
 8000bb6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000bba:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000bbc:	4b0a      	ldr	r3, [pc, #40]	@ (8000be8 <MX_I2C1_Init+0x50>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000bc2:	4b09      	ldr	r3, [pc, #36]	@ (8000be8 <MX_I2C1_Init+0x50>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000bc8:	4b07      	ldr	r3, [pc, #28]	@ (8000be8 <MX_I2C1_Init+0x50>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000bce:	4b06      	ldr	r3, [pc, #24]	@ (8000be8 <MX_I2C1_Init+0x50>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000bd4:	4804      	ldr	r0, [pc, #16]	@ (8000be8 <MX_I2C1_Init+0x50>)
 8000bd6:	f002 fe8d 	bl	80038f4 <HAL_I2C_Init>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d001      	beq.n	8000be4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000be0:	f000 f9e0 	bl	8000fa4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000be4:	bf00      	nop
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	2000021c 	.word	0x2000021c
 8000bec:	40005400 	.word	0x40005400
 8000bf0:	00061a80 	.word	0x00061a80

08000bf4 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000bf8:	4b12      	ldr	r3, [pc, #72]	@ (8000c44 <MX_I2C2_Init+0x50>)
 8000bfa:	4a13      	ldr	r2, [pc, #76]	@ (8000c48 <MX_I2C2_Init+0x54>)
 8000bfc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8000bfe:	4b11      	ldr	r3, [pc, #68]	@ (8000c44 <MX_I2C2_Init+0x50>)
 8000c00:	4a12      	ldr	r2, [pc, #72]	@ (8000c4c <MX_I2C2_Init+0x58>)
 8000c02:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000c04:	4b0f      	ldr	r3, [pc, #60]	@ (8000c44 <MX_I2C2_Init+0x50>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000c0a:	4b0e      	ldr	r3, [pc, #56]	@ (8000c44 <MX_I2C2_Init+0x50>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c10:	4b0c      	ldr	r3, [pc, #48]	@ (8000c44 <MX_I2C2_Init+0x50>)
 8000c12:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000c16:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c18:	4b0a      	ldr	r3, [pc, #40]	@ (8000c44 <MX_I2C2_Init+0x50>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000c1e:	4b09      	ldr	r3, [pc, #36]	@ (8000c44 <MX_I2C2_Init+0x50>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c24:	4b07      	ldr	r3, [pc, #28]	@ (8000c44 <MX_I2C2_Init+0x50>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c2a:	4b06      	ldr	r3, [pc, #24]	@ (8000c44 <MX_I2C2_Init+0x50>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000c30:	4804      	ldr	r0, [pc, #16]	@ (8000c44 <MX_I2C2_Init+0x50>)
 8000c32:	f002 fe5f 	bl	80038f4 <HAL_I2C_Init>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d001      	beq.n	8000c40 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000c3c:	f000 f9b2 	bl	8000fa4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000c40:	bf00      	nop
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	20000270 	.word	0x20000270
 8000c48:	40005800 	.word	0x40005800
 8000c4c:	00061a80 	.word	0x00061a80

08000c50 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000c54:	4b12      	ldr	r3, [pc, #72]	@ (8000ca0 <MX_I2C3_Init+0x50>)
 8000c56:	4a13      	ldr	r2, [pc, #76]	@ (8000ca4 <MX_I2C3_Init+0x54>)
 8000c58:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 8000c5a:	4b11      	ldr	r3, [pc, #68]	@ (8000ca0 <MX_I2C3_Init+0x50>)
 8000c5c:	4a12      	ldr	r2, [pc, #72]	@ (8000ca8 <MX_I2C3_Init+0x58>)
 8000c5e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000c60:	4b0f      	ldr	r3, [pc, #60]	@ (8000ca0 <MX_I2C3_Init+0x50>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000c66:	4b0e      	ldr	r3, [pc, #56]	@ (8000ca0 <MX_I2C3_Init+0x50>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c6c:	4b0c      	ldr	r3, [pc, #48]	@ (8000ca0 <MX_I2C3_Init+0x50>)
 8000c6e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000c72:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c74:	4b0a      	ldr	r3, [pc, #40]	@ (8000ca0 <MX_I2C3_Init+0x50>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000c7a:	4b09      	ldr	r3, [pc, #36]	@ (8000ca0 <MX_I2C3_Init+0x50>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c80:	4b07      	ldr	r3, [pc, #28]	@ (8000ca0 <MX_I2C3_Init+0x50>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c86:	4b06      	ldr	r3, [pc, #24]	@ (8000ca0 <MX_I2C3_Init+0x50>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000c8c:	4804      	ldr	r0, [pc, #16]	@ (8000ca0 <MX_I2C3_Init+0x50>)
 8000c8e:	f002 fe31 	bl	80038f4 <HAL_I2C_Init>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d001      	beq.n	8000c9c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000c98:	f000 f984 	bl	8000fa4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000c9c:	bf00      	nop
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	200002c4 	.word	0x200002c4
 8000ca4:	40005c00 	.word	0x40005c00
 8000ca8:	00061a80 	.word	0x00061a80

08000cac <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b08e      	sub	sp, #56	@ 0x38
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cb8:	2200      	movs	r2, #0
 8000cba:	601a      	str	r2, [r3, #0]
 8000cbc:	605a      	str	r2, [r3, #4]
 8000cbe:	609a      	str	r2, [r3, #8]
 8000cc0:	60da      	str	r2, [r3, #12]
 8000cc2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	4a5b      	ldr	r2, [pc, #364]	@ (8000e38 <HAL_I2C_MspInit+0x18c>)
 8000cca:	4293      	cmp	r3, r2
 8000ccc:	d12c      	bne.n	8000d28 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cce:	2300      	movs	r3, #0
 8000cd0:	623b      	str	r3, [r7, #32]
 8000cd2:	4b5a      	ldr	r3, [pc, #360]	@ (8000e3c <HAL_I2C_MspInit+0x190>)
 8000cd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cd6:	4a59      	ldr	r2, [pc, #356]	@ (8000e3c <HAL_I2C_MspInit+0x190>)
 8000cd8:	f043 0302 	orr.w	r3, r3, #2
 8000cdc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cde:	4b57      	ldr	r3, [pc, #348]	@ (8000e3c <HAL_I2C_MspInit+0x190>)
 8000ce0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ce2:	f003 0302 	and.w	r3, r3, #2
 8000ce6:	623b      	str	r3, [r7, #32]
 8000ce8:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = IMU_I2C1_SCL_Pin|IMU_I2C1_SDA_Pin;
 8000cea:	23c0      	movs	r3, #192	@ 0xc0
 8000cec:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cee:	2312      	movs	r3, #18
 8000cf0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cf6:	2303      	movs	r3, #3
 8000cf8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000cfa:	2304      	movs	r3, #4
 8000cfc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cfe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d02:	4619      	mov	r1, r3
 8000d04:	484e      	ldr	r0, [pc, #312]	@ (8000e40 <HAL_I2C_MspInit+0x194>)
 8000d06:	f002 fc3f 	bl	8003588 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	61fb      	str	r3, [r7, #28]
 8000d0e:	4b4b      	ldr	r3, [pc, #300]	@ (8000e3c <HAL_I2C_MspInit+0x190>)
 8000d10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d12:	4a4a      	ldr	r2, [pc, #296]	@ (8000e3c <HAL_I2C_MspInit+0x190>)
 8000d14:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000d18:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d1a:	4b48      	ldr	r3, [pc, #288]	@ (8000e3c <HAL_I2C_MspInit+0x190>)
 8000d1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d1e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000d22:	61fb      	str	r3, [r7, #28]
 8000d24:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8000d26:	e083      	b.n	8000e30 <HAL_I2C_MspInit+0x184>
  else if(i2cHandle->Instance==I2C2)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4a45      	ldr	r2, [pc, #276]	@ (8000e44 <HAL_I2C_MspInit+0x198>)
 8000d2e:	4293      	cmp	r3, r2
 8000d30:	d12d      	bne.n	8000d8e <HAL_I2C_MspInit+0xe2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d32:	2300      	movs	r3, #0
 8000d34:	61bb      	str	r3, [r7, #24]
 8000d36:	4b41      	ldr	r3, [pc, #260]	@ (8000e3c <HAL_I2C_MspInit+0x190>)
 8000d38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d3a:	4a40      	ldr	r2, [pc, #256]	@ (8000e3c <HAL_I2C_MspInit+0x190>)
 8000d3c:	f043 0302 	orr.w	r3, r3, #2
 8000d40:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d42:	4b3e      	ldr	r3, [pc, #248]	@ (8000e3c <HAL_I2C_MspInit+0x190>)
 8000d44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d46:	f003 0302 	and.w	r3, r3, #2
 8000d4a:	61bb      	str	r3, [r7, #24]
 8000d4c:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = OLED_I2C2_SCL_Pin|OLED_I2C2_SDA_Pin;
 8000d4e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000d52:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d54:	2312      	movs	r3, #18
 8000d56:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d58:	2301      	movs	r3, #1
 8000d5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d5c:	2303      	movs	r3, #3
 8000d5e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000d60:	2304      	movs	r3, #4
 8000d62:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d64:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d68:	4619      	mov	r1, r3
 8000d6a:	4835      	ldr	r0, [pc, #212]	@ (8000e40 <HAL_I2C_MspInit+0x194>)
 8000d6c:	f002 fc0c 	bl	8003588 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000d70:	2300      	movs	r3, #0
 8000d72:	617b      	str	r3, [r7, #20]
 8000d74:	4b31      	ldr	r3, [pc, #196]	@ (8000e3c <HAL_I2C_MspInit+0x190>)
 8000d76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d78:	4a30      	ldr	r2, [pc, #192]	@ (8000e3c <HAL_I2C_MspInit+0x190>)
 8000d7a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000d7e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d80:	4b2e      	ldr	r3, [pc, #184]	@ (8000e3c <HAL_I2C_MspInit+0x190>)
 8000d82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d84:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000d88:	617b      	str	r3, [r7, #20]
 8000d8a:	697b      	ldr	r3, [r7, #20]
}
 8000d8c:	e050      	b.n	8000e30 <HAL_I2C_MspInit+0x184>
  else if(i2cHandle->Instance==I2C3)
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	4a2d      	ldr	r2, [pc, #180]	@ (8000e48 <HAL_I2C_MspInit+0x19c>)
 8000d94:	4293      	cmp	r3, r2
 8000d96:	d14b      	bne.n	8000e30 <HAL_I2C_MspInit+0x184>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d98:	2300      	movs	r3, #0
 8000d9a:	613b      	str	r3, [r7, #16]
 8000d9c:	4b27      	ldr	r3, [pc, #156]	@ (8000e3c <HAL_I2C_MspInit+0x190>)
 8000d9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000da0:	4a26      	ldr	r2, [pc, #152]	@ (8000e3c <HAL_I2C_MspInit+0x190>)
 8000da2:	f043 0304 	orr.w	r3, r3, #4
 8000da6:	6313      	str	r3, [r2, #48]	@ 0x30
 8000da8:	4b24      	ldr	r3, [pc, #144]	@ (8000e3c <HAL_I2C_MspInit+0x190>)
 8000daa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dac:	f003 0304 	and.w	r3, r3, #4
 8000db0:	613b      	str	r3, [r7, #16]
 8000db2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000db4:	2300      	movs	r3, #0
 8000db6:	60fb      	str	r3, [r7, #12]
 8000db8:	4b20      	ldr	r3, [pc, #128]	@ (8000e3c <HAL_I2C_MspInit+0x190>)
 8000dba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dbc:	4a1f      	ldr	r2, [pc, #124]	@ (8000e3c <HAL_I2C_MspInit+0x190>)
 8000dbe:	f043 0301 	orr.w	r3, r3, #1
 8000dc2:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dc4:	4b1d      	ldr	r3, [pc, #116]	@ (8000e3c <HAL_I2C_MspInit+0x190>)
 8000dc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dc8:	f003 0301 	and.w	r3, r3, #1
 8000dcc:	60fb      	str	r3, [r7, #12]
 8000dce:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000dd0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000dd4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000dd6:	2312      	movs	r3, #18
 8000dd8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dda:	2301      	movs	r3, #1
 8000ddc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dde:	2303      	movs	r3, #3
 8000de0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000de2:	2304      	movs	r3, #4
 8000de4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000de6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000dea:	4619      	mov	r1, r3
 8000dec:	4817      	ldr	r0, [pc, #92]	@ (8000e4c <HAL_I2C_MspInit+0x1a0>)
 8000dee:	f002 fbcb 	bl	8003588 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000df2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000df6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000df8:	2312      	movs	r3, #18
 8000dfa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e00:	2303      	movs	r3, #3
 8000e02:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000e04:	2304      	movs	r3, #4
 8000e06:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e08:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	4810      	ldr	r0, [pc, #64]	@ (8000e50 <HAL_I2C_MspInit+0x1a4>)
 8000e10:	f002 fbba 	bl	8003588 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000e14:	2300      	movs	r3, #0
 8000e16:	60bb      	str	r3, [r7, #8]
 8000e18:	4b08      	ldr	r3, [pc, #32]	@ (8000e3c <HAL_I2C_MspInit+0x190>)
 8000e1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e1c:	4a07      	ldr	r2, [pc, #28]	@ (8000e3c <HAL_I2C_MspInit+0x190>)
 8000e1e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000e22:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e24:	4b05      	ldr	r3, [pc, #20]	@ (8000e3c <HAL_I2C_MspInit+0x190>)
 8000e26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e28:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000e2c:	60bb      	str	r3, [r7, #8]
 8000e2e:	68bb      	ldr	r3, [r7, #8]
}
 8000e30:	bf00      	nop
 8000e32:	3738      	adds	r7, #56	@ 0x38
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	40005400 	.word	0x40005400
 8000e3c:	40023800 	.word	0x40023800
 8000e40:	40020400 	.word	0x40020400
 8000e44:	40005800 	.word	0x40005800
 8000e48:	40005c00 	.word	0x40005c00
 8000e4c:	40020800 	.word	0x40020800
 8000e50:	40020000 	.word	0x40020000

08000e54 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e58:	f001 f804 	bl	8001e64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e5c:	f000 f826 	bl	8000eac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e60:	f7ff fe1e 	bl	8000aa0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000e64:	f7ff fdb2 	bl	80009cc <MX_DMA_Init>
  MX_I2C1_Init();
 8000e68:	f7ff fe96 	bl	8000b98 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000e6c:	f7ff fec2 	bl	8000bf4 <MX_I2C2_Init>
  MX_CAN1_Init();
 8000e70:	f7ff fc3e 	bl	80006f0 <MX_CAN1_Init>
  MX_CAN2_Init();
 8000e74:	f7ff fc72 	bl	800075c <MX_CAN2_Init>
  MX_USART1_UART_Init();
 8000e78:	f000 fdec 	bl	8001a54 <MX_USART1_UART_Init>
  MX_I2C3_Init();
 8000e7c:	f7ff fee8 	bl	8000c50 <MX_I2C3_Init>
  MX_SPI1_Init();
 8000e80:	f000 f896 	bl	8000fb0 <MX_SPI1_Init>
  MX_SPI3_Init();
 8000e84:	f000 f8ca 	bl	800101c <MX_SPI3_Init>
  MX_UART4_Init();
 8000e88:	f000 fd90 	bl	80019ac <MX_UART4_Init>
  MX_ADC1_Init();
 8000e8c:	f7ff fb18 	bl	80004c0 <MX_ADC1_Init>
  MX_UART5_Init();
 8000e90:	f000 fdb6 	bl	8001a00 <MX_UART5_Init>
  MX_TIM2_Init();
 8000e94:	f000 fb96 	bl	80015c4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000e98:	f000 fbe8 	bl	800166c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000e9c:	f009 fd08 	bl	800a8b0 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000ea0:	f7ff fde2 	bl	8000a68 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000ea4:	f009 fd28 	bl	800a8f8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000ea8:	bf00      	nop
 8000eaa:	e7fd      	b.n	8000ea8 <main+0x54>

08000eac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b094      	sub	sp, #80	@ 0x50
 8000eb0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000eb2:	f107 0320 	add.w	r3, r7, #32
 8000eb6:	2230      	movs	r2, #48	@ 0x30
 8000eb8:	2100      	movs	r1, #0
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f00c ff60 	bl	800dd80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ec0:	f107 030c 	add.w	r3, r7, #12
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	601a      	str	r2, [r3, #0]
 8000ec8:	605a      	str	r2, [r3, #4]
 8000eca:	609a      	str	r2, [r3, #8]
 8000ecc:	60da      	str	r2, [r3, #12]
 8000ece:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	60bb      	str	r3, [r7, #8]
 8000ed4:	4b28      	ldr	r3, [pc, #160]	@ (8000f78 <SystemClock_Config+0xcc>)
 8000ed6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ed8:	4a27      	ldr	r2, [pc, #156]	@ (8000f78 <SystemClock_Config+0xcc>)
 8000eda:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ede:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ee0:	4b25      	ldr	r3, [pc, #148]	@ (8000f78 <SystemClock_Config+0xcc>)
 8000ee2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ee4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ee8:	60bb      	str	r3, [r7, #8]
 8000eea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000eec:	2300      	movs	r3, #0
 8000eee:	607b      	str	r3, [r7, #4]
 8000ef0:	4b22      	ldr	r3, [pc, #136]	@ (8000f7c <SystemClock_Config+0xd0>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a21      	ldr	r2, [pc, #132]	@ (8000f7c <SystemClock_Config+0xd0>)
 8000ef6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000efa:	6013      	str	r3, [r2, #0]
 8000efc:	4b1f      	ldr	r3, [pc, #124]	@ (8000f7c <SystemClock_Config+0xd0>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f04:	607b      	str	r3, [r7, #4]
 8000f06:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f08:	2301      	movs	r3, #1
 8000f0a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f0c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000f10:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f12:	2302      	movs	r3, #2
 8000f14:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f16:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000f1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000f1c:	2304      	movs	r3, #4
 8000f1e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000f20:	23a8      	movs	r3, #168	@ 0xa8
 8000f22:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f24:	2302      	movs	r3, #2
 8000f26:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000f28:	2307      	movs	r3, #7
 8000f2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f2c:	f107 0320 	add.w	r3, r7, #32
 8000f30:	4618      	mov	r0, r3
 8000f32:	f004 f873 	bl	800501c <HAL_RCC_OscConfig>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d001      	beq.n	8000f40 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000f3c:	f000 f832 	bl	8000fa4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f40:	230f      	movs	r3, #15
 8000f42:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f44:	2302      	movs	r3, #2
 8000f46:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000f4c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000f50:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000f52:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f56:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000f58:	f107 030c 	add.w	r3, r7, #12
 8000f5c:	2105      	movs	r1, #5
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f004 fad4 	bl	800550c <HAL_RCC_ClockConfig>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d001      	beq.n	8000f6e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000f6a:	f000 f81b 	bl	8000fa4 <Error_Handler>
  }
}
 8000f6e:	bf00      	nop
 8000f70:	3750      	adds	r7, #80	@ 0x50
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	40023800 	.word	0x40023800
 8000f7c:	40007000 	.word	0x40007000

08000f80 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4a04      	ldr	r2, [pc, #16]	@ (8000fa0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d101      	bne.n	8000f96 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000f92:	f000 ff89 	bl	8001ea8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000f96:	bf00      	nop
 8000f98:	3708      	adds	r7, #8
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	40001000 	.word	0x40001000

08000fa4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fa8:	b672      	cpsid	i
}
 8000faa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fac:	bf00      	nop
 8000fae:	e7fd      	b.n	8000fac <Error_Handler+0x8>

08000fb0 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi3;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000fb4:	4b17      	ldr	r3, [pc, #92]	@ (8001014 <MX_SPI1_Init+0x64>)
 8000fb6:	4a18      	ldr	r2, [pc, #96]	@ (8001018 <MX_SPI1_Init+0x68>)
 8000fb8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000fba:	4b16      	ldr	r3, [pc, #88]	@ (8001014 <MX_SPI1_Init+0x64>)
 8000fbc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000fc0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000fc2:	4b14      	ldr	r3, [pc, #80]	@ (8001014 <MX_SPI1_Init+0x64>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000fc8:	4b12      	ldr	r3, [pc, #72]	@ (8001014 <MX_SPI1_Init+0x64>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000fce:	4b11      	ldr	r3, [pc, #68]	@ (8001014 <MX_SPI1_Init+0x64>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000fd4:	4b0f      	ldr	r3, [pc, #60]	@ (8001014 <MX_SPI1_Init+0x64>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000fda:	4b0e      	ldr	r3, [pc, #56]	@ (8001014 <MX_SPI1_Init+0x64>)
 8000fdc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000fe0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000fe2:	4b0c      	ldr	r3, [pc, #48]	@ (8001014 <MX_SPI1_Init+0x64>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000fe8:	4b0a      	ldr	r3, [pc, #40]	@ (8001014 <MX_SPI1_Init+0x64>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000fee:	4b09      	ldr	r3, [pc, #36]	@ (8001014 <MX_SPI1_Init+0x64>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ff4:	4b07      	ldr	r3, [pc, #28]	@ (8001014 <MX_SPI1_Init+0x64>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000ffa:	4b06      	ldr	r3, [pc, #24]	@ (8001014 <MX_SPI1_Init+0x64>)
 8000ffc:	220a      	movs	r2, #10
 8000ffe:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001000:	4804      	ldr	r0, [pc, #16]	@ (8001014 <MX_SPI1_Init+0x64>)
 8001002:	f004 fcd5 	bl	80059b0 <HAL_SPI_Init>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d001      	beq.n	8001010 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800100c:	f7ff ffca 	bl	8000fa4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001010:	bf00      	nop
 8001012:	bd80      	pop	{r7, pc}
 8001014:	20000318 	.word	0x20000318
 8001018:	40013000 	.word	0x40013000

0800101c <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8001020:	4b17      	ldr	r3, [pc, #92]	@ (8001080 <MX_SPI3_Init+0x64>)
 8001022:	4a18      	ldr	r2, [pc, #96]	@ (8001084 <MX_SPI3_Init+0x68>)
 8001024:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001026:	4b16      	ldr	r3, [pc, #88]	@ (8001080 <MX_SPI3_Init+0x64>)
 8001028:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800102c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800102e:	4b14      	ldr	r3, [pc, #80]	@ (8001080 <MX_SPI3_Init+0x64>)
 8001030:	2200      	movs	r2, #0
 8001032:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001034:	4b12      	ldr	r3, [pc, #72]	@ (8001080 <MX_SPI3_Init+0x64>)
 8001036:	2200      	movs	r2, #0
 8001038:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800103a:	4b11      	ldr	r3, [pc, #68]	@ (8001080 <MX_SPI3_Init+0x64>)
 800103c:	2200      	movs	r2, #0
 800103e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001040:	4b0f      	ldr	r3, [pc, #60]	@ (8001080 <MX_SPI3_Init+0x64>)
 8001042:	2200      	movs	r2, #0
 8001044:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001046:	4b0e      	ldr	r3, [pc, #56]	@ (8001080 <MX_SPI3_Init+0x64>)
 8001048:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800104c:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800104e:	4b0c      	ldr	r3, [pc, #48]	@ (8001080 <MX_SPI3_Init+0x64>)
 8001050:	2200      	movs	r2, #0
 8001052:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001054:	4b0a      	ldr	r3, [pc, #40]	@ (8001080 <MX_SPI3_Init+0x64>)
 8001056:	2200      	movs	r2, #0
 8001058:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800105a:	4b09      	ldr	r3, [pc, #36]	@ (8001080 <MX_SPI3_Init+0x64>)
 800105c:	2200      	movs	r2, #0
 800105e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001060:	4b07      	ldr	r3, [pc, #28]	@ (8001080 <MX_SPI3_Init+0x64>)
 8001062:	2200      	movs	r2, #0
 8001064:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 10;
 8001066:	4b06      	ldr	r3, [pc, #24]	@ (8001080 <MX_SPI3_Init+0x64>)
 8001068:	220a      	movs	r2, #10
 800106a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800106c:	4804      	ldr	r0, [pc, #16]	@ (8001080 <MX_SPI3_Init+0x64>)
 800106e:	f004 fc9f 	bl	80059b0 <HAL_SPI_Init>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d001      	beq.n	800107c <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8001078:	f7ff ff94 	bl	8000fa4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800107c:	bf00      	nop
 800107e:	bd80      	pop	{r7, pc}
 8001080:	20000370 	.word	0x20000370
 8001084:	40003c00 	.word	0x40003c00

08001088 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b08e      	sub	sp, #56	@ 0x38
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001090:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001094:	2200      	movs	r2, #0
 8001096:	601a      	str	r2, [r3, #0]
 8001098:	605a      	str	r2, [r3, #4]
 800109a:	609a      	str	r2, [r3, #8]
 800109c:	60da      	str	r2, [r3, #12]
 800109e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4a54      	ldr	r2, [pc, #336]	@ (80011f8 <HAL_SPI_MspInit+0x170>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d14a      	bne.n	8001140 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80010aa:	2300      	movs	r3, #0
 80010ac:	623b      	str	r3, [r7, #32]
 80010ae:	4b53      	ldr	r3, [pc, #332]	@ (80011fc <HAL_SPI_MspInit+0x174>)
 80010b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010b2:	4a52      	ldr	r2, [pc, #328]	@ (80011fc <HAL_SPI_MspInit+0x174>)
 80010b4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80010b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80010ba:	4b50      	ldr	r3, [pc, #320]	@ (80011fc <HAL_SPI_MspInit+0x174>)
 80010bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010be:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80010c2:	623b      	str	r3, [r7, #32]
 80010c4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010c6:	2300      	movs	r3, #0
 80010c8:	61fb      	str	r3, [r7, #28]
 80010ca:	4b4c      	ldr	r3, [pc, #304]	@ (80011fc <HAL_SPI_MspInit+0x174>)
 80010cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ce:	4a4b      	ldr	r2, [pc, #300]	@ (80011fc <HAL_SPI_MspInit+0x174>)
 80010d0:	f043 0301 	orr.w	r3, r3, #1
 80010d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80010d6:	4b49      	ldr	r3, [pc, #292]	@ (80011fc <HAL_SPI_MspInit+0x174>)
 80010d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010da:	f003 0301 	and.w	r3, r3, #1
 80010de:	61fb      	str	r3, [r7, #28]
 80010e0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010e2:	2300      	movs	r3, #0
 80010e4:	61bb      	str	r3, [r7, #24]
 80010e6:	4b45      	ldr	r3, [pc, #276]	@ (80011fc <HAL_SPI_MspInit+0x174>)
 80010e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ea:	4a44      	ldr	r2, [pc, #272]	@ (80011fc <HAL_SPI_MspInit+0x174>)
 80010ec:	f043 0302 	orr.w	r3, r3, #2
 80010f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80010f2:	4b42      	ldr	r3, [pc, #264]	@ (80011fc <HAL_SPI_MspInit+0x174>)
 80010f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010f6:	f003 0302 	and.w	r3, r3, #2
 80010fa:	61bb      	str	r3, [r7, #24]
 80010fc:	69bb      	ldr	r3, [r7, #24]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    PB4     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80010fe:	23a0      	movs	r3, #160	@ 0xa0
 8001100:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001102:	2302      	movs	r3, #2
 8001104:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001106:	2300      	movs	r3, #0
 8001108:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800110a:	2303      	movs	r3, #3
 800110c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800110e:	2305      	movs	r3, #5
 8001110:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001112:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001116:	4619      	mov	r1, r3
 8001118:	4839      	ldr	r0, [pc, #228]	@ (8001200 <HAL_SPI_MspInit+0x178>)
 800111a:	f002 fa35 	bl	8003588 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800111e:	2310      	movs	r3, #16
 8001120:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001122:	2302      	movs	r3, #2
 8001124:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001126:	2300      	movs	r3, #0
 8001128:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800112a:	2303      	movs	r3, #3
 800112c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800112e:	2305      	movs	r3, #5
 8001130:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001132:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001136:	4619      	mov	r1, r3
 8001138:	4832      	ldr	r0, [pc, #200]	@ (8001204 <HAL_SPI_MspInit+0x17c>)
 800113a:	f002 fa25 	bl	8003588 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 800113e:	e057      	b.n	80011f0 <HAL_SPI_MspInit+0x168>
  else if(spiHandle->Instance==SPI3)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4a30      	ldr	r2, [pc, #192]	@ (8001208 <HAL_SPI_MspInit+0x180>)
 8001146:	4293      	cmp	r3, r2
 8001148:	d152      	bne.n	80011f0 <HAL_SPI_MspInit+0x168>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800114a:	2300      	movs	r3, #0
 800114c:	617b      	str	r3, [r7, #20]
 800114e:	4b2b      	ldr	r3, [pc, #172]	@ (80011fc <HAL_SPI_MspInit+0x174>)
 8001150:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001152:	4a2a      	ldr	r2, [pc, #168]	@ (80011fc <HAL_SPI_MspInit+0x174>)
 8001154:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001158:	6413      	str	r3, [r2, #64]	@ 0x40
 800115a:	4b28      	ldr	r3, [pc, #160]	@ (80011fc <HAL_SPI_MspInit+0x174>)
 800115c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800115e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001162:	617b      	str	r3, [r7, #20]
 8001164:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001166:	2300      	movs	r3, #0
 8001168:	613b      	str	r3, [r7, #16]
 800116a:	4b24      	ldr	r3, [pc, #144]	@ (80011fc <HAL_SPI_MspInit+0x174>)
 800116c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800116e:	4a23      	ldr	r2, [pc, #140]	@ (80011fc <HAL_SPI_MspInit+0x174>)
 8001170:	f043 0304 	orr.w	r3, r3, #4
 8001174:	6313      	str	r3, [r2, #48]	@ 0x30
 8001176:	4b21      	ldr	r3, [pc, #132]	@ (80011fc <HAL_SPI_MspInit+0x174>)
 8001178:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800117a:	f003 0304 	and.w	r3, r3, #4
 800117e:	613b      	str	r3, [r7, #16]
 8001180:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001182:	2300      	movs	r3, #0
 8001184:	60fb      	str	r3, [r7, #12]
 8001186:	4b1d      	ldr	r3, [pc, #116]	@ (80011fc <HAL_SPI_MspInit+0x174>)
 8001188:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800118a:	4a1c      	ldr	r2, [pc, #112]	@ (80011fc <HAL_SPI_MspInit+0x174>)
 800118c:	f043 0302 	orr.w	r3, r3, #2
 8001190:	6313      	str	r3, [r2, #48]	@ 0x30
 8001192:	4b1a      	ldr	r3, [pc, #104]	@ (80011fc <HAL_SPI_MspInit+0x174>)
 8001194:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001196:	f003 0302 	and.w	r3, r3, #2
 800119a:	60fb      	str	r3, [r7, #12]
 800119c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800119e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80011a2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011a4:	2302      	movs	r3, #2
 80011a6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a8:	2300      	movs	r3, #0
 80011aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011ac:	2303      	movs	r3, #3
 80011ae:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80011b0:	2306      	movs	r3, #6
 80011b2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011b4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011b8:	4619      	mov	r1, r3
 80011ba:	4814      	ldr	r0, [pc, #80]	@ (800120c <HAL_SPI_MspInit+0x184>)
 80011bc:	f002 f9e4 	bl	8003588 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80011c0:	2320      	movs	r3, #32
 80011c2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011c4:	2302      	movs	r3, #2
 80011c6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c8:	2300      	movs	r3, #0
 80011ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011cc:	2303      	movs	r3, #3
 80011ce:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80011d0:	2306      	movs	r3, #6
 80011d2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011d4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011d8:	4619      	mov	r1, r3
 80011da:	480a      	ldr	r0, [pc, #40]	@ (8001204 <HAL_SPI_MspInit+0x17c>)
 80011dc:	f002 f9d4 	bl	8003588 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI3_IRQn, 5, 0);
 80011e0:	2200      	movs	r2, #0
 80011e2:	2105      	movs	r1, #5
 80011e4:	2033      	movs	r0, #51	@ 0x33
 80011e6:	f001 fe29 	bl	8002e3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 80011ea:	2033      	movs	r0, #51	@ 0x33
 80011ec:	f001 fe42 	bl	8002e74 <HAL_NVIC_EnableIRQ>
}
 80011f0:	bf00      	nop
 80011f2:	3738      	adds	r7, #56	@ 0x38
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	40013000 	.word	0x40013000
 80011fc:	40023800 	.word	0x40023800
 8001200:	40020000 	.word	0x40020000
 8001204:	40020400 	.word	0x40020400
 8001208:	40003c00 	.word	0x40003c00
 800120c:	40020800 	.word	0x40020800

08001210 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001216:	2300      	movs	r3, #0
 8001218:	607b      	str	r3, [r7, #4]
 800121a:	4b12      	ldr	r3, [pc, #72]	@ (8001264 <HAL_MspInit+0x54>)
 800121c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800121e:	4a11      	ldr	r2, [pc, #68]	@ (8001264 <HAL_MspInit+0x54>)
 8001220:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001224:	6453      	str	r3, [r2, #68]	@ 0x44
 8001226:	4b0f      	ldr	r3, [pc, #60]	@ (8001264 <HAL_MspInit+0x54>)
 8001228:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800122a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800122e:	607b      	str	r3, [r7, #4]
 8001230:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001232:	2300      	movs	r3, #0
 8001234:	603b      	str	r3, [r7, #0]
 8001236:	4b0b      	ldr	r3, [pc, #44]	@ (8001264 <HAL_MspInit+0x54>)
 8001238:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800123a:	4a0a      	ldr	r2, [pc, #40]	@ (8001264 <HAL_MspInit+0x54>)
 800123c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001240:	6413      	str	r3, [r2, #64]	@ 0x40
 8001242:	4b08      	ldr	r3, [pc, #32]	@ (8001264 <HAL_MspInit+0x54>)
 8001244:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001246:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800124a:	603b      	str	r3, [r7, #0]
 800124c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800124e:	2200      	movs	r2, #0
 8001250:	210f      	movs	r1, #15
 8001252:	f06f 0001 	mvn.w	r0, #1
 8001256:	f001 fdf1 	bl	8002e3c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800125a:	bf00      	nop
 800125c:	3708      	adds	r7, #8
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	40023800 	.word	0x40023800

08001268 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b08e      	sub	sp, #56	@ 0x38
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001270:	2300      	movs	r3, #0
 8001272:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001274:	2300      	movs	r3, #0
 8001276:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001278:	2300      	movs	r3, #0
 800127a:	60fb      	str	r3, [r7, #12]
 800127c:	4b33      	ldr	r3, [pc, #204]	@ (800134c <HAL_InitTick+0xe4>)
 800127e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001280:	4a32      	ldr	r2, [pc, #200]	@ (800134c <HAL_InitTick+0xe4>)
 8001282:	f043 0310 	orr.w	r3, r3, #16
 8001286:	6413      	str	r3, [r2, #64]	@ 0x40
 8001288:	4b30      	ldr	r3, [pc, #192]	@ (800134c <HAL_InitTick+0xe4>)
 800128a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800128c:	f003 0310 	and.w	r3, r3, #16
 8001290:	60fb      	str	r3, [r7, #12]
 8001292:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001294:	f107 0210 	add.w	r2, r7, #16
 8001298:	f107 0314 	add.w	r3, r7, #20
 800129c:	4611      	mov	r1, r2
 800129e:	4618      	mov	r0, r3
 80012a0:	f004 fb54 	bl	800594c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80012a4:	6a3b      	ldr	r3, [r7, #32]
 80012a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80012a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d103      	bne.n	80012b6 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80012ae:	f004 fb25 	bl	80058fc <HAL_RCC_GetPCLK1Freq>
 80012b2:	6378      	str	r0, [r7, #52]	@ 0x34
 80012b4:	e004      	b.n	80012c0 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80012b6:	f004 fb21 	bl	80058fc <HAL_RCC_GetPCLK1Freq>
 80012ba:	4603      	mov	r3, r0
 80012bc:	005b      	lsls	r3, r3, #1
 80012be:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80012c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80012c2:	4a23      	ldr	r2, [pc, #140]	@ (8001350 <HAL_InitTick+0xe8>)
 80012c4:	fba2 2303 	umull	r2, r3, r2, r3
 80012c8:	0c9b      	lsrs	r3, r3, #18
 80012ca:	3b01      	subs	r3, #1
 80012cc:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80012ce:	4b21      	ldr	r3, [pc, #132]	@ (8001354 <HAL_InitTick+0xec>)
 80012d0:	4a21      	ldr	r2, [pc, #132]	@ (8001358 <HAL_InitTick+0xf0>)
 80012d2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80012d4:	4b1f      	ldr	r3, [pc, #124]	@ (8001354 <HAL_InitTick+0xec>)
 80012d6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80012da:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80012dc:	4a1d      	ldr	r2, [pc, #116]	@ (8001354 <HAL_InitTick+0xec>)
 80012de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80012e0:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80012e2:	4b1c      	ldr	r3, [pc, #112]	@ (8001354 <HAL_InitTick+0xec>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012e8:	4b1a      	ldr	r3, [pc, #104]	@ (8001354 <HAL_InitTick+0xec>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012ee:	4b19      	ldr	r3, [pc, #100]	@ (8001354 <HAL_InitTick+0xec>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80012f4:	4817      	ldr	r0, [pc, #92]	@ (8001354 <HAL_InitTick+0xec>)
 80012f6:	f004 fcf7 	bl	8005ce8 <HAL_TIM_Base_Init>
 80012fa:	4603      	mov	r3, r0
 80012fc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001300:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001304:	2b00      	cmp	r3, #0
 8001306:	d11b      	bne.n	8001340 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001308:	4812      	ldr	r0, [pc, #72]	@ (8001354 <HAL_InitTick+0xec>)
 800130a:	f004 fd3d 	bl	8005d88 <HAL_TIM_Base_Start_IT>
 800130e:	4603      	mov	r3, r0
 8001310:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001314:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001318:	2b00      	cmp	r3, #0
 800131a:	d111      	bne.n	8001340 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800131c:	2036      	movs	r0, #54	@ 0x36
 800131e:	f001 fda9 	bl	8002e74 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	2b0f      	cmp	r3, #15
 8001326:	d808      	bhi.n	800133a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001328:	2200      	movs	r2, #0
 800132a:	6879      	ldr	r1, [r7, #4]
 800132c:	2036      	movs	r0, #54	@ 0x36
 800132e:	f001 fd85 	bl	8002e3c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001332:	4a0a      	ldr	r2, [pc, #40]	@ (800135c <HAL_InitTick+0xf4>)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6013      	str	r3, [r2, #0]
 8001338:	e002      	b.n	8001340 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800133a:	2301      	movs	r3, #1
 800133c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001340:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001344:	4618      	mov	r0, r3
 8001346:	3738      	adds	r7, #56	@ 0x38
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}
 800134c:	40023800 	.word	0x40023800
 8001350:	431bde83 	.word	0x431bde83
 8001354:	200003c8 	.word	0x200003c8
 8001358:	40001000 	.word	0x40001000
 800135c:	20000004 	.word	0x20000004

08001360 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001364:	bf00      	nop
 8001366:	e7fd      	b.n	8001364 <NMI_Handler+0x4>

08001368 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800136c:	bf00      	nop
 800136e:	e7fd      	b.n	800136c <HardFault_Handler+0x4>

08001370 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001374:	bf00      	nop
 8001376:	e7fd      	b.n	8001374 <MemManage_Handler+0x4>

08001378 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800137c:	bf00      	nop
 800137e:	e7fd      	b.n	800137c <BusFault_Handler+0x4>

08001380 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001384:	bf00      	nop
 8001386:	e7fd      	b.n	8001384 <UsageFault_Handler+0x4>

08001388 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800138c:	bf00      	nop
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr
	...

08001398 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 800139c:	4802      	ldr	r0, [pc, #8]	@ (80013a8 <DMA1_Stream0_IRQHandler+0x10>)
 800139e:	f001 feb7 	bl	8003110 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80013a2:	bf00      	nop
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	200007a0 	.word	0x200007a0

080013ac <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 80013b0:	4802      	ldr	r0, [pc, #8]	@ (80013bc <DMA1_Stream2_IRQHandler+0x10>)
 80013b2:	f001 fead 	bl	8003110 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80013b6:	bf00      	nop
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	200006e0 	.word	0x200006e0

080013c0 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 80013c4:	4802      	ldr	r0, [pc, #8]	@ (80013d0 <DMA1_Stream4_IRQHandler+0x10>)
 80013c6:	f001 fea3 	bl	8003110 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80013ca:	bf00      	nop
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	20000740 	.word	0x20000740

080013d4 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80013d8:	4802      	ldr	r0, [pc, #8]	@ (80013e4 <ADC_IRQHandler+0x10>)
 80013da:	f000 fdec 	bl	8001fb6 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80013de:	bf00      	nop
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	2000011c 	.word	0x2000011c

080013e8 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80013ec:	4802      	ldr	r0, [pc, #8]	@ (80013f8 <CAN1_TX_IRQHandler+0x10>)
 80013ee:	f001 fa34 	bl	800285a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 80013f2:	bf00      	nop
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	200001c4 	.word	0x200001c4

080013fc <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001400:	4802      	ldr	r0, [pc, #8]	@ (800140c <CAN1_RX0_IRQHandler+0x10>)
 8001402:	f001 fa2a 	bl	800285a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001406:	bf00      	nop
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	200001c4 	.word	0x200001c4

08001410 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001414:	4802      	ldr	r0, [pc, #8]	@ (8001420 <CAN1_RX1_IRQHandler+0x10>)
 8001416:	f001 fa20 	bl	800285a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 800141a:	bf00      	nop
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	200001c4 	.word	0x200001c4

08001424 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN1 SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001428:	4802      	ldr	r0, [pc, #8]	@ (8001434 <CAN1_SCE_IRQHandler+0x10>)
 800142a:	f001 fa16 	bl	800285a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 800142e:	bf00      	nop
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	200001c4 	.word	0x200001c4

08001438 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 800143c:	4802      	ldr	r0, [pc, #8]	@ (8001448 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800143e:	f004 fdb9 	bl	8005fb4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001442:	bf00      	nop
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	200004e8 	.word	0x200004e8

0800144c <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8001450:	4802      	ldr	r0, [pc, #8]	@ (800145c <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8001452:	f004 fdaf 	bl	8005fb4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8001456:	bf00      	nop
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	20000530 	.word	0x20000530

08001460 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001464:	4802      	ldr	r0, [pc, #8]	@ (8001470 <TIM2_IRQHandler+0x10>)
 8001466:	f004 fda5 	bl	8005fb4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800146a:	bf00      	nop
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	20000410 	.word	0x20000410

08001474 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001478:	4802      	ldr	r0, [pc, #8]	@ (8001484 <TIM3_IRQHandler+0x10>)
 800147a:	f004 fd9b 	bl	8005fb4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800147e:	bf00      	nop
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	20000458 	.word	0x20000458

08001488 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 800148c:	4802      	ldr	r0, [pc, #8]	@ (8001498 <TIM8_UP_TIM13_IRQHandler+0x10>)
 800148e:	f004 fd91 	bl	8005fb4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8001492:	bf00      	nop
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	20000578 	.word	0x20000578

0800149c <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 80014a0:	4802      	ldr	r0, [pc, #8]	@ (80014ac <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 80014a2:	f004 fd87 	bl	8005fb4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 80014a6:	bf00      	nop
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	200005c0 	.word	0x200005c0

080014b0 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_tx);
 80014b4:	4802      	ldr	r0, [pc, #8]	@ (80014c0 <DMA1_Stream7_IRQHandler+0x10>)
 80014b6:	f001 fe2b 	bl	8003110 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 80014ba:	bf00      	nop
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	20000800 	.word	0x20000800

080014c4 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 80014c8:	4802      	ldr	r0, [pc, #8]	@ (80014d4 <SPI3_IRQHandler+0x10>)
 80014ca:	f004 fafb 	bl	8005ac4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 80014ce:	bf00      	nop
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	20000370 	.word	0x20000370

080014d8 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80014dc:	4802      	ldr	r0, [pc, #8]	@ (80014e8 <UART4_IRQHandler+0x10>)
 80014de:	f005 f80d 	bl	80064fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80014e2:	bf00      	nop
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	20000608 	.word	0x20000608

080014ec <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 80014f0:	4802      	ldr	r0, [pc, #8]	@ (80014fc <UART5_IRQHandler+0x10>)
 80014f2:	f005 f803 	bl	80064fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 80014f6:	bf00      	nop
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	20000650 	.word	0x20000650

08001500 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001504:	4802      	ldr	r0, [pc, #8]	@ (8001510 <TIM6_DAC_IRQHandler+0x10>)
 8001506:	f004 fd55 	bl	8005fb4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800150a:	bf00      	nop
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	200003c8 	.word	0x200003c8

08001514 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001518:	4802      	ldr	r0, [pc, #8]	@ (8001524 <TIM7_IRQHandler+0x10>)
 800151a:	f004 fd4b 	bl	8005fb4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800151e:	bf00      	nop
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	200004a0 	.word	0x200004a0

08001528 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800152c:	4802      	ldr	r0, [pc, #8]	@ (8001538 <DMA2_Stream0_IRQHandler+0x10>)
 800152e:	f001 fdef 	bl	8003110 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001532:	bf00      	nop
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	20000164 	.word	0x20000164

0800153c <CAN2_TX_IRQHandler>:

/**
  * @brief This function handles CAN2 TX interrupts.
  */
void CAN2_TX_IRQHandler(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_TX_IRQn 0 */

  /* USER CODE END CAN2_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8001540:	4802      	ldr	r0, [pc, #8]	@ (800154c <CAN2_TX_IRQHandler+0x10>)
 8001542:	f001 f98a 	bl	800285a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_TX_IRQn 1 */

  /* USER CODE END CAN2_TX_IRQn 1 */
}
 8001546:	bf00      	nop
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	200001ec 	.word	0x200001ec

08001550 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8001554:	4802      	ldr	r0, [pc, #8]	@ (8001560 <CAN2_RX0_IRQHandler+0x10>)
 8001556:	f001 f980 	bl	800285a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 800155a:	bf00      	nop
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	200001ec 	.word	0x200001ec

08001564 <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8001568:	4802      	ldr	r0, [pc, #8]	@ (8001574 <CAN2_RX1_IRQHandler+0x10>)
 800156a:	f001 f976 	bl	800285a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 800156e:	bf00      	nop
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	200001ec 	.word	0x200001ec

08001578 <CAN2_SCE_IRQHandler>:

/**
  * @brief This function handles CAN2 SCE interrupt.
  */
void CAN2_SCE_IRQHandler(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_SCE_IRQn 0 */

  /* USER CODE END CAN2_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 800157c:	4802      	ldr	r0, [pc, #8]	@ (8001588 <CAN2_SCE_IRQHandler+0x10>)
 800157e:	f001 f96c 	bl	800285a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_SCE_IRQn 1 */

  /* USER CODE END CAN2_SCE_IRQn 1 */
}
 8001582:	bf00      	nop
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	200001ec 	.word	0x200001ec

0800158c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001590:	4802      	ldr	r0, [pc, #8]	@ (800159c <OTG_FS_IRQHandler+0x10>)
 8001592:	f002 fc37 	bl	8003e04 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001596:	bf00      	nop
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	20012a94 	.word	0x20012a94

080015a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015a4:	4b06      	ldr	r3, [pc, #24]	@ (80015c0 <SystemInit+0x20>)
 80015a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80015aa:	4a05      	ldr	r2, [pc, #20]	@ (80015c0 <SystemInit+0x20>)
 80015ac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80015b0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015b4:	bf00      	nop
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr
 80015be:	bf00      	nop
 80015c0:	e000ed00 	.word	0xe000ed00

080015c4 <MX_TIM2_Init>:
TIM_HandleTypeDef htim13;
TIM_HandleTypeDef htim14;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b08c      	sub	sp, #48	@ 0x30
 80015c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80015ca:	f107 030c 	add.w	r3, r7, #12
 80015ce:	2224      	movs	r2, #36	@ 0x24
 80015d0:	2100      	movs	r1, #0
 80015d2:	4618      	mov	r0, r3
 80015d4:	f00c fbd4 	bl	800dd80 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015d8:	1d3b      	adds	r3, r7, #4
 80015da:	2200      	movs	r2, #0
 80015dc:	601a      	str	r2, [r3, #0]
 80015de:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80015e0:	4b21      	ldr	r3, [pc, #132]	@ (8001668 <MX_TIM2_Init+0xa4>)
 80015e2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80015e6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80015e8:	4b1f      	ldr	r3, [pc, #124]	@ (8001668 <MX_TIM2_Init+0xa4>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015ee:	4b1e      	ldr	r3, [pc, #120]	@ (8001668 <MX_TIM2_Init+0xa4>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80015f4:	4b1c      	ldr	r3, [pc, #112]	@ (8001668 <MX_TIM2_Init+0xa4>)
 80015f6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80015fa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015fc:	4b1a      	ldr	r3, [pc, #104]	@ (8001668 <MX_TIM2_Init+0xa4>)
 80015fe:	2200      	movs	r2, #0
 8001600:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001602:	4b19      	ldr	r3, [pc, #100]	@ (8001668 <MX_TIM2_Init+0xa4>)
 8001604:	2200      	movs	r2, #0
 8001606:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001608:	2303      	movs	r3, #3
 800160a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800160c:	2300      	movs	r3, #0
 800160e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001610:	2301      	movs	r3, #1
 8001612:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001614:	2300      	movs	r3, #0
 8001616:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 4;
 8001618:	2304      	movs	r3, #4
 800161a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800161c:	2300      	movs	r3, #0
 800161e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001620:	2301      	movs	r3, #1
 8001622:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001624:	2300      	movs	r3, #0
 8001626:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 4;
 8001628:	2304      	movs	r3, #4
 800162a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800162c:	f107 030c 	add.w	r3, r7, #12
 8001630:	4619      	mov	r1, r3
 8001632:	480d      	ldr	r0, [pc, #52]	@ (8001668 <MX_TIM2_Init+0xa4>)
 8001634:	f004 fc18 	bl	8005e68 <HAL_TIM_Encoder_Init>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d001      	beq.n	8001642 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800163e:	f7ff fcb1 	bl	8000fa4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001642:	2300      	movs	r3, #0
 8001644:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001646:	2300      	movs	r3, #0
 8001648:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800164a:	1d3b      	adds	r3, r7, #4
 800164c:	4619      	mov	r1, r3
 800164e:	4806      	ldr	r0, [pc, #24]	@ (8001668 <MX_TIM2_Init+0xa4>)
 8001650:	f004 fe74 	bl	800633c <HAL_TIMEx_MasterConfigSynchronization>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d001      	beq.n	800165e <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800165a:	f7ff fca3 	bl	8000fa4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800165e:	bf00      	nop
 8001660:	3730      	adds	r7, #48	@ 0x30
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	20000410 	.word	0x20000410

0800166c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b08c      	sub	sp, #48	@ 0x30
 8001670:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001672:	f107 030c 	add.w	r3, r7, #12
 8001676:	2224      	movs	r2, #36	@ 0x24
 8001678:	2100      	movs	r1, #0
 800167a:	4618      	mov	r0, r3
 800167c:	f00c fb80 	bl	800dd80 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001680:	1d3b      	adds	r3, r7, #4
 8001682:	2200      	movs	r2, #0
 8001684:	601a      	str	r2, [r3, #0]
 8001686:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001688:	4b20      	ldr	r3, [pc, #128]	@ (800170c <MX_TIM3_Init+0xa0>)
 800168a:	4a21      	ldr	r2, [pc, #132]	@ (8001710 <MX_TIM3_Init+0xa4>)
 800168c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800168e:	4b1f      	ldr	r3, [pc, #124]	@ (800170c <MX_TIM3_Init+0xa0>)
 8001690:	2200      	movs	r2, #0
 8001692:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001694:	4b1d      	ldr	r3, [pc, #116]	@ (800170c <MX_TIM3_Init+0xa0>)
 8001696:	2200      	movs	r2, #0
 8001698:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800169a:	4b1c      	ldr	r3, [pc, #112]	@ (800170c <MX_TIM3_Init+0xa0>)
 800169c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80016a0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016a2:	4b1a      	ldr	r3, [pc, #104]	@ (800170c <MX_TIM3_Init+0xa0>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016a8:	4b18      	ldr	r3, [pc, #96]	@ (800170c <MX_TIM3_Init+0xa0>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80016ae:	2303      	movs	r3, #3
 80016b0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80016b2:	2300      	movs	r3, #0
 80016b4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80016b6:	2301      	movs	r3, #1
 80016b8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80016ba:	2300      	movs	r3, #0
 80016bc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 4;
 80016be:	2304      	movs	r3, #4
 80016c0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80016c2:	2300      	movs	r3, #0
 80016c4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80016c6:	2301      	movs	r3, #1
 80016c8:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80016ca:	2300      	movs	r3, #0
 80016cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 4;
 80016ce:	2304      	movs	r3, #4
 80016d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80016d2:	f107 030c 	add.w	r3, r7, #12
 80016d6:	4619      	mov	r1, r3
 80016d8:	480c      	ldr	r0, [pc, #48]	@ (800170c <MX_TIM3_Init+0xa0>)
 80016da:	f004 fbc5 	bl	8005e68 <HAL_TIM_Encoder_Init>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d001      	beq.n	80016e8 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80016e4:	f7ff fc5e 	bl	8000fa4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016e8:	2300      	movs	r3, #0
 80016ea:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016ec:	2300      	movs	r3, #0
 80016ee:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80016f0:	1d3b      	adds	r3, r7, #4
 80016f2:	4619      	mov	r1, r3
 80016f4:	4805      	ldr	r0, [pc, #20]	@ (800170c <MX_TIM3_Init+0xa0>)
 80016f6:	f004 fe21 	bl	800633c <HAL_TIMEx_MasterConfigSynchronization>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d001      	beq.n	8001704 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001700:	f7ff fc50 	bl	8000fa4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001704:	bf00      	nop
 8001706:	3730      	adds	r7, #48	@ 0x30
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}
 800170c:	20000458 	.word	0x20000458
 8001710:	40000400 	.word	0x40000400

08001714 <HAL_TIM_Encoder_MspInit>:
  /* USER CODE END TIM14_Init 2 */

}

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b08c      	sub	sp, #48	@ 0x30
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800171c:	f107 031c 	add.w	r3, r7, #28
 8001720:	2200      	movs	r2, #0
 8001722:	601a      	str	r2, [r3, #0]
 8001724:	605a      	str	r2, [r3, #4]
 8001726:	609a      	str	r2, [r3, #8]
 8001728:	60da      	str	r2, [r3, #12]
 800172a:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001734:	d153      	bne.n	80017de <HAL_TIM_Encoder_MspInit+0xca>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001736:	2300      	movs	r3, #0
 8001738:	61bb      	str	r3, [r7, #24]
 800173a:	4b47      	ldr	r3, [pc, #284]	@ (8001858 <HAL_TIM_Encoder_MspInit+0x144>)
 800173c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800173e:	4a46      	ldr	r2, [pc, #280]	@ (8001858 <HAL_TIM_Encoder_MspInit+0x144>)
 8001740:	f043 0301 	orr.w	r3, r3, #1
 8001744:	6413      	str	r3, [r2, #64]	@ 0x40
 8001746:	4b44      	ldr	r3, [pc, #272]	@ (8001858 <HAL_TIM_Encoder_MspInit+0x144>)
 8001748:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800174a:	f003 0301 	and.w	r3, r3, #1
 800174e:	61bb      	str	r3, [r7, #24]
 8001750:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001752:	2300      	movs	r3, #0
 8001754:	617b      	str	r3, [r7, #20]
 8001756:	4b40      	ldr	r3, [pc, #256]	@ (8001858 <HAL_TIM_Encoder_MspInit+0x144>)
 8001758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800175a:	4a3f      	ldr	r2, [pc, #252]	@ (8001858 <HAL_TIM_Encoder_MspInit+0x144>)
 800175c:	f043 0301 	orr.w	r3, r3, #1
 8001760:	6313      	str	r3, [r2, #48]	@ 0x30
 8001762:	4b3d      	ldr	r3, [pc, #244]	@ (8001858 <HAL_TIM_Encoder_MspInit+0x144>)
 8001764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001766:	f003 0301 	and.w	r3, r3, #1
 800176a:	617b      	str	r3, [r7, #20]
 800176c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800176e:	2300      	movs	r3, #0
 8001770:	613b      	str	r3, [r7, #16]
 8001772:	4b39      	ldr	r3, [pc, #228]	@ (8001858 <HAL_TIM_Encoder_MspInit+0x144>)
 8001774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001776:	4a38      	ldr	r2, [pc, #224]	@ (8001858 <HAL_TIM_Encoder_MspInit+0x144>)
 8001778:	f043 0302 	orr.w	r3, r3, #2
 800177c:	6313      	str	r3, [r2, #48]	@ 0x30
 800177e:	4b36      	ldr	r3, [pc, #216]	@ (8001858 <HAL_TIM_Encoder_MspInit+0x144>)
 8001780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001782:	f003 0302 	and.w	r3, r3, #2
 8001786:	613b      	str	r3, [r7, #16]
 8001788:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800178a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800178e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001790:	2302      	movs	r3, #2
 8001792:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001794:	2300      	movs	r3, #0
 8001796:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001798:	2300      	movs	r3, #0
 800179a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800179c:	2301      	movs	r3, #1
 800179e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017a0:	f107 031c 	add.w	r3, r7, #28
 80017a4:	4619      	mov	r1, r3
 80017a6:	482d      	ldr	r0, [pc, #180]	@ (800185c <HAL_TIM_Encoder_MspInit+0x148>)
 80017a8:	f001 feee 	bl	8003588 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80017ac:	2308      	movs	r3, #8
 80017ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b0:	2302      	movs	r3, #2
 80017b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b4:	2300      	movs	r3, #0
 80017b6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017b8:	2300      	movs	r3, #0
 80017ba:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80017bc:	2301      	movs	r3, #1
 80017be:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017c0:	f107 031c 	add.w	r3, r7, #28
 80017c4:	4619      	mov	r1, r3
 80017c6:	4826      	ldr	r0, [pc, #152]	@ (8001860 <HAL_TIM_Encoder_MspInit+0x14c>)
 80017c8:	f001 fede 	bl	8003588 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80017cc:	2200      	movs	r2, #0
 80017ce:	2105      	movs	r1, #5
 80017d0:	201c      	movs	r0, #28
 80017d2:	f001 fb33 	bl	8002e3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80017d6:	201c      	movs	r0, #28
 80017d8:	f001 fb4c 	bl	8002e74 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80017dc:	e038      	b.n	8001850 <HAL_TIM_Encoder_MspInit+0x13c>
  else if(tim_encoderHandle->Instance==TIM3)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4a20      	ldr	r2, [pc, #128]	@ (8001864 <HAL_TIM_Encoder_MspInit+0x150>)
 80017e4:	4293      	cmp	r3, r2
 80017e6:	d133      	bne.n	8001850 <HAL_TIM_Encoder_MspInit+0x13c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80017e8:	2300      	movs	r3, #0
 80017ea:	60fb      	str	r3, [r7, #12]
 80017ec:	4b1a      	ldr	r3, [pc, #104]	@ (8001858 <HAL_TIM_Encoder_MspInit+0x144>)
 80017ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017f0:	4a19      	ldr	r2, [pc, #100]	@ (8001858 <HAL_TIM_Encoder_MspInit+0x144>)
 80017f2:	f043 0302 	orr.w	r3, r3, #2
 80017f6:	6413      	str	r3, [r2, #64]	@ 0x40
 80017f8:	4b17      	ldr	r3, [pc, #92]	@ (8001858 <HAL_TIM_Encoder_MspInit+0x144>)
 80017fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017fc:	f003 0302 	and.w	r3, r3, #2
 8001800:	60fb      	str	r3, [r7, #12]
 8001802:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001804:	2300      	movs	r3, #0
 8001806:	60bb      	str	r3, [r7, #8]
 8001808:	4b13      	ldr	r3, [pc, #76]	@ (8001858 <HAL_TIM_Encoder_MspInit+0x144>)
 800180a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800180c:	4a12      	ldr	r2, [pc, #72]	@ (8001858 <HAL_TIM_Encoder_MspInit+0x144>)
 800180e:	f043 0304 	orr.w	r3, r3, #4
 8001812:	6313      	str	r3, [r2, #48]	@ 0x30
 8001814:	4b10      	ldr	r3, [pc, #64]	@ (8001858 <HAL_TIM_Encoder_MspInit+0x144>)
 8001816:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001818:	f003 0304 	and.w	r3, r3, #4
 800181c:	60bb      	str	r3, [r7, #8]
 800181e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001820:	23c0      	movs	r3, #192	@ 0xc0
 8001822:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001824:	2302      	movs	r3, #2
 8001826:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001828:	2300      	movs	r3, #0
 800182a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800182c:	2300      	movs	r3, #0
 800182e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001830:	2302      	movs	r3, #2
 8001832:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001834:	f107 031c 	add.w	r3, r7, #28
 8001838:	4619      	mov	r1, r3
 800183a:	480b      	ldr	r0, [pc, #44]	@ (8001868 <HAL_TIM_Encoder_MspInit+0x154>)
 800183c:	f001 fea4 	bl	8003588 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8001840:	2200      	movs	r2, #0
 8001842:	2105      	movs	r1, #5
 8001844:	201d      	movs	r0, #29
 8001846:	f001 faf9 	bl	8002e3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800184a:	201d      	movs	r0, #29
 800184c:	f001 fb12 	bl	8002e74 <HAL_NVIC_EnableIRQ>
}
 8001850:	bf00      	nop
 8001852:	3730      	adds	r7, #48	@ 0x30
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}
 8001858:	40023800 	.word	0x40023800
 800185c:	40020000 	.word	0x40020000
 8001860:	40020400 	.word	0x40020400
 8001864:	40000400 	.word	0x40000400
 8001868:	40020800 	.word	0x40020800

0800186c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b088      	sub	sp, #32
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM7)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a46      	ldr	r2, [pc, #280]	@ (8001994 <HAL_TIM_Base_MspInit+0x128>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d116      	bne.n	80018ac <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 800187e:	2300      	movs	r3, #0
 8001880:	61fb      	str	r3, [r7, #28]
 8001882:	4b45      	ldr	r3, [pc, #276]	@ (8001998 <HAL_TIM_Base_MspInit+0x12c>)
 8001884:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001886:	4a44      	ldr	r2, [pc, #272]	@ (8001998 <HAL_TIM_Base_MspInit+0x12c>)
 8001888:	f043 0320 	orr.w	r3, r3, #32
 800188c:	6413      	str	r3, [r2, #64]	@ 0x40
 800188e:	4b42      	ldr	r3, [pc, #264]	@ (8001998 <HAL_TIM_Base_MspInit+0x12c>)
 8001890:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001892:	f003 0320 	and.w	r3, r3, #32
 8001896:	61fb      	str	r3, [r7, #28]
 8001898:	69fb      	ldr	r3, [r7, #28]

    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 800189a:	2200      	movs	r2, #0
 800189c:	2105      	movs	r1, #5
 800189e:	2037      	movs	r0, #55	@ 0x37
 80018a0:	f001 facc 	bl	8002e3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80018a4:	2037      	movs	r0, #55	@ 0x37
 80018a6:	f001 fae5 	bl	8002e74 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
}
 80018aa:	e06e      	b.n	800198a <HAL_TIM_Base_MspInit+0x11e>
  else if(tim_baseHandle->Instance==TIM10)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a3a      	ldr	r2, [pc, #232]	@ (800199c <HAL_TIM_Base_MspInit+0x130>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d116      	bne.n	80018e4 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80018b6:	2300      	movs	r3, #0
 80018b8:	61bb      	str	r3, [r7, #24]
 80018ba:	4b37      	ldr	r3, [pc, #220]	@ (8001998 <HAL_TIM_Base_MspInit+0x12c>)
 80018bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018be:	4a36      	ldr	r2, [pc, #216]	@ (8001998 <HAL_TIM_Base_MspInit+0x12c>)
 80018c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80018c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80018c6:	4b34      	ldr	r3, [pc, #208]	@ (8001998 <HAL_TIM_Base_MspInit+0x12c>)
 80018c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018ce:	61bb      	str	r3, [r7, #24]
 80018d0:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 80018d2:	2200      	movs	r2, #0
 80018d4:	2105      	movs	r1, #5
 80018d6:	2019      	movs	r0, #25
 80018d8:	f001 fab0 	bl	8002e3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80018dc:	2019      	movs	r0, #25
 80018de:	f001 fac9 	bl	8002e74 <HAL_NVIC_EnableIRQ>
}
 80018e2:	e052      	b.n	800198a <HAL_TIM_Base_MspInit+0x11e>
  else if(tim_baseHandle->Instance==TIM11)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a2d      	ldr	r2, [pc, #180]	@ (80019a0 <HAL_TIM_Base_MspInit+0x134>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d116      	bne.n	800191c <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80018ee:	2300      	movs	r3, #0
 80018f0:	617b      	str	r3, [r7, #20]
 80018f2:	4b29      	ldr	r3, [pc, #164]	@ (8001998 <HAL_TIM_Base_MspInit+0x12c>)
 80018f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018f6:	4a28      	ldr	r2, [pc, #160]	@ (8001998 <HAL_TIM_Base_MspInit+0x12c>)
 80018f8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80018fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80018fe:	4b26      	ldr	r3, [pc, #152]	@ (8001998 <HAL_TIM_Base_MspInit+0x12c>)
 8001900:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001902:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001906:	617b      	str	r3, [r7, #20]
 8001908:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 5, 0);
 800190a:	2200      	movs	r2, #0
 800190c:	2105      	movs	r1, #5
 800190e:	201a      	movs	r0, #26
 8001910:	f001 fa94 	bl	8002e3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001914:	201a      	movs	r0, #26
 8001916:	f001 faad 	bl	8002e74 <HAL_NVIC_EnableIRQ>
}
 800191a:	e036      	b.n	800198a <HAL_TIM_Base_MspInit+0x11e>
  else if(tim_baseHandle->Instance==TIM13)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a20      	ldr	r2, [pc, #128]	@ (80019a4 <HAL_TIM_Base_MspInit+0x138>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d116      	bne.n	8001954 <HAL_TIM_Base_MspInit+0xe8>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8001926:	2300      	movs	r3, #0
 8001928:	613b      	str	r3, [r7, #16]
 800192a:	4b1b      	ldr	r3, [pc, #108]	@ (8001998 <HAL_TIM_Base_MspInit+0x12c>)
 800192c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800192e:	4a1a      	ldr	r2, [pc, #104]	@ (8001998 <HAL_TIM_Base_MspInit+0x12c>)
 8001930:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001934:	6413      	str	r3, [r2, #64]	@ 0x40
 8001936:	4b18      	ldr	r3, [pc, #96]	@ (8001998 <HAL_TIM_Base_MspInit+0x12c>)
 8001938:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800193a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800193e:	613b      	str	r3, [r7, #16]
 8001940:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 5, 0);
 8001942:	2200      	movs	r2, #0
 8001944:	2105      	movs	r1, #5
 8001946:	202c      	movs	r0, #44	@ 0x2c
 8001948:	f001 fa78 	bl	8002e3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 800194c:	202c      	movs	r0, #44	@ 0x2c
 800194e:	f001 fa91 	bl	8002e74 <HAL_NVIC_EnableIRQ>
}
 8001952:	e01a      	b.n	800198a <HAL_TIM_Base_MspInit+0x11e>
  else if(tim_baseHandle->Instance==TIM14)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a13      	ldr	r2, [pc, #76]	@ (80019a8 <HAL_TIM_Base_MspInit+0x13c>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d115      	bne.n	800198a <HAL_TIM_Base_MspInit+0x11e>
    __HAL_RCC_TIM14_CLK_ENABLE();
 800195e:	2300      	movs	r3, #0
 8001960:	60fb      	str	r3, [r7, #12]
 8001962:	4b0d      	ldr	r3, [pc, #52]	@ (8001998 <HAL_TIM_Base_MspInit+0x12c>)
 8001964:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001966:	4a0c      	ldr	r2, [pc, #48]	@ (8001998 <HAL_TIM_Base_MspInit+0x12c>)
 8001968:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800196c:	6413      	str	r3, [r2, #64]	@ 0x40
 800196e:	4b0a      	ldr	r3, [pc, #40]	@ (8001998 <HAL_TIM_Base_MspInit+0x12c>)
 8001970:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001972:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001976:	60fb      	str	r3, [r7, #12]
 8001978:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 5, 0);
 800197a:	2200      	movs	r2, #0
 800197c:	2105      	movs	r1, #5
 800197e:	202d      	movs	r0, #45	@ 0x2d
 8001980:	f001 fa5c 	bl	8002e3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8001984:	202d      	movs	r0, #45	@ 0x2d
 8001986:	f001 fa75 	bl	8002e74 <HAL_NVIC_EnableIRQ>
}
 800198a:	bf00      	nop
 800198c:	3720      	adds	r7, #32
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	40001400 	.word	0x40001400
 8001998:	40023800 	.word	0x40023800
 800199c:	40014400 	.word	0x40014400
 80019a0:	40014800 	.word	0x40014800
 80019a4:	40001c00 	.word	0x40001c00
 80019a8:	40002000 	.word	0x40002000

080019ac <MX_UART4_Init>:
DMA_HandleTypeDef hdma_uart5_rx;
DMA_HandleTypeDef hdma_uart5_tx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80019b0:	4b11      	ldr	r3, [pc, #68]	@ (80019f8 <MX_UART4_Init+0x4c>)
 80019b2:	4a12      	ldr	r2, [pc, #72]	@ (80019fc <MX_UART4_Init+0x50>)
 80019b4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80019b6:	4b10      	ldr	r3, [pc, #64]	@ (80019f8 <MX_UART4_Init+0x4c>)
 80019b8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80019bc:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80019be:	4b0e      	ldr	r3, [pc, #56]	@ (80019f8 <MX_UART4_Init+0x4c>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80019c4:	4b0c      	ldr	r3, [pc, #48]	@ (80019f8 <MX_UART4_Init+0x4c>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80019ca:	4b0b      	ldr	r3, [pc, #44]	@ (80019f8 <MX_UART4_Init+0x4c>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80019d0:	4b09      	ldr	r3, [pc, #36]	@ (80019f8 <MX_UART4_Init+0x4c>)
 80019d2:	220c      	movs	r2, #12
 80019d4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019d6:	4b08      	ldr	r3, [pc, #32]	@ (80019f8 <MX_UART4_Init+0x4c>)
 80019d8:	2200      	movs	r2, #0
 80019da:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80019dc:	4b06      	ldr	r3, [pc, #24]	@ (80019f8 <MX_UART4_Init+0x4c>)
 80019de:	2200      	movs	r2, #0
 80019e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80019e2:	4805      	ldr	r0, [pc, #20]	@ (80019f8 <MX_UART4_Init+0x4c>)
 80019e4:	f004 fd3a 	bl	800645c <HAL_UART_Init>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d001      	beq.n	80019f2 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 80019ee:	f7ff fad9 	bl	8000fa4 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80019f2:	bf00      	nop
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	20000608 	.word	0x20000608
 80019fc:	40004c00 	.word	0x40004c00

08001a00 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001a04:	4b11      	ldr	r3, [pc, #68]	@ (8001a4c <MX_UART5_Init+0x4c>)
 8001a06:	4a12      	ldr	r2, [pc, #72]	@ (8001a50 <MX_UART5_Init+0x50>)
 8001a08:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8001a0a:	4b10      	ldr	r3, [pc, #64]	@ (8001a4c <MX_UART5_Init+0x4c>)
 8001a0c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001a10:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001a12:	4b0e      	ldr	r3, [pc, #56]	@ (8001a4c <MX_UART5_Init+0x4c>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001a18:	4b0c      	ldr	r3, [pc, #48]	@ (8001a4c <MX_UART5_Init+0x4c>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001a1e:	4b0b      	ldr	r3, [pc, #44]	@ (8001a4c <MX_UART5_Init+0x4c>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001a24:	4b09      	ldr	r3, [pc, #36]	@ (8001a4c <MX_UART5_Init+0x4c>)
 8001a26:	220c      	movs	r2, #12
 8001a28:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a2a:	4b08      	ldr	r3, [pc, #32]	@ (8001a4c <MX_UART5_Init+0x4c>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a30:	4b06      	ldr	r3, [pc, #24]	@ (8001a4c <MX_UART5_Init+0x4c>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001a36:	4805      	ldr	r0, [pc, #20]	@ (8001a4c <MX_UART5_Init+0x4c>)
 8001a38:	f004 fd10 	bl	800645c <HAL_UART_Init>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d001      	beq.n	8001a46 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8001a42:	f7ff faaf 	bl	8000fa4 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001a46:	bf00      	nop
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	20000650 	.word	0x20000650
 8001a50:	40005000 	.word	0x40005000

08001a54 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001a58:	4b11      	ldr	r3, [pc, #68]	@ (8001aa0 <MX_USART1_UART_Init+0x4c>)
 8001a5a:	4a12      	ldr	r2, [pc, #72]	@ (8001aa4 <MX_USART1_UART_Init+0x50>)
 8001a5c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001a5e:	4b10      	ldr	r3, [pc, #64]	@ (8001aa0 <MX_USART1_UART_Init+0x4c>)
 8001a60:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001a64:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a66:	4b0e      	ldr	r3, [pc, #56]	@ (8001aa0 <MX_USART1_UART_Init+0x4c>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001a6c:	4b0c      	ldr	r3, [pc, #48]	@ (8001aa0 <MX_USART1_UART_Init+0x4c>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001a72:	4b0b      	ldr	r3, [pc, #44]	@ (8001aa0 <MX_USART1_UART_Init+0x4c>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001a78:	4b09      	ldr	r3, [pc, #36]	@ (8001aa0 <MX_USART1_UART_Init+0x4c>)
 8001a7a:	220c      	movs	r2, #12
 8001a7c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a7e:	4b08      	ldr	r3, [pc, #32]	@ (8001aa0 <MX_USART1_UART_Init+0x4c>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a84:	4b06      	ldr	r3, [pc, #24]	@ (8001aa0 <MX_USART1_UART_Init+0x4c>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001a8a:	4805      	ldr	r0, [pc, #20]	@ (8001aa0 <MX_USART1_UART_Init+0x4c>)
 8001a8c:	f004 fce6 	bl	800645c <HAL_UART_Init>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d001      	beq.n	8001a9a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001a96:	f7ff fa85 	bl	8000fa4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001a9a:	bf00      	nop
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	20000698 	.word	0x20000698
 8001aa4:	40011000 	.word	0x40011000

08001aa8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b08e      	sub	sp, #56	@ 0x38
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ab0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	601a      	str	r2, [r3, #0]
 8001ab8:	605a      	str	r2, [r3, #4]
 8001aba:	609a      	str	r2, [r3, #8]
 8001abc:	60da      	str	r2, [r3, #12]
 8001abe:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a4a      	ldr	r2, [pc, #296]	@ (8001bf0 <HAL_UART_MspInit+0x148>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	f040 80a0 	bne.w	8001c0c <HAL_UART_MspInit+0x164>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001acc:	2300      	movs	r3, #0
 8001ace:	623b      	str	r3, [r7, #32]
 8001ad0:	4b48      	ldr	r3, [pc, #288]	@ (8001bf4 <HAL_UART_MspInit+0x14c>)
 8001ad2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ad4:	4a47      	ldr	r2, [pc, #284]	@ (8001bf4 <HAL_UART_MspInit+0x14c>)
 8001ad6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001ada:	6413      	str	r3, [r2, #64]	@ 0x40
 8001adc:	4b45      	ldr	r3, [pc, #276]	@ (8001bf4 <HAL_UART_MspInit+0x14c>)
 8001ade:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ae0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001ae4:	623b      	str	r3, [r7, #32]
 8001ae6:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ae8:	2300      	movs	r3, #0
 8001aea:	61fb      	str	r3, [r7, #28]
 8001aec:	4b41      	ldr	r3, [pc, #260]	@ (8001bf4 <HAL_UART_MspInit+0x14c>)
 8001aee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001af0:	4a40      	ldr	r2, [pc, #256]	@ (8001bf4 <HAL_UART_MspInit+0x14c>)
 8001af2:	f043 0301 	orr.w	r3, r3, #1
 8001af6:	6313      	str	r3, [r2, #48]	@ 0x30
 8001af8:	4b3e      	ldr	r3, [pc, #248]	@ (8001bf4 <HAL_UART_MspInit+0x14c>)
 8001afa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001afc:	f003 0301 	and.w	r3, r3, #1
 8001b00:	61fb      	str	r3, [r7, #28]
 8001b02:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001b04:	2303      	movs	r3, #3
 8001b06:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b08:	2302      	movs	r3, #2
 8001b0a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b10:	2303      	movs	r3, #3
 8001b12:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001b14:	2308      	movs	r3, #8
 8001b16:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b18:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	4836      	ldr	r0, [pc, #216]	@ (8001bf8 <HAL_UART_MspInit+0x150>)
 8001b20:	f001 fd32 	bl	8003588 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8001b24:	4b35      	ldr	r3, [pc, #212]	@ (8001bfc <HAL_UART_MspInit+0x154>)
 8001b26:	4a36      	ldr	r2, [pc, #216]	@ (8001c00 <HAL_UART_MspInit+0x158>)
 8001b28:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8001b2a:	4b34      	ldr	r3, [pc, #208]	@ (8001bfc <HAL_UART_MspInit+0x154>)
 8001b2c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001b30:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b32:	4b32      	ldr	r3, [pc, #200]	@ (8001bfc <HAL_UART_MspInit+0x154>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b38:	4b30      	ldr	r3, [pc, #192]	@ (8001bfc <HAL_UART_MspInit+0x154>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001b3e:	4b2f      	ldr	r3, [pc, #188]	@ (8001bfc <HAL_UART_MspInit+0x154>)
 8001b40:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001b44:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b46:	4b2d      	ldr	r3, [pc, #180]	@ (8001bfc <HAL_UART_MspInit+0x154>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b4c:	4b2b      	ldr	r3, [pc, #172]	@ (8001bfc <HAL_UART_MspInit+0x154>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 8001b52:	4b2a      	ldr	r3, [pc, #168]	@ (8001bfc <HAL_UART_MspInit+0x154>)
 8001b54:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001b58:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001b5a:	4b28      	ldr	r3, [pc, #160]	@ (8001bfc <HAL_UART_MspInit+0x154>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b60:	4b26      	ldr	r3, [pc, #152]	@ (8001bfc <HAL_UART_MspInit+0x154>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8001b66:	4825      	ldr	r0, [pc, #148]	@ (8001bfc <HAL_UART_MspInit+0x154>)
 8001b68:	f001 f992 	bl	8002e90 <HAL_DMA_Init>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d001      	beq.n	8001b76 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8001b72:	f7ff fa17 	bl	8000fa4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	4a20      	ldr	r2, [pc, #128]	@ (8001bfc <HAL_UART_MspInit+0x154>)
 8001b7a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001b7c:	4a1f      	ldr	r2, [pc, #124]	@ (8001bfc <HAL_UART_MspInit+0x154>)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 8001b82:	4b20      	ldr	r3, [pc, #128]	@ (8001c04 <HAL_UART_MspInit+0x15c>)
 8001b84:	4a20      	ldr	r2, [pc, #128]	@ (8001c08 <HAL_UART_MspInit+0x160>)
 8001b86:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
 8001b88:	4b1e      	ldr	r3, [pc, #120]	@ (8001c04 <HAL_UART_MspInit+0x15c>)
 8001b8a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001b8e:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001b90:	4b1c      	ldr	r3, [pc, #112]	@ (8001c04 <HAL_UART_MspInit+0x15c>)
 8001b92:	2240      	movs	r2, #64	@ 0x40
 8001b94:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b96:	4b1b      	ldr	r3, [pc, #108]	@ (8001c04 <HAL_UART_MspInit+0x15c>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001b9c:	4b19      	ldr	r3, [pc, #100]	@ (8001c04 <HAL_UART_MspInit+0x15c>)
 8001b9e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001ba2:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001ba4:	4b17      	ldr	r3, [pc, #92]	@ (8001c04 <HAL_UART_MspInit+0x15c>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001baa:	4b16      	ldr	r3, [pc, #88]	@ (8001c04 <HAL_UART_MspInit+0x15c>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8001bb0:	4b14      	ldr	r3, [pc, #80]	@ (8001c04 <HAL_UART_MspInit+0x15c>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001bb6:	4b13      	ldr	r3, [pc, #76]	@ (8001c04 <HAL_UART_MspInit+0x15c>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001bbc:	4b11      	ldr	r3, [pc, #68]	@ (8001c04 <HAL_UART_MspInit+0x15c>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8001bc2:	4810      	ldr	r0, [pc, #64]	@ (8001c04 <HAL_UART_MspInit+0x15c>)
 8001bc4:	f001 f964 	bl	8002e90 <HAL_DMA_Init>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d001      	beq.n	8001bd2 <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8001bce:	f7ff f9e9 	bl	8000fa4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart4_tx);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	4a0b      	ldr	r2, [pc, #44]	@ (8001c04 <HAL_UART_MspInit+0x15c>)
 8001bd6:	639a      	str	r2, [r3, #56]	@ 0x38
 8001bd8:	4a0a      	ldr	r2, [pc, #40]	@ (8001c04 <HAL_UART_MspInit+0x15c>)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 6, 0);
 8001bde:	2200      	movs	r2, #0
 8001be0:	2106      	movs	r1, #6
 8001be2:	2034      	movs	r0, #52	@ 0x34
 8001be4:	f001 f92a 	bl	8002e3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001be8:	2034      	movs	r0, #52	@ 0x34
 8001bea:	f001 f943 	bl	8002e74 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001bee:	e0f6      	b.n	8001dde <HAL_UART_MspInit+0x336>
 8001bf0:	40004c00 	.word	0x40004c00
 8001bf4:	40023800 	.word	0x40023800
 8001bf8:	40020000 	.word	0x40020000
 8001bfc:	200006e0 	.word	0x200006e0
 8001c00:	40026040 	.word	0x40026040
 8001c04:	20000740 	.word	0x20000740
 8001c08:	40026070 	.word	0x40026070
  else if(uartHandle->Instance==UART5)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a75      	ldr	r2, [pc, #468]	@ (8001de8 <HAL_UART_MspInit+0x340>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	f040 80b1 	bne.w	8001d7a <HAL_UART_MspInit+0x2d2>
    __HAL_RCC_UART5_CLK_ENABLE();
 8001c18:	2300      	movs	r3, #0
 8001c1a:	61bb      	str	r3, [r7, #24]
 8001c1c:	4b73      	ldr	r3, [pc, #460]	@ (8001dec <HAL_UART_MspInit+0x344>)
 8001c1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c20:	4a72      	ldr	r2, [pc, #456]	@ (8001dec <HAL_UART_MspInit+0x344>)
 8001c22:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001c26:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c28:	4b70      	ldr	r3, [pc, #448]	@ (8001dec <HAL_UART_MspInit+0x344>)
 8001c2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c2c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c30:	61bb      	str	r3, [r7, #24]
 8001c32:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c34:	2300      	movs	r3, #0
 8001c36:	617b      	str	r3, [r7, #20]
 8001c38:	4b6c      	ldr	r3, [pc, #432]	@ (8001dec <HAL_UART_MspInit+0x344>)
 8001c3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c3c:	4a6b      	ldr	r2, [pc, #428]	@ (8001dec <HAL_UART_MspInit+0x344>)
 8001c3e:	f043 0304 	orr.w	r3, r3, #4
 8001c42:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c44:	4b69      	ldr	r3, [pc, #420]	@ (8001dec <HAL_UART_MspInit+0x344>)
 8001c46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c48:	f003 0304 	and.w	r3, r3, #4
 8001c4c:	617b      	str	r3, [r7, #20]
 8001c4e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c50:	2300      	movs	r3, #0
 8001c52:	613b      	str	r3, [r7, #16]
 8001c54:	4b65      	ldr	r3, [pc, #404]	@ (8001dec <HAL_UART_MspInit+0x344>)
 8001c56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c58:	4a64      	ldr	r2, [pc, #400]	@ (8001dec <HAL_UART_MspInit+0x344>)
 8001c5a:	f043 0308 	orr.w	r3, r3, #8
 8001c5e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c60:	4b62      	ldr	r3, [pc, #392]	@ (8001dec <HAL_UART_MspInit+0x344>)
 8001c62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c64:	f003 0308 	and.w	r3, r3, #8
 8001c68:	613b      	str	r3, [r7, #16]
 8001c6a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001c6c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c70:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c72:	2302      	movs	r3, #2
 8001c74:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c76:	2300      	movs	r3, #0
 8001c78:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c7a:	2303      	movs	r3, #3
 8001c7c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001c7e:	2308      	movs	r3, #8
 8001c80:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c82:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c86:	4619      	mov	r1, r3
 8001c88:	4859      	ldr	r0, [pc, #356]	@ (8001df0 <HAL_UART_MspInit+0x348>)
 8001c8a:	f001 fc7d 	bl	8003588 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001c8e:	2304      	movs	r3, #4
 8001c90:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c92:	2302      	movs	r3, #2
 8001c94:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c96:	2300      	movs	r3, #0
 8001c98:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c9a:	2303      	movs	r3, #3
 8001c9c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001c9e:	2308      	movs	r3, #8
 8001ca0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ca2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	4852      	ldr	r0, [pc, #328]	@ (8001df4 <HAL_UART_MspInit+0x34c>)
 8001caa:	f001 fc6d 	bl	8003588 <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA1_Stream0;
 8001cae:	4b52      	ldr	r3, [pc, #328]	@ (8001df8 <HAL_UART_MspInit+0x350>)
 8001cb0:	4a52      	ldr	r2, [pc, #328]	@ (8001dfc <HAL_UART_MspInit+0x354>)
 8001cb2:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 8001cb4:	4b50      	ldr	r3, [pc, #320]	@ (8001df8 <HAL_UART_MspInit+0x350>)
 8001cb6:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001cba:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001cbc:	4b4e      	ldr	r3, [pc, #312]	@ (8001df8 <HAL_UART_MspInit+0x350>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001cc2:	4b4d      	ldr	r3, [pc, #308]	@ (8001df8 <HAL_UART_MspInit+0x350>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001cc8:	4b4b      	ldr	r3, [pc, #300]	@ (8001df8 <HAL_UART_MspInit+0x350>)
 8001cca:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001cce:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001cd0:	4b49      	ldr	r3, [pc, #292]	@ (8001df8 <HAL_UART_MspInit+0x350>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001cd6:	4b48      	ldr	r3, [pc, #288]	@ (8001df8 <HAL_UART_MspInit+0x350>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_CIRCULAR;
 8001cdc:	4b46      	ldr	r3, [pc, #280]	@ (8001df8 <HAL_UART_MspInit+0x350>)
 8001cde:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001ce2:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001ce4:	4b44      	ldr	r3, [pc, #272]	@ (8001df8 <HAL_UART_MspInit+0x350>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001cea:	4b43      	ldr	r3, [pc, #268]	@ (8001df8 <HAL_UART_MspInit+0x350>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8001cf0:	4841      	ldr	r0, [pc, #260]	@ (8001df8 <HAL_UART_MspInit+0x350>)
 8001cf2:	f001 f8cd 	bl	8002e90 <HAL_DMA_Init>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d001      	beq.n	8001d00 <HAL_UART_MspInit+0x258>
      Error_Handler();
 8001cfc:	f7ff f952 	bl	8000fa4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart5_rx);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	4a3d      	ldr	r2, [pc, #244]	@ (8001df8 <HAL_UART_MspInit+0x350>)
 8001d04:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001d06:	4a3c      	ldr	r2, [pc, #240]	@ (8001df8 <HAL_UART_MspInit+0x350>)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_uart5_tx.Instance = DMA1_Stream7;
 8001d0c:	4b3c      	ldr	r3, [pc, #240]	@ (8001e00 <HAL_UART_MspInit+0x358>)
 8001d0e:	4a3d      	ldr	r2, [pc, #244]	@ (8001e04 <HAL_UART_MspInit+0x35c>)
 8001d10:	601a      	str	r2, [r3, #0]
    hdma_uart5_tx.Init.Channel = DMA_CHANNEL_4;
 8001d12:	4b3b      	ldr	r3, [pc, #236]	@ (8001e00 <HAL_UART_MspInit+0x358>)
 8001d14:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001d18:	605a      	str	r2, [r3, #4]
    hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001d1a:	4b39      	ldr	r3, [pc, #228]	@ (8001e00 <HAL_UART_MspInit+0x358>)
 8001d1c:	2240      	movs	r2, #64	@ 0x40
 8001d1e:	609a      	str	r2, [r3, #8]
    hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d20:	4b37      	ldr	r3, [pc, #220]	@ (8001e00 <HAL_UART_MspInit+0x358>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	60da      	str	r2, [r3, #12]
    hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001d26:	4b36      	ldr	r3, [pc, #216]	@ (8001e00 <HAL_UART_MspInit+0x358>)
 8001d28:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001d2c:	611a      	str	r2, [r3, #16]
    hdma_uart5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d2e:	4b34      	ldr	r3, [pc, #208]	@ (8001e00 <HAL_UART_MspInit+0x358>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	615a      	str	r2, [r3, #20]
    hdma_uart5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d34:	4b32      	ldr	r3, [pc, #200]	@ (8001e00 <HAL_UART_MspInit+0x358>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	619a      	str	r2, [r3, #24]
    hdma_uart5_tx.Init.Mode = DMA_NORMAL;
 8001d3a:	4b31      	ldr	r3, [pc, #196]	@ (8001e00 <HAL_UART_MspInit+0x358>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	61da      	str	r2, [r3, #28]
    hdma_uart5_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001d40:	4b2f      	ldr	r3, [pc, #188]	@ (8001e00 <HAL_UART_MspInit+0x358>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	621a      	str	r2, [r3, #32]
    hdma_uart5_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d46:	4b2e      	ldr	r3, [pc, #184]	@ (8001e00 <HAL_UART_MspInit+0x358>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart5_tx) != HAL_OK)
 8001d4c:	482c      	ldr	r0, [pc, #176]	@ (8001e00 <HAL_UART_MspInit+0x358>)
 8001d4e:	f001 f89f 	bl	8002e90 <HAL_DMA_Init>
 8001d52:	4603      	mov	r3, r0
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d001      	beq.n	8001d5c <HAL_UART_MspInit+0x2b4>
      Error_Handler();
 8001d58:	f7ff f924 	bl	8000fa4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart5_tx);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	4a28      	ldr	r2, [pc, #160]	@ (8001e00 <HAL_UART_MspInit+0x358>)
 8001d60:	639a      	str	r2, [r3, #56]	@ 0x38
 8001d62:	4a27      	ldr	r2, [pc, #156]	@ (8001e00 <HAL_UART_MspInit+0x358>)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(UART5_IRQn, 6, 0);
 8001d68:	2200      	movs	r2, #0
 8001d6a:	2106      	movs	r1, #6
 8001d6c:	2035      	movs	r0, #53	@ 0x35
 8001d6e:	f001 f865 	bl	8002e3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8001d72:	2035      	movs	r0, #53	@ 0x35
 8001d74:	f001 f87e 	bl	8002e74 <HAL_NVIC_EnableIRQ>
}
 8001d78:	e031      	b.n	8001dde <HAL_UART_MspInit+0x336>
  else if(uartHandle->Instance==USART1)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a22      	ldr	r2, [pc, #136]	@ (8001e08 <HAL_UART_MspInit+0x360>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d12c      	bne.n	8001dde <HAL_UART_MspInit+0x336>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d84:	2300      	movs	r3, #0
 8001d86:	60fb      	str	r3, [r7, #12]
 8001d88:	4b18      	ldr	r3, [pc, #96]	@ (8001dec <HAL_UART_MspInit+0x344>)
 8001d8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d8c:	4a17      	ldr	r2, [pc, #92]	@ (8001dec <HAL_UART_MspInit+0x344>)
 8001d8e:	f043 0310 	orr.w	r3, r3, #16
 8001d92:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d94:	4b15      	ldr	r3, [pc, #84]	@ (8001dec <HAL_UART_MspInit+0x344>)
 8001d96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d98:	f003 0310 	and.w	r3, r3, #16
 8001d9c:	60fb      	str	r3, [r7, #12]
 8001d9e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001da0:	2300      	movs	r3, #0
 8001da2:	60bb      	str	r3, [r7, #8]
 8001da4:	4b11      	ldr	r3, [pc, #68]	@ (8001dec <HAL_UART_MspInit+0x344>)
 8001da6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001da8:	4a10      	ldr	r2, [pc, #64]	@ (8001dec <HAL_UART_MspInit+0x344>)
 8001daa:	f043 0301 	orr.w	r3, r3, #1
 8001dae:	6313      	str	r3, [r2, #48]	@ 0x30
 8001db0:	4b0e      	ldr	r3, [pc, #56]	@ (8001dec <HAL_UART_MspInit+0x344>)
 8001db2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001db4:	f003 0301 	and.w	r3, r3, #1
 8001db8:	60bb      	str	r3, [r7, #8]
 8001dba:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001dbc:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001dc0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dc2:	2302      	movs	r3, #2
 8001dc4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dca:	2303      	movs	r3, #3
 8001dcc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001dce:	2307      	movs	r3, #7
 8001dd0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dd2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	480c      	ldr	r0, [pc, #48]	@ (8001e0c <HAL_UART_MspInit+0x364>)
 8001dda:	f001 fbd5 	bl	8003588 <HAL_GPIO_Init>
}
 8001dde:	bf00      	nop
 8001de0:	3738      	adds	r7, #56	@ 0x38
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	40005000 	.word	0x40005000
 8001dec:	40023800 	.word	0x40023800
 8001df0:	40020800 	.word	0x40020800
 8001df4:	40020c00 	.word	0x40020c00
 8001df8:	200007a0 	.word	0x200007a0
 8001dfc:	40026010 	.word	0x40026010
 8001e00:	20000800 	.word	0x20000800
 8001e04:	400260b8 	.word	0x400260b8
 8001e08:	40011000 	.word	0x40011000
 8001e0c:	40020000 	.word	0x40020000

08001e10 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001e10:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001e48 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001e14:	f7ff fbc4 	bl	80015a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e18:	480c      	ldr	r0, [pc, #48]	@ (8001e4c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001e1a:	490d      	ldr	r1, [pc, #52]	@ (8001e50 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001e1c:	4a0d      	ldr	r2, [pc, #52]	@ (8001e54 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001e1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e20:	e002      	b.n	8001e28 <LoopCopyDataInit>

08001e22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e26:	3304      	adds	r3, #4

08001e28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e2c:	d3f9      	bcc.n	8001e22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e2e:	4a0a      	ldr	r2, [pc, #40]	@ (8001e58 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001e30:	4c0a      	ldr	r4, [pc, #40]	@ (8001e5c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001e32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e34:	e001      	b.n	8001e3a <LoopFillZerobss>

08001e36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e38:	3204      	adds	r2, #4

08001e3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e3c:	d3fb      	bcc.n	8001e36 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8001e3e:	f00b ffa7 	bl	800dd90 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e42:	f7ff f807 	bl	8000e54 <main>
  bx  lr    
 8001e46:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001e48:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001e4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e50:	20000100 	.word	0x20000100
  ldr r2, =_sidata
 8001e54:	0800decc 	.word	0x0800decc
  ldr r2, =_sbss
 8001e58:	20000100 	.word	0x20000100
  ldr r4, =_ebss
 8001e5c:	20013198 	.word	0x20013198

08001e60 <DMA1_Stream1_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e60:	e7fe      	b.n	8001e60 <DMA1_Stream1_IRQHandler>
	...

08001e64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e68:	4b0e      	ldr	r3, [pc, #56]	@ (8001ea4 <HAL_Init+0x40>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a0d      	ldr	r2, [pc, #52]	@ (8001ea4 <HAL_Init+0x40>)
 8001e6e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001e72:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e74:	4b0b      	ldr	r3, [pc, #44]	@ (8001ea4 <HAL_Init+0x40>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a0a      	ldr	r2, [pc, #40]	@ (8001ea4 <HAL_Init+0x40>)
 8001e7a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001e7e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e80:	4b08      	ldr	r3, [pc, #32]	@ (8001ea4 <HAL_Init+0x40>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a07      	ldr	r2, [pc, #28]	@ (8001ea4 <HAL_Init+0x40>)
 8001e86:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e8a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e8c:	2003      	movs	r0, #3
 8001e8e:	f000 ffca 	bl	8002e26 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e92:	2000      	movs	r0, #0
 8001e94:	f7ff f9e8 	bl	8001268 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e98:	f7ff f9ba 	bl	8001210 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e9c:	2300      	movs	r3, #0
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	40023c00 	.word	0x40023c00

08001ea8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001eac:	4b06      	ldr	r3, [pc, #24]	@ (8001ec8 <HAL_IncTick+0x20>)
 8001eae:	781b      	ldrb	r3, [r3, #0]
 8001eb0:	461a      	mov	r2, r3
 8001eb2:	4b06      	ldr	r3, [pc, #24]	@ (8001ecc <HAL_IncTick+0x24>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4413      	add	r3, r2
 8001eb8:	4a04      	ldr	r2, [pc, #16]	@ (8001ecc <HAL_IncTick+0x24>)
 8001eba:	6013      	str	r3, [r2, #0]
}
 8001ebc:	bf00      	nop
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr
 8001ec6:	bf00      	nop
 8001ec8:	20000008 	.word	0x20000008
 8001ecc:	20000860 	.word	0x20000860

08001ed0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	af00      	add	r7, sp, #0
  return uwTick;
 8001ed4:	4b03      	ldr	r3, [pc, #12]	@ (8001ee4 <HAL_GetTick+0x14>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr
 8001ee2:	bf00      	nop
 8001ee4:	20000860 	.word	0x20000860

08001ee8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b084      	sub	sp, #16
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ef0:	f7ff ffee 	bl	8001ed0 <HAL_GetTick>
 8001ef4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001f00:	d005      	beq.n	8001f0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f02:	4b0a      	ldr	r3, [pc, #40]	@ (8001f2c <HAL_Delay+0x44>)
 8001f04:	781b      	ldrb	r3, [r3, #0]
 8001f06:	461a      	mov	r2, r3
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	4413      	add	r3, r2
 8001f0c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001f0e:	bf00      	nop
 8001f10:	f7ff ffde 	bl	8001ed0 <HAL_GetTick>
 8001f14:	4602      	mov	r2, r0
 8001f16:	68bb      	ldr	r3, [r7, #8]
 8001f18:	1ad3      	subs	r3, r2, r3
 8001f1a:	68fa      	ldr	r2, [r7, #12]
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	d8f7      	bhi.n	8001f10 <HAL_Delay+0x28>
  {
  }
}
 8001f20:	bf00      	nop
 8001f22:	bf00      	nop
 8001f24:	3710      	adds	r7, #16
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	20000008 	.word	0x20000008

08001f30 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b084      	sub	sp, #16
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d101      	bne.n	8001f46 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001f42:	2301      	movs	r3, #1
 8001f44:	e033      	b.n	8001fae <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d109      	bne.n	8001f62 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f4e:	6878      	ldr	r0, [r7, #4]
 8001f50:	f7fe fb4e 	bl	80005f0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2200      	movs	r2, #0
 8001f58:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f66:	f003 0310 	and.w	r3, r3, #16
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d118      	bne.n	8001fa0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f72:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001f76:	f023 0302 	bic.w	r3, r3, #2
 8001f7a:	f043 0202 	orr.w	r2, r3, #2
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001f82:	6878      	ldr	r0, [r7, #4]
 8001f84:	f000 fa68 	bl	8002458 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f92:	f023 0303 	bic.w	r3, r3, #3
 8001f96:	f043 0201 	orr.w	r2, r3, #1
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	641a      	str	r2, [r3, #64]	@ 0x40
 8001f9e:	e001      	b.n	8001fa4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001fac:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3710      	adds	r7, #16
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}

08001fb6 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001fb6:	b580      	push	{r7, lr}
 8001fb8:	b086      	sub	sp, #24
 8001fba:	af00      	add	r7, sp, #0
 8001fbc:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	617b      	str	r3, [r7, #20]
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	f003 0302 	and.w	r3, r3, #2
 8001fdc:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8001fde:	68bb      	ldr	r3, [r7, #8]
 8001fe0:	f003 0320 	and.w	r3, r3, #32
 8001fe4:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8001fe6:	697b      	ldr	r3, [r7, #20]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d049      	beq.n	8002080 <HAL_ADC_IRQHandler+0xca>
 8001fec:	693b      	ldr	r3, [r7, #16]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d046      	beq.n	8002080 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ff6:	f003 0310 	and.w	r3, r3, #16
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d105      	bne.n	800200a <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002002:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	689b      	ldr	r3, [r3, #8]
 8002010:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002014:	2b00      	cmp	r3, #0
 8002016:	d12b      	bne.n	8002070 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800201c:	2b00      	cmp	r3, #0
 800201e:	d127      	bne.n	8002070 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002026:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800202a:	2b00      	cmp	r3, #0
 800202c:	d006      	beq.n	800203c <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	689b      	ldr	r3, [r3, #8]
 8002034:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002038:	2b00      	cmp	r3, #0
 800203a:	d119      	bne.n	8002070 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	685a      	ldr	r2, [r3, #4]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f022 0220 	bic.w	r2, r2, #32
 800204a:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002050:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800205c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002060:	2b00      	cmp	r3, #0
 8002062:	d105      	bne.n	8002070 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002068:	f043 0201 	orr.w	r2, r3, #1
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002070:	6878      	ldr	r0, [r7, #4]
 8002072:	f000 f8b0 	bl	80021d6 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f06f 0212 	mvn.w	r2, #18
 800207e:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	f003 0304 	and.w	r3, r3, #4
 8002086:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800208e:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d057      	beq.n	8002146 <HAL_ADC_IRQHandler+0x190>
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d054      	beq.n	8002146 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020a0:	f003 0310 	and.w	r3, r3, #16
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d105      	bne.n	80020b4 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ac:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d139      	bne.n	8002136 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020c8:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d006      	beq.n	80020de <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	689b      	ldr	r3, [r3, #8]
 80020d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d12b      	bne.n	8002136 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d124      	bne.n	8002136 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	689b      	ldr	r3, [r3, #8]
 80020f2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d11d      	bne.n	8002136 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d119      	bne.n	8002136 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	685a      	ldr	r2, [r3, #4]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002110:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002116:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002122:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002126:	2b00      	cmp	r3, #0
 8002128:	d105      	bne.n	8002136 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800212e:	f043 0201 	orr.w	r2, r3, #1
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002136:	6878      	ldr	r0, [r7, #4]
 8002138:	f000 fa8a 	bl	8002650 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f06f 020c 	mvn.w	r2, #12
 8002144:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	f003 0301 	and.w	r3, r3, #1
 800214c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 800214e:	68bb      	ldr	r3, [r7, #8]
 8002150:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002154:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8002156:	697b      	ldr	r3, [r7, #20]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d017      	beq.n	800218c <HAL_ADC_IRQHandler+0x1d6>
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d014      	beq.n	800218c <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f003 0301 	and.w	r3, r3, #1
 800216c:	2b01      	cmp	r3, #1
 800216e:	d10d      	bne.n	800218c <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002174:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800217c:	6878      	ldr	r0, [r7, #4]
 800217e:	f000 f834 	bl	80021ea <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f06f 0201 	mvn.w	r2, #1
 800218a:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	f003 0320 	and.w	r3, r3, #32
 8002192:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800219a:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 800219c:	697b      	ldr	r3, [r7, #20]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d015      	beq.n	80021ce <HAL_ADC_IRQHandler+0x218>
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d012      	beq.n	80021ce <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021ac:	f043 0202 	orr.w	r2, r3, #2
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f06f 0220 	mvn.w	r2, #32
 80021bc:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 80021be:	6878      	ldr	r0, [r7, #4]
 80021c0:	f000 f81d 	bl	80021fe <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f06f 0220 	mvn.w	r2, #32
 80021cc:	601a      	str	r2, [r3, #0]
  }
}
 80021ce:	bf00      	nop
 80021d0:	3718      	adds	r7, #24
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}

080021d6 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80021d6:	b480      	push	{r7}
 80021d8:	b083      	sub	sp, #12
 80021da:	af00      	add	r7, sp, #0
 80021dc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80021de:	bf00      	nop
 80021e0:	370c      	adds	r7, #12
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr

080021ea <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80021ea:	b480      	push	{r7}
 80021ec:	b083      	sub	sp, #12
 80021ee:	af00      	add	r7, sp, #0
 80021f0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80021f2:	bf00      	nop
 80021f4:	370c      	adds	r7, #12
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr

080021fe <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80021fe:	b480      	push	{r7}
 8002200:	b083      	sub	sp, #12
 8002202:	af00      	add	r7, sp, #0
 8002204:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002206:	bf00      	nop
 8002208:	370c      	adds	r7, #12
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr
	...

08002214 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002214:	b480      	push	{r7}
 8002216:	b085      	sub	sp, #20
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
 800221c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800221e:	2300      	movs	r3, #0
 8002220:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002228:	2b01      	cmp	r3, #1
 800222a:	d101      	bne.n	8002230 <HAL_ADC_ConfigChannel+0x1c>
 800222c:	2302      	movs	r3, #2
 800222e:	e105      	b.n	800243c <HAL_ADC_ConfigChannel+0x228>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2201      	movs	r2, #1
 8002234:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	2b09      	cmp	r3, #9
 800223e:	d925      	bls.n	800228c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	68d9      	ldr	r1, [r3, #12]
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	b29b      	uxth	r3, r3
 800224c:	461a      	mov	r2, r3
 800224e:	4613      	mov	r3, r2
 8002250:	005b      	lsls	r3, r3, #1
 8002252:	4413      	add	r3, r2
 8002254:	3b1e      	subs	r3, #30
 8002256:	2207      	movs	r2, #7
 8002258:	fa02 f303 	lsl.w	r3, r2, r3
 800225c:	43da      	mvns	r2, r3
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	400a      	ands	r2, r1
 8002264:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	68d9      	ldr	r1, [r3, #12]
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	689a      	ldr	r2, [r3, #8]
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	b29b      	uxth	r3, r3
 8002276:	4618      	mov	r0, r3
 8002278:	4603      	mov	r3, r0
 800227a:	005b      	lsls	r3, r3, #1
 800227c:	4403      	add	r3, r0
 800227e:	3b1e      	subs	r3, #30
 8002280:	409a      	lsls	r2, r3
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	430a      	orrs	r2, r1
 8002288:	60da      	str	r2, [r3, #12]
 800228a:	e022      	b.n	80022d2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	6919      	ldr	r1, [r3, #16]
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	b29b      	uxth	r3, r3
 8002298:	461a      	mov	r2, r3
 800229a:	4613      	mov	r3, r2
 800229c:	005b      	lsls	r3, r3, #1
 800229e:	4413      	add	r3, r2
 80022a0:	2207      	movs	r2, #7
 80022a2:	fa02 f303 	lsl.w	r3, r2, r3
 80022a6:	43da      	mvns	r2, r3
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	400a      	ands	r2, r1
 80022ae:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	6919      	ldr	r1, [r3, #16]
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	689a      	ldr	r2, [r3, #8]
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	b29b      	uxth	r3, r3
 80022c0:	4618      	mov	r0, r3
 80022c2:	4603      	mov	r3, r0
 80022c4:	005b      	lsls	r3, r3, #1
 80022c6:	4403      	add	r3, r0
 80022c8:	409a      	lsls	r2, r3
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	430a      	orrs	r2, r1
 80022d0:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	2b06      	cmp	r3, #6
 80022d8:	d824      	bhi.n	8002324 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	685a      	ldr	r2, [r3, #4]
 80022e4:	4613      	mov	r3, r2
 80022e6:	009b      	lsls	r3, r3, #2
 80022e8:	4413      	add	r3, r2
 80022ea:	3b05      	subs	r3, #5
 80022ec:	221f      	movs	r2, #31
 80022ee:	fa02 f303 	lsl.w	r3, r2, r3
 80022f2:	43da      	mvns	r2, r3
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	400a      	ands	r2, r1
 80022fa:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	b29b      	uxth	r3, r3
 8002308:	4618      	mov	r0, r3
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	685a      	ldr	r2, [r3, #4]
 800230e:	4613      	mov	r3, r2
 8002310:	009b      	lsls	r3, r3, #2
 8002312:	4413      	add	r3, r2
 8002314:	3b05      	subs	r3, #5
 8002316:	fa00 f203 	lsl.w	r2, r0, r3
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	430a      	orrs	r2, r1
 8002320:	635a      	str	r2, [r3, #52]	@ 0x34
 8002322:	e04c      	b.n	80023be <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	2b0c      	cmp	r3, #12
 800232a:	d824      	bhi.n	8002376 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	685a      	ldr	r2, [r3, #4]
 8002336:	4613      	mov	r3, r2
 8002338:	009b      	lsls	r3, r3, #2
 800233a:	4413      	add	r3, r2
 800233c:	3b23      	subs	r3, #35	@ 0x23
 800233e:	221f      	movs	r2, #31
 8002340:	fa02 f303 	lsl.w	r3, r2, r3
 8002344:	43da      	mvns	r2, r3
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	400a      	ands	r2, r1
 800234c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	b29b      	uxth	r3, r3
 800235a:	4618      	mov	r0, r3
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	685a      	ldr	r2, [r3, #4]
 8002360:	4613      	mov	r3, r2
 8002362:	009b      	lsls	r3, r3, #2
 8002364:	4413      	add	r3, r2
 8002366:	3b23      	subs	r3, #35	@ 0x23
 8002368:	fa00 f203 	lsl.w	r2, r0, r3
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	430a      	orrs	r2, r1
 8002372:	631a      	str	r2, [r3, #48]	@ 0x30
 8002374:	e023      	b.n	80023be <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	685a      	ldr	r2, [r3, #4]
 8002380:	4613      	mov	r3, r2
 8002382:	009b      	lsls	r3, r3, #2
 8002384:	4413      	add	r3, r2
 8002386:	3b41      	subs	r3, #65	@ 0x41
 8002388:	221f      	movs	r2, #31
 800238a:	fa02 f303 	lsl.w	r3, r2, r3
 800238e:	43da      	mvns	r2, r3
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	400a      	ands	r2, r1
 8002396:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	b29b      	uxth	r3, r3
 80023a4:	4618      	mov	r0, r3
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	685a      	ldr	r2, [r3, #4]
 80023aa:	4613      	mov	r3, r2
 80023ac:	009b      	lsls	r3, r3, #2
 80023ae:	4413      	add	r3, r2
 80023b0:	3b41      	subs	r3, #65	@ 0x41
 80023b2:	fa00 f203 	lsl.w	r2, r0, r3
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	430a      	orrs	r2, r1
 80023bc:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80023be:	4b22      	ldr	r3, [pc, #136]	@ (8002448 <HAL_ADC_ConfigChannel+0x234>)
 80023c0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a21      	ldr	r2, [pc, #132]	@ (800244c <HAL_ADC_ConfigChannel+0x238>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d109      	bne.n	80023e0 <HAL_ADC_ConfigChannel+0x1cc>
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	2b12      	cmp	r3, #18
 80023d2:	d105      	bne.n	80023e0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a19      	ldr	r2, [pc, #100]	@ (800244c <HAL_ADC_ConfigChannel+0x238>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d123      	bne.n	8002432 <HAL_ADC_ConfigChannel+0x21e>
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	2b10      	cmp	r3, #16
 80023f0:	d003      	beq.n	80023fa <HAL_ADC_ConfigChannel+0x1e6>
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	2b11      	cmp	r3, #17
 80023f8:	d11b      	bne.n	8002432 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	2b10      	cmp	r3, #16
 800240c:	d111      	bne.n	8002432 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800240e:	4b10      	ldr	r3, [pc, #64]	@ (8002450 <HAL_ADC_ConfigChannel+0x23c>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a10      	ldr	r2, [pc, #64]	@ (8002454 <HAL_ADC_ConfigChannel+0x240>)
 8002414:	fba2 2303 	umull	r2, r3, r2, r3
 8002418:	0c9a      	lsrs	r2, r3, #18
 800241a:	4613      	mov	r3, r2
 800241c:	009b      	lsls	r3, r3, #2
 800241e:	4413      	add	r3, r2
 8002420:	005b      	lsls	r3, r3, #1
 8002422:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002424:	e002      	b.n	800242c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002426:	68bb      	ldr	r3, [r7, #8]
 8002428:	3b01      	subs	r3, #1
 800242a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d1f9      	bne.n	8002426 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2200      	movs	r2, #0
 8002436:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800243a:	2300      	movs	r3, #0
}
 800243c:	4618      	mov	r0, r3
 800243e:	3714      	adds	r7, #20
 8002440:	46bd      	mov	sp, r7
 8002442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002446:	4770      	bx	lr
 8002448:	40012300 	.word	0x40012300
 800244c:	40012000 	.word	0x40012000
 8002450:	20000000 	.word	0x20000000
 8002454:	431bde83 	.word	0x431bde83

08002458 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002458:	b480      	push	{r7}
 800245a:	b085      	sub	sp, #20
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002460:	4b79      	ldr	r3, [pc, #484]	@ (8002648 <ADC_Init+0x1f0>)
 8002462:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	685a      	ldr	r2, [r3, #4]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	431a      	orrs	r2, r3
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	685a      	ldr	r2, [r3, #4]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800248c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	6859      	ldr	r1, [r3, #4]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	691b      	ldr	r3, [r3, #16]
 8002498:	021a      	lsls	r2, r3, #8
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	430a      	orrs	r2, r1
 80024a0:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	685a      	ldr	r2, [r3, #4]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80024b0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	6859      	ldr	r1, [r3, #4]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	689a      	ldr	r2, [r3, #8]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	430a      	orrs	r2, r1
 80024c2:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	689a      	ldr	r2, [r3, #8]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80024d2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	6899      	ldr	r1, [r3, #8]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	68da      	ldr	r2, [r3, #12]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	430a      	orrs	r2, r1
 80024e4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024ea:	4a58      	ldr	r2, [pc, #352]	@ (800264c <ADC_Init+0x1f4>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d022      	beq.n	8002536 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	689a      	ldr	r2, [r3, #8]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80024fe:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	6899      	ldr	r1, [r3, #8]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	430a      	orrs	r2, r1
 8002510:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	689a      	ldr	r2, [r3, #8]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002520:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	6899      	ldr	r1, [r3, #8]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	430a      	orrs	r2, r1
 8002532:	609a      	str	r2, [r3, #8]
 8002534:	e00f      	b.n	8002556 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	689a      	ldr	r2, [r3, #8]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002544:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	689a      	ldr	r2, [r3, #8]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002554:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	689a      	ldr	r2, [r3, #8]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f022 0202 	bic.w	r2, r2, #2
 8002564:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	6899      	ldr	r1, [r3, #8]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	7e1b      	ldrb	r3, [r3, #24]
 8002570:	005a      	lsls	r2, r3, #1
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	430a      	orrs	r2, r1
 8002578:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d01b      	beq.n	80025bc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	685a      	ldr	r2, [r3, #4]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002592:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	685a      	ldr	r2, [r3, #4]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80025a2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	6859      	ldr	r1, [r3, #4]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025ae:	3b01      	subs	r3, #1
 80025b0:	035a      	lsls	r2, r3, #13
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	430a      	orrs	r2, r1
 80025b8:	605a      	str	r2, [r3, #4]
 80025ba:	e007      	b.n	80025cc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	685a      	ldr	r2, [r3, #4]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80025ca:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80025da:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	69db      	ldr	r3, [r3, #28]
 80025e6:	3b01      	subs	r3, #1
 80025e8:	051a      	lsls	r2, r3, #20
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	430a      	orrs	r2, r1
 80025f0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	689a      	ldr	r2, [r3, #8]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002600:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	6899      	ldr	r1, [r3, #8]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800260e:	025a      	lsls	r2, r3, #9
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	430a      	orrs	r2, r1
 8002616:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	689a      	ldr	r2, [r3, #8]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002626:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	6899      	ldr	r1, [r3, #8]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	695b      	ldr	r3, [r3, #20]
 8002632:	029a      	lsls	r2, r3, #10
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	430a      	orrs	r2, r1
 800263a:	609a      	str	r2, [r3, #8]
}
 800263c:	bf00      	nop
 800263e:	3714      	adds	r7, #20
 8002640:	46bd      	mov	sp, r7
 8002642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002646:	4770      	bx	lr
 8002648:	40012300 	.word	0x40012300
 800264c:	0f000001 	.word	0x0f000001

08002650 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002650:	b480      	push	{r7}
 8002652:	b083      	sub	sp, #12
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002658:	bf00      	nop
 800265a:	370c      	adds	r7, #12
 800265c:	46bd      	mov	sp, r7
 800265e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002662:	4770      	bx	lr

08002664 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b084      	sub	sp, #16
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d101      	bne.n	8002676 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	e0ed      	b.n	8002852 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	f893 3020 	ldrb.w	r3, [r3, #32]
 800267c:	b2db      	uxtb	r3, r3
 800267e:	2b00      	cmp	r3, #0
 8002680:	d102      	bne.n	8002688 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002682:	6878      	ldr	r0, [r7, #4]
 8002684:	f7fe f8a0 	bl	80007c8 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	681a      	ldr	r2, [r3, #0]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f042 0201 	orr.w	r2, r2, #1
 8002696:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002698:	f7ff fc1a 	bl	8001ed0 <HAL_GetTick>
 800269c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800269e:	e012      	b.n	80026c6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80026a0:	f7ff fc16 	bl	8001ed0 <HAL_GetTick>
 80026a4:	4602      	mov	r2, r0
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	1ad3      	subs	r3, r2, r3
 80026aa:	2b0a      	cmp	r3, #10
 80026ac:	d90b      	bls.n	80026c6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026b2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2205      	movs	r2, #5
 80026be:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	e0c5      	b.n	8002852 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	f003 0301 	and.w	r3, r3, #1
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d0e5      	beq.n	80026a0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	681a      	ldr	r2, [r3, #0]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f022 0202 	bic.w	r2, r2, #2
 80026e2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80026e4:	f7ff fbf4 	bl	8001ed0 <HAL_GetTick>
 80026e8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80026ea:	e012      	b.n	8002712 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80026ec:	f7ff fbf0 	bl	8001ed0 <HAL_GetTick>
 80026f0:	4602      	mov	r2, r0
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	1ad3      	subs	r3, r2, r3
 80026f6:	2b0a      	cmp	r3, #10
 80026f8:	d90b      	bls.n	8002712 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026fe:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2205      	movs	r2, #5
 800270a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	e09f      	b.n	8002852 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	f003 0302 	and.w	r3, r3, #2
 800271c:	2b00      	cmp	r3, #0
 800271e:	d1e5      	bne.n	80026ec <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	7e1b      	ldrb	r3, [r3, #24]
 8002724:	2b01      	cmp	r3, #1
 8002726:	d108      	bne.n	800273a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	681a      	ldr	r2, [r3, #0]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002736:	601a      	str	r2, [r3, #0]
 8002738:	e007      	b.n	800274a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	681a      	ldr	r2, [r3, #0]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002748:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	7e5b      	ldrb	r3, [r3, #25]
 800274e:	2b01      	cmp	r3, #1
 8002750:	d108      	bne.n	8002764 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	681a      	ldr	r2, [r3, #0]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002760:	601a      	str	r2, [r3, #0]
 8002762:	e007      	b.n	8002774 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	681a      	ldr	r2, [r3, #0]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002772:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	7e9b      	ldrb	r3, [r3, #26]
 8002778:	2b01      	cmp	r3, #1
 800277a:	d108      	bne.n	800278e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	681a      	ldr	r2, [r3, #0]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f042 0220 	orr.w	r2, r2, #32
 800278a:	601a      	str	r2, [r3, #0]
 800278c:	e007      	b.n	800279e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	681a      	ldr	r2, [r3, #0]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f022 0220 	bic.w	r2, r2, #32
 800279c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	7edb      	ldrb	r3, [r3, #27]
 80027a2:	2b01      	cmp	r3, #1
 80027a4:	d108      	bne.n	80027b8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	681a      	ldr	r2, [r3, #0]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f022 0210 	bic.w	r2, r2, #16
 80027b4:	601a      	str	r2, [r3, #0]
 80027b6:	e007      	b.n	80027c8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	681a      	ldr	r2, [r3, #0]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f042 0210 	orr.w	r2, r2, #16
 80027c6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	7f1b      	ldrb	r3, [r3, #28]
 80027cc:	2b01      	cmp	r3, #1
 80027ce:	d108      	bne.n	80027e2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	681a      	ldr	r2, [r3, #0]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f042 0208 	orr.w	r2, r2, #8
 80027de:	601a      	str	r2, [r3, #0]
 80027e0:	e007      	b.n	80027f2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f022 0208 	bic.w	r2, r2, #8
 80027f0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	7f5b      	ldrb	r3, [r3, #29]
 80027f6:	2b01      	cmp	r3, #1
 80027f8:	d108      	bne.n	800280c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	681a      	ldr	r2, [r3, #0]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f042 0204 	orr.w	r2, r2, #4
 8002808:	601a      	str	r2, [r3, #0]
 800280a:	e007      	b.n	800281c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f022 0204 	bic.w	r2, r2, #4
 800281a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	689a      	ldr	r2, [r3, #8]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	68db      	ldr	r3, [r3, #12]
 8002824:	431a      	orrs	r2, r3
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	691b      	ldr	r3, [r3, #16]
 800282a:	431a      	orrs	r2, r3
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	695b      	ldr	r3, [r3, #20]
 8002830:	ea42 0103 	orr.w	r1, r2, r3
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	1e5a      	subs	r2, r3, #1
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	430a      	orrs	r2, r1
 8002840:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2200      	movs	r2, #0
 8002846:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2201      	movs	r2, #1
 800284c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002850:	2300      	movs	r3, #0
}
 8002852:	4618      	mov	r0, r3
 8002854:	3710      	adds	r7, #16
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}

0800285a <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800285a:	b580      	push	{r7, lr}
 800285c:	b08a      	sub	sp, #40	@ 0x28
 800285e:	af00      	add	r7, sp, #0
 8002860:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002862:	2300      	movs	r3, #0
 8002864:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	695b      	ldr	r3, [r3, #20]
 800286c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	68db      	ldr	r3, [r3, #12]
 8002884:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	691b      	ldr	r3, [r3, #16]
 800288c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	699b      	ldr	r3, [r3, #24]
 8002894:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002896:	6a3b      	ldr	r3, [r7, #32]
 8002898:	f003 0301 	and.w	r3, r3, #1
 800289c:	2b00      	cmp	r3, #0
 800289e:	d07c      	beq.n	800299a <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80028a0:	69bb      	ldr	r3, [r7, #24]
 80028a2:	f003 0301 	and.w	r3, r3, #1
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d023      	beq.n	80028f2 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	2201      	movs	r2, #1
 80028b0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80028b2:	69bb      	ldr	r3, [r7, #24]
 80028b4:	f003 0302 	and.w	r3, r3, #2
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d003      	beq.n	80028c4 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80028bc:	6878      	ldr	r0, [r7, #4]
 80028be:	f000 f983 	bl	8002bc8 <HAL_CAN_TxMailbox0CompleteCallback>
 80028c2:	e016      	b.n	80028f2 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80028c4:	69bb      	ldr	r3, [r7, #24]
 80028c6:	f003 0304 	and.w	r3, r3, #4
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d004      	beq.n	80028d8 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80028ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028d0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80028d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80028d6:	e00c      	b.n	80028f2 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80028d8:	69bb      	ldr	r3, [r7, #24]
 80028da:	f003 0308 	and.w	r3, r3, #8
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d004      	beq.n	80028ec <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80028e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028e4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80028e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80028ea:	e002      	b.n	80028f2 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80028ec:	6878      	ldr	r0, [r7, #4]
 80028ee:	f000 f989 	bl	8002c04 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80028f2:	69bb      	ldr	r3, [r7, #24]
 80028f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d024      	beq.n	8002946 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002904:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002906:	69bb      	ldr	r3, [r7, #24]
 8002908:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800290c:	2b00      	cmp	r3, #0
 800290e:	d003      	beq.n	8002918 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002910:	6878      	ldr	r0, [r7, #4]
 8002912:	f000 f963 	bl	8002bdc <HAL_CAN_TxMailbox1CompleteCallback>
 8002916:	e016      	b.n	8002946 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002918:	69bb      	ldr	r3, [r7, #24]
 800291a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800291e:	2b00      	cmp	r3, #0
 8002920:	d004      	beq.n	800292c <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002924:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002928:	627b      	str	r3, [r7, #36]	@ 0x24
 800292a:	e00c      	b.n	8002946 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800292c:	69bb      	ldr	r3, [r7, #24]
 800292e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002932:	2b00      	cmp	r3, #0
 8002934:	d004      	beq.n	8002940 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002938:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800293c:	627b      	str	r3, [r7, #36]	@ 0x24
 800293e:	e002      	b.n	8002946 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002940:	6878      	ldr	r0, [r7, #4]
 8002942:	f000 f969 	bl	8002c18 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002946:	69bb      	ldr	r3, [r7, #24]
 8002948:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800294c:	2b00      	cmp	r3, #0
 800294e:	d024      	beq.n	800299a <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002958:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800295a:	69bb      	ldr	r3, [r7, #24]
 800295c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002960:	2b00      	cmp	r3, #0
 8002962:	d003      	beq.n	800296c <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002964:	6878      	ldr	r0, [r7, #4]
 8002966:	f000 f943 	bl	8002bf0 <HAL_CAN_TxMailbox2CompleteCallback>
 800296a:	e016      	b.n	800299a <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800296c:	69bb      	ldr	r3, [r7, #24]
 800296e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002972:	2b00      	cmp	r3, #0
 8002974:	d004      	beq.n	8002980 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002978:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800297c:	627b      	str	r3, [r7, #36]	@ 0x24
 800297e:	e00c      	b.n	800299a <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002980:	69bb      	ldr	r3, [r7, #24]
 8002982:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002986:	2b00      	cmp	r3, #0
 8002988:	d004      	beq.n	8002994 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800298a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800298c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002990:	627b      	str	r3, [r7, #36]	@ 0x24
 8002992:	e002      	b.n	800299a <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002994:	6878      	ldr	r0, [r7, #4]
 8002996:	f000 f949 	bl	8002c2c <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800299a:	6a3b      	ldr	r3, [r7, #32]
 800299c:	f003 0308 	and.w	r3, r3, #8
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d00c      	beq.n	80029be <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	f003 0310 	and.w	r3, r3, #16
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d007      	beq.n	80029be <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80029ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029b0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80029b4:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	2210      	movs	r2, #16
 80029bc:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80029be:	6a3b      	ldr	r3, [r7, #32]
 80029c0:	f003 0304 	and.w	r3, r3, #4
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d00b      	beq.n	80029e0 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	f003 0308 	and.w	r3, r3, #8
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d006      	beq.n	80029e0 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	2208      	movs	r2, #8
 80029d8:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80029da:	6878      	ldr	r0, [r7, #4]
 80029dc:	f000 f93a 	bl	8002c54 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80029e0:	6a3b      	ldr	r3, [r7, #32]
 80029e2:	f003 0302 	and.w	r3, r3, #2
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d009      	beq.n	80029fe <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	68db      	ldr	r3, [r3, #12]
 80029f0:	f003 0303 	and.w	r3, r3, #3
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d002      	beq.n	80029fe <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80029f8:	6878      	ldr	r0, [r7, #4]
 80029fa:	f000 f921 	bl	8002c40 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80029fe:	6a3b      	ldr	r3, [r7, #32]
 8002a00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d00c      	beq.n	8002a22 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	f003 0310 	and.w	r3, r3, #16
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d007      	beq.n	8002a22 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002a12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a14:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002a18:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	2210      	movs	r2, #16
 8002a20:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002a22:	6a3b      	ldr	r3, [r7, #32]
 8002a24:	f003 0320 	and.w	r3, r3, #32
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d00b      	beq.n	8002a44 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002a2c:	693b      	ldr	r3, [r7, #16]
 8002a2e:	f003 0308 	and.w	r3, r3, #8
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d006      	beq.n	8002a44 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	2208      	movs	r2, #8
 8002a3c:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002a3e:	6878      	ldr	r0, [r7, #4]
 8002a40:	f000 f91c 	bl	8002c7c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002a44:	6a3b      	ldr	r3, [r7, #32]
 8002a46:	f003 0310 	and.w	r3, r3, #16
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d009      	beq.n	8002a62 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	691b      	ldr	r3, [r3, #16]
 8002a54:	f003 0303 	and.w	r3, r3, #3
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d002      	beq.n	8002a62 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002a5c:	6878      	ldr	r0, [r7, #4]
 8002a5e:	f000 f903 	bl	8002c68 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002a62:	6a3b      	ldr	r3, [r7, #32]
 8002a64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d00b      	beq.n	8002a84 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002a6c:	69fb      	ldr	r3, [r7, #28]
 8002a6e:	f003 0310 	and.w	r3, r3, #16
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d006      	beq.n	8002a84 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	2210      	movs	r2, #16
 8002a7c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002a7e:	6878      	ldr	r0, [r7, #4]
 8002a80:	f000 f906 	bl	8002c90 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002a84:	6a3b      	ldr	r3, [r7, #32]
 8002a86:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d00b      	beq.n	8002aa6 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002a8e:	69fb      	ldr	r3, [r7, #28]
 8002a90:	f003 0308 	and.w	r3, r3, #8
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d006      	beq.n	8002aa6 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	2208      	movs	r2, #8
 8002a9e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002aa0:	6878      	ldr	r0, [r7, #4]
 8002aa2:	f000 f8ff 	bl	8002ca4 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002aa6:	6a3b      	ldr	r3, [r7, #32]
 8002aa8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d07b      	beq.n	8002ba8 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002ab0:	69fb      	ldr	r3, [r7, #28]
 8002ab2:	f003 0304 	and.w	r3, r3, #4
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d072      	beq.n	8002ba0 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002aba:	6a3b      	ldr	r3, [r7, #32]
 8002abc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d008      	beq.n	8002ad6 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d003      	beq.n	8002ad6 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002ace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ad0:	f043 0301 	orr.w	r3, r3, #1
 8002ad4:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002ad6:	6a3b      	ldr	r3, [r7, #32]
 8002ad8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d008      	beq.n	8002af2 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d003      	beq.n	8002af2 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002aea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aec:	f043 0302 	orr.w	r3, r3, #2
 8002af0:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002af2:	6a3b      	ldr	r3, [r7, #32]
 8002af4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d008      	beq.n	8002b0e <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d003      	beq.n	8002b0e <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002b06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b08:	f043 0304 	orr.w	r3, r3, #4
 8002b0c:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002b0e:	6a3b      	ldr	r3, [r7, #32]
 8002b10:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d043      	beq.n	8002ba0 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d03e      	beq.n	8002ba0 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002b28:	2b60      	cmp	r3, #96	@ 0x60
 8002b2a:	d02b      	beq.n	8002b84 <HAL_CAN_IRQHandler+0x32a>
 8002b2c:	2b60      	cmp	r3, #96	@ 0x60
 8002b2e:	d82e      	bhi.n	8002b8e <HAL_CAN_IRQHandler+0x334>
 8002b30:	2b50      	cmp	r3, #80	@ 0x50
 8002b32:	d022      	beq.n	8002b7a <HAL_CAN_IRQHandler+0x320>
 8002b34:	2b50      	cmp	r3, #80	@ 0x50
 8002b36:	d82a      	bhi.n	8002b8e <HAL_CAN_IRQHandler+0x334>
 8002b38:	2b40      	cmp	r3, #64	@ 0x40
 8002b3a:	d019      	beq.n	8002b70 <HAL_CAN_IRQHandler+0x316>
 8002b3c:	2b40      	cmp	r3, #64	@ 0x40
 8002b3e:	d826      	bhi.n	8002b8e <HAL_CAN_IRQHandler+0x334>
 8002b40:	2b30      	cmp	r3, #48	@ 0x30
 8002b42:	d010      	beq.n	8002b66 <HAL_CAN_IRQHandler+0x30c>
 8002b44:	2b30      	cmp	r3, #48	@ 0x30
 8002b46:	d822      	bhi.n	8002b8e <HAL_CAN_IRQHandler+0x334>
 8002b48:	2b10      	cmp	r3, #16
 8002b4a:	d002      	beq.n	8002b52 <HAL_CAN_IRQHandler+0x2f8>
 8002b4c:	2b20      	cmp	r3, #32
 8002b4e:	d005      	beq.n	8002b5c <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002b50:	e01d      	b.n	8002b8e <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002b52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b54:	f043 0308 	orr.w	r3, r3, #8
 8002b58:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002b5a:	e019      	b.n	8002b90 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002b5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b5e:	f043 0310 	orr.w	r3, r3, #16
 8002b62:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002b64:	e014      	b.n	8002b90 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b68:	f043 0320 	orr.w	r3, r3, #32
 8002b6c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002b6e:	e00f      	b.n	8002b90 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002b70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b72:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002b76:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002b78:	e00a      	b.n	8002b90 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002b7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b7c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002b80:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002b82:	e005      	b.n	8002b90 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002b84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b86:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b8a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002b8c:	e000      	b.n	8002b90 <HAL_CAN_IRQHandler+0x336>
            break;
 8002b8e:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	699a      	ldr	r2, [r3, #24]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8002b9e:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	2204      	movs	r2, #4
 8002ba6:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002ba8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d008      	beq.n	8002bc0 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002bb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bb4:	431a      	orrs	r2, r3
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	f000 f87c 	bl	8002cb8 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002bc0:	bf00      	nop
 8002bc2:	3728      	adds	r7, #40	@ 0x28
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd80      	pop	{r7, pc}

08002bc8 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b083      	sub	sp, #12
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002bd0:	bf00      	nop
 8002bd2:	370c      	adds	r7, #12
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bda:	4770      	bx	lr

08002bdc <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b083      	sub	sp, #12
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002be4:	bf00      	nop
 8002be6:	370c      	adds	r7, #12
 8002be8:	46bd      	mov	sp, r7
 8002bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bee:	4770      	bx	lr

08002bf0 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b083      	sub	sp, #12
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002bf8:	bf00      	nop
 8002bfa:	370c      	adds	r7, #12
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c02:	4770      	bx	lr

08002c04 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b083      	sub	sp, #12
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002c0c:	bf00      	nop
 8002c0e:	370c      	adds	r7, #12
 8002c10:	46bd      	mov	sp, r7
 8002c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c16:	4770      	bx	lr

08002c18 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b083      	sub	sp, #12
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002c20:	bf00      	nop
 8002c22:	370c      	adds	r7, #12
 8002c24:	46bd      	mov	sp, r7
 8002c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2a:	4770      	bx	lr

08002c2c <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b083      	sub	sp, #12
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002c34:	bf00      	nop
 8002c36:	370c      	adds	r7, #12
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3e:	4770      	bx	lr

08002c40 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002c40:	b480      	push	{r7}
 8002c42:	b083      	sub	sp, #12
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8002c48:	bf00      	nop
 8002c4a:	370c      	adds	r7, #12
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c52:	4770      	bx	lr

08002c54 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b083      	sub	sp, #12
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002c5c:	bf00      	nop
 8002c5e:	370c      	adds	r7, #12
 8002c60:	46bd      	mov	sp, r7
 8002c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c66:	4770      	bx	lr

08002c68 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b083      	sub	sp, #12
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002c70:	bf00      	nop
 8002c72:	370c      	adds	r7, #12
 8002c74:	46bd      	mov	sp, r7
 8002c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7a:	4770      	bx	lr

08002c7c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b083      	sub	sp, #12
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002c84:	bf00      	nop
 8002c86:	370c      	adds	r7, #12
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8e:	4770      	bx	lr

08002c90 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b083      	sub	sp, #12
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002c98:	bf00      	nop
 8002c9a:	370c      	adds	r7, #12
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca2:	4770      	bx	lr

08002ca4 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b083      	sub	sp, #12
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002cac:	bf00      	nop
 8002cae:	370c      	adds	r7, #12
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb6:	4770      	bx	lr

08002cb8 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b083      	sub	sp, #12
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002cc0:	bf00      	nop
 8002cc2:	370c      	adds	r7, #12
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cca:	4770      	bx	lr

08002ccc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b085      	sub	sp, #20
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	f003 0307 	and.w	r3, r3, #7
 8002cda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002cdc:	4b0c      	ldr	r3, [pc, #48]	@ (8002d10 <__NVIC_SetPriorityGrouping+0x44>)
 8002cde:	68db      	ldr	r3, [r3, #12]
 8002ce0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ce2:	68ba      	ldr	r2, [r7, #8]
 8002ce4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002ce8:	4013      	ands	r3, r2
 8002cea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002cf4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002cf8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002cfc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002cfe:	4a04      	ldr	r2, [pc, #16]	@ (8002d10 <__NVIC_SetPriorityGrouping+0x44>)
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	60d3      	str	r3, [r2, #12]
}
 8002d04:	bf00      	nop
 8002d06:	3714      	adds	r7, #20
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0e:	4770      	bx	lr
 8002d10:	e000ed00 	.word	0xe000ed00

08002d14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d14:	b480      	push	{r7}
 8002d16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d18:	4b04      	ldr	r3, [pc, #16]	@ (8002d2c <__NVIC_GetPriorityGrouping+0x18>)
 8002d1a:	68db      	ldr	r3, [r3, #12]
 8002d1c:	0a1b      	lsrs	r3, r3, #8
 8002d1e:	f003 0307 	and.w	r3, r3, #7
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	46bd      	mov	sp, r7
 8002d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2a:	4770      	bx	lr
 8002d2c:	e000ed00 	.word	0xe000ed00

08002d30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b083      	sub	sp, #12
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	4603      	mov	r3, r0
 8002d38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	db0b      	blt.n	8002d5a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d42:	79fb      	ldrb	r3, [r7, #7]
 8002d44:	f003 021f 	and.w	r2, r3, #31
 8002d48:	4907      	ldr	r1, [pc, #28]	@ (8002d68 <__NVIC_EnableIRQ+0x38>)
 8002d4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d4e:	095b      	lsrs	r3, r3, #5
 8002d50:	2001      	movs	r0, #1
 8002d52:	fa00 f202 	lsl.w	r2, r0, r2
 8002d56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002d5a:	bf00      	nop
 8002d5c:	370c      	adds	r7, #12
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d64:	4770      	bx	lr
 8002d66:	bf00      	nop
 8002d68:	e000e100 	.word	0xe000e100

08002d6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b083      	sub	sp, #12
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	4603      	mov	r3, r0
 8002d74:	6039      	str	r1, [r7, #0]
 8002d76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	db0a      	blt.n	8002d96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	b2da      	uxtb	r2, r3
 8002d84:	490c      	ldr	r1, [pc, #48]	@ (8002db8 <__NVIC_SetPriority+0x4c>)
 8002d86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d8a:	0112      	lsls	r2, r2, #4
 8002d8c:	b2d2      	uxtb	r2, r2
 8002d8e:	440b      	add	r3, r1
 8002d90:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d94:	e00a      	b.n	8002dac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	b2da      	uxtb	r2, r3
 8002d9a:	4908      	ldr	r1, [pc, #32]	@ (8002dbc <__NVIC_SetPriority+0x50>)
 8002d9c:	79fb      	ldrb	r3, [r7, #7]
 8002d9e:	f003 030f 	and.w	r3, r3, #15
 8002da2:	3b04      	subs	r3, #4
 8002da4:	0112      	lsls	r2, r2, #4
 8002da6:	b2d2      	uxtb	r2, r2
 8002da8:	440b      	add	r3, r1
 8002daa:	761a      	strb	r2, [r3, #24]
}
 8002dac:	bf00      	nop
 8002dae:	370c      	adds	r7, #12
 8002db0:	46bd      	mov	sp, r7
 8002db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db6:	4770      	bx	lr
 8002db8:	e000e100 	.word	0xe000e100
 8002dbc:	e000ed00 	.word	0xe000ed00

08002dc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b089      	sub	sp, #36	@ 0x24
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	60f8      	str	r0, [r7, #12]
 8002dc8:	60b9      	str	r1, [r7, #8]
 8002dca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	f003 0307 	and.w	r3, r3, #7
 8002dd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002dd4:	69fb      	ldr	r3, [r7, #28]
 8002dd6:	f1c3 0307 	rsb	r3, r3, #7
 8002dda:	2b04      	cmp	r3, #4
 8002ddc:	bf28      	it	cs
 8002dde:	2304      	movcs	r3, #4
 8002de0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002de2:	69fb      	ldr	r3, [r7, #28]
 8002de4:	3304      	adds	r3, #4
 8002de6:	2b06      	cmp	r3, #6
 8002de8:	d902      	bls.n	8002df0 <NVIC_EncodePriority+0x30>
 8002dea:	69fb      	ldr	r3, [r7, #28]
 8002dec:	3b03      	subs	r3, #3
 8002dee:	e000      	b.n	8002df2 <NVIC_EncodePriority+0x32>
 8002df0:	2300      	movs	r3, #0
 8002df2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002df4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002df8:	69bb      	ldr	r3, [r7, #24]
 8002dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfe:	43da      	mvns	r2, r3
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	401a      	ands	r2, r3
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e08:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	fa01 f303 	lsl.w	r3, r1, r3
 8002e12:	43d9      	mvns	r1, r3
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e18:	4313      	orrs	r3, r2
         );
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	3724      	adds	r7, #36	@ 0x24
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e24:	4770      	bx	lr

08002e26 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e26:	b580      	push	{r7, lr}
 8002e28:	b082      	sub	sp, #8
 8002e2a:	af00      	add	r7, sp, #0
 8002e2c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e2e:	6878      	ldr	r0, [r7, #4]
 8002e30:	f7ff ff4c 	bl	8002ccc <__NVIC_SetPriorityGrouping>
}
 8002e34:	bf00      	nop
 8002e36:	3708      	adds	r7, #8
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bd80      	pop	{r7, pc}

08002e3c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b086      	sub	sp, #24
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	4603      	mov	r3, r0
 8002e44:	60b9      	str	r1, [r7, #8]
 8002e46:	607a      	str	r2, [r7, #4]
 8002e48:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e4e:	f7ff ff61 	bl	8002d14 <__NVIC_GetPriorityGrouping>
 8002e52:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e54:	687a      	ldr	r2, [r7, #4]
 8002e56:	68b9      	ldr	r1, [r7, #8]
 8002e58:	6978      	ldr	r0, [r7, #20]
 8002e5a:	f7ff ffb1 	bl	8002dc0 <NVIC_EncodePriority>
 8002e5e:	4602      	mov	r2, r0
 8002e60:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e64:	4611      	mov	r1, r2
 8002e66:	4618      	mov	r0, r3
 8002e68:	f7ff ff80 	bl	8002d6c <__NVIC_SetPriority>
}
 8002e6c:	bf00      	nop
 8002e6e:	3718      	adds	r7, #24
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd80      	pop	{r7, pc}

08002e74 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b082      	sub	sp, #8
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e82:	4618      	mov	r0, r3
 8002e84:	f7ff ff54 	bl	8002d30 <__NVIC_EnableIRQ>
}
 8002e88:	bf00      	nop
 8002e8a:	3708      	adds	r7, #8
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd80      	pop	{r7, pc}

08002e90 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b086      	sub	sp, #24
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002e9c:	f7ff f818 	bl	8001ed0 <HAL_GetTick>
 8002ea0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d101      	bne.n	8002eac <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	e099      	b.n	8002fe0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2202      	movs	r2, #2
 8002eb0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	681a      	ldr	r2, [r3, #0]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f022 0201 	bic.w	r2, r2, #1
 8002eca:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ecc:	e00f      	b.n	8002eee <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002ece:	f7fe ffff 	bl	8001ed0 <HAL_GetTick>
 8002ed2:	4602      	mov	r2, r0
 8002ed4:	693b      	ldr	r3, [r7, #16]
 8002ed6:	1ad3      	subs	r3, r2, r3
 8002ed8:	2b05      	cmp	r3, #5
 8002eda:	d908      	bls.n	8002eee <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2220      	movs	r2, #32
 8002ee0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2203      	movs	r2, #3
 8002ee6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002eea:	2303      	movs	r3, #3
 8002eec:	e078      	b.n	8002fe0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f003 0301 	and.w	r3, r3, #1
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d1e8      	bne.n	8002ece <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002f04:	697a      	ldr	r2, [r7, #20]
 8002f06:	4b38      	ldr	r3, [pc, #224]	@ (8002fe8 <HAL_DMA_Init+0x158>)
 8002f08:	4013      	ands	r3, r2
 8002f0a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	685a      	ldr	r2, [r3, #4]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f1a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	691b      	ldr	r3, [r3, #16]
 8002f20:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f26:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	699b      	ldr	r3, [r3, #24]
 8002f2c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f32:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6a1b      	ldr	r3, [r3, #32]
 8002f38:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f3a:	697a      	ldr	r2, [r7, #20]
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f44:	2b04      	cmp	r3, #4
 8002f46:	d107      	bne.n	8002f58 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f50:	4313      	orrs	r3, r2
 8002f52:	697a      	ldr	r2, [r7, #20]
 8002f54:	4313      	orrs	r3, r2
 8002f56:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	697a      	ldr	r2, [r7, #20]
 8002f5e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	695b      	ldr	r3, [r3, #20]
 8002f66:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	f023 0307 	bic.w	r3, r3, #7
 8002f6e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f74:	697a      	ldr	r2, [r7, #20]
 8002f76:	4313      	orrs	r3, r2
 8002f78:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f7e:	2b04      	cmp	r3, #4
 8002f80:	d117      	bne.n	8002fb2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f86:	697a      	ldr	r2, [r7, #20]
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d00e      	beq.n	8002fb2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002f94:	6878      	ldr	r0, [r7, #4]
 8002f96:	f000 fa7b 	bl	8003490 <DMA_CheckFifoParam>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d008      	beq.n	8002fb2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2240      	movs	r2, #64	@ 0x40
 8002fa4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2201      	movs	r2, #1
 8002faa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e016      	b.n	8002fe0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	697a      	ldr	r2, [r7, #20]
 8002fb8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002fba:	6878      	ldr	r0, [r7, #4]
 8002fbc:	f000 fa32 	bl	8003424 <DMA_CalcBaseAndBitshift>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fc8:	223f      	movs	r2, #63	@ 0x3f
 8002fca:	409a      	lsls	r2, r3
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2201      	movs	r2, #1
 8002fda:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002fde:	2300      	movs	r3, #0
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	3718      	adds	r7, #24
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}
 8002fe8:	f010803f 	.word	0xf010803f

08002fec <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b084      	sub	sp, #16
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ff8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002ffa:	f7fe ff69 	bl	8001ed0 <HAL_GetTick>
 8002ffe:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003006:	b2db      	uxtb	r3, r3
 8003008:	2b02      	cmp	r3, #2
 800300a:	d008      	beq.n	800301e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2280      	movs	r2, #128	@ 0x80
 8003010:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2200      	movs	r2, #0
 8003016:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e052      	b.n	80030c4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	681a      	ldr	r2, [r3, #0]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f022 0216 	bic.w	r2, r2, #22
 800302c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	695a      	ldr	r2, [r3, #20]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800303c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003042:	2b00      	cmp	r3, #0
 8003044:	d103      	bne.n	800304e <HAL_DMA_Abort+0x62>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800304a:	2b00      	cmp	r3, #0
 800304c:	d007      	beq.n	800305e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	681a      	ldr	r2, [r3, #0]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f022 0208 	bic.w	r2, r2, #8
 800305c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	681a      	ldr	r2, [r3, #0]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f022 0201 	bic.w	r2, r2, #1
 800306c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800306e:	e013      	b.n	8003098 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003070:	f7fe ff2e 	bl	8001ed0 <HAL_GetTick>
 8003074:	4602      	mov	r2, r0
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	1ad3      	subs	r3, r2, r3
 800307a:	2b05      	cmp	r3, #5
 800307c:	d90c      	bls.n	8003098 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2220      	movs	r2, #32
 8003082:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2203      	movs	r2, #3
 8003088:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2200      	movs	r2, #0
 8003090:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003094:	2303      	movs	r3, #3
 8003096:	e015      	b.n	80030c4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 0301 	and.w	r3, r3, #1
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d1e4      	bne.n	8003070 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030aa:	223f      	movs	r2, #63	@ 0x3f
 80030ac:	409a      	lsls	r2, r3
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2201      	movs	r2, #1
 80030b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2200      	movs	r2, #0
 80030be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80030c2:	2300      	movs	r3, #0
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	3710      	adds	r7, #16
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}

080030cc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b083      	sub	sp, #12
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80030da:	b2db      	uxtb	r3, r3
 80030dc:	2b02      	cmp	r3, #2
 80030de:	d004      	beq.n	80030ea <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2280      	movs	r2, #128	@ 0x80
 80030e4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	e00c      	b.n	8003104 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2205      	movs	r2, #5
 80030ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	681a      	ldr	r2, [r3, #0]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f022 0201 	bic.w	r2, r2, #1
 8003100:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003102:	2300      	movs	r3, #0
}
 8003104:	4618      	mov	r0, r3
 8003106:	370c      	adds	r7, #12
 8003108:	46bd      	mov	sp, r7
 800310a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310e:	4770      	bx	lr

08003110 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b086      	sub	sp, #24
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003118:	2300      	movs	r3, #0
 800311a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800311c:	4b8e      	ldr	r3, [pc, #568]	@ (8003358 <HAL_DMA_IRQHandler+0x248>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a8e      	ldr	r2, [pc, #568]	@ (800335c <HAL_DMA_IRQHandler+0x24c>)
 8003122:	fba2 2303 	umull	r2, r3, r2, r3
 8003126:	0a9b      	lsrs	r3, r3, #10
 8003128:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800312e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800313a:	2208      	movs	r2, #8
 800313c:	409a      	lsls	r2, r3
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	4013      	ands	r3, r2
 8003142:	2b00      	cmp	r3, #0
 8003144:	d01a      	beq.n	800317c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f003 0304 	and.w	r3, r3, #4
 8003150:	2b00      	cmp	r3, #0
 8003152:	d013      	beq.n	800317c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	681a      	ldr	r2, [r3, #0]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f022 0204 	bic.w	r2, r2, #4
 8003162:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003168:	2208      	movs	r2, #8
 800316a:	409a      	lsls	r2, r3
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003174:	f043 0201 	orr.w	r2, r3, #1
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003180:	2201      	movs	r2, #1
 8003182:	409a      	lsls	r2, r3
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	4013      	ands	r3, r2
 8003188:	2b00      	cmp	r3, #0
 800318a:	d012      	beq.n	80031b2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	695b      	ldr	r3, [r3, #20]
 8003192:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003196:	2b00      	cmp	r3, #0
 8003198:	d00b      	beq.n	80031b2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800319e:	2201      	movs	r2, #1
 80031a0:	409a      	lsls	r2, r3
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031aa:	f043 0202 	orr.w	r2, r3, #2
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031b6:	2204      	movs	r2, #4
 80031b8:	409a      	lsls	r2, r3
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	4013      	ands	r3, r2
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d012      	beq.n	80031e8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f003 0302 	and.w	r3, r3, #2
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d00b      	beq.n	80031e8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031d4:	2204      	movs	r2, #4
 80031d6:	409a      	lsls	r2, r3
 80031d8:	693b      	ldr	r3, [r7, #16]
 80031da:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031e0:	f043 0204 	orr.w	r2, r3, #4
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031ec:	2210      	movs	r2, #16
 80031ee:	409a      	lsls	r2, r3
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	4013      	ands	r3, r2
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d043      	beq.n	8003280 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f003 0308 	and.w	r3, r3, #8
 8003202:	2b00      	cmp	r3, #0
 8003204:	d03c      	beq.n	8003280 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800320a:	2210      	movs	r2, #16
 800320c:	409a      	lsls	r2, r3
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800321c:	2b00      	cmp	r3, #0
 800321e:	d018      	beq.n	8003252 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800322a:	2b00      	cmp	r3, #0
 800322c:	d108      	bne.n	8003240 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003232:	2b00      	cmp	r3, #0
 8003234:	d024      	beq.n	8003280 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800323a:	6878      	ldr	r0, [r7, #4]
 800323c:	4798      	blx	r3
 800323e:	e01f      	b.n	8003280 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003244:	2b00      	cmp	r3, #0
 8003246:	d01b      	beq.n	8003280 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800324c:	6878      	ldr	r0, [r7, #4]
 800324e:	4798      	blx	r3
 8003250:	e016      	b.n	8003280 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800325c:	2b00      	cmp	r3, #0
 800325e:	d107      	bne.n	8003270 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	681a      	ldr	r2, [r3, #0]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f022 0208 	bic.w	r2, r2, #8
 800326e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003274:	2b00      	cmp	r3, #0
 8003276:	d003      	beq.n	8003280 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800327c:	6878      	ldr	r0, [r7, #4]
 800327e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003284:	2220      	movs	r2, #32
 8003286:	409a      	lsls	r2, r3
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	4013      	ands	r3, r2
 800328c:	2b00      	cmp	r3, #0
 800328e:	f000 808f 	beq.w	80033b0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f003 0310 	and.w	r3, r3, #16
 800329c:	2b00      	cmp	r3, #0
 800329e:	f000 8087 	beq.w	80033b0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032a6:	2220      	movs	r2, #32
 80032a8:	409a      	lsls	r2, r3
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80032b4:	b2db      	uxtb	r3, r3
 80032b6:	2b05      	cmp	r3, #5
 80032b8:	d136      	bne.n	8003328 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	681a      	ldr	r2, [r3, #0]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f022 0216 	bic.w	r2, r2, #22
 80032c8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	695a      	ldr	r2, [r3, #20]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80032d8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d103      	bne.n	80032ea <HAL_DMA_IRQHandler+0x1da>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d007      	beq.n	80032fa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	681a      	ldr	r2, [r3, #0]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f022 0208 	bic.w	r2, r2, #8
 80032f8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032fe:	223f      	movs	r2, #63	@ 0x3f
 8003300:	409a      	lsls	r2, r3
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2201      	movs	r2, #1
 800330a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2200      	movs	r2, #0
 8003312:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800331a:	2b00      	cmp	r3, #0
 800331c:	d07e      	beq.n	800341c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003322:	6878      	ldr	r0, [r7, #4]
 8003324:	4798      	blx	r3
        }
        return;
 8003326:	e079      	b.n	800341c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003332:	2b00      	cmp	r3, #0
 8003334:	d01d      	beq.n	8003372 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003340:	2b00      	cmp	r3, #0
 8003342:	d10d      	bne.n	8003360 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003348:	2b00      	cmp	r3, #0
 800334a:	d031      	beq.n	80033b0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003350:	6878      	ldr	r0, [r7, #4]
 8003352:	4798      	blx	r3
 8003354:	e02c      	b.n	80033b0 <HAL_DMA_IRQHandler+0x2a0>
 8003356:	bf00      	nop
 8003358:	20000000 	.word	0x20000000
 800335c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003364:	2b00      	cmp	r3, #0
 8003366:	d023      	beq.n	80033b0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800336c:	6878      	ldr	r0, [r7, #4]
 800336e:	4798      	blx	r3
 8003370:	e01e      	b.n	80033b0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800337c:	2b00      	cmp	r3, #0
 800337e:	d10f      	bne.n	80033a0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	681a      	ldr	r2, [r3, #0]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f022 0210 	bic.w	r2, r2, #16
 800338e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2201      	movs	r2, #1
 8003394:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2200      	movs	r2, #0
 800339c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d003      	beq.n	80033b0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033ac:	6878      	ldr	r0, [r7, #4]
 80033ae:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d032      	beq.n	800341e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033bc:	f003 0301 	and.w	r3, r3, #1
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d022      	beq.n	800340a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2205      	movs	r2, #5
 80033c8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	681a      	ldr	r2, [r3, #0]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f022 0201 	bic.w	r2, r2, #1
 80033da:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	3301      	adds	r3, #1
 80033e0:	60bb      	str	r3, [r7, #8]
 80033e2:	697a      	ldr	r2, [r7, #20]
 80033e4:	429a      	cmp	r2, r3
 80033e6:	d307      	bcc.n	80033f8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 0301 	and.w	r3, r3, #1
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d1f2      	bne.n	80033dc <HAL_DMA_IRQHandler+0x2cc>
 80033f6:	e000      	b.n	80033fa <HAL_DMA_IRQHandler+0x2ea>
          break;
 80033f8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2201      	movs	r2, #1
 80033fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2200      	movs	r2, #0
 8003406:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800340e:	2b00      	cmp	r3, #0
 8003410:	d005      	beq.n	800341e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	4798      	blx	r3
 800341a:	e000      	b.n	800341e <HAL_DMA_IRQHandler+0x30e>
        return;
 800341c:	bf00      	nop
    }
  }
}
 800341e:	3718      	adds	r7, #24
 8003420:	46bd      	mov	sp, r7
 8003422:	bd80      	pop	{r7, pc}

08003424 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003424:	b480      	push	{r7}
 8003426:	b085      	sub	sp, #20
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	b2db      	uxtb	r3, r3
 8003432:	3b10      	subs	r3, #16
 8003434:	4a14      	ldr	r2, [pc, #80]	@ (8003488 <DMA_CalcBaseAndBitshift+0x64>)
 8003436:	fba2 2303 	umull	r2, r3, r2, r3
 800343a:	091b      	lsrs	r3, r3, #4
 800343c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800343e:	4a13      	ldr	r2, [pc, #76]	@ (800348c <DMA_CalcBaseAndBitshift+0x68>)
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	4413      	add	r3, r2
 8003444:	781b      	ldrb	r3, [r3, #0]
 8003446:	461a      	mov	r2, r3
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	2b03      	cmp	r3, #3
 8003450:	d909      	bls.n	8003466 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800345a:	f023 0303 	bic.w	r3, r3, #3
 800345e:	1d1a      	adds	r2, r3, #4
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	659a      	str	r2, [r3, #88]	@ 0x58
 8003464:	e007      	b.n	8003476 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800346e:	f023 0303 	bic.w	r3, r3, #3
 8003472:	687a      	ldr	r2, [r7, #4]
 8003474:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800347a:	4618      	mov	r0, r3
 800347c:	3714      	adds	r7, #20
 800347e:	46bd      	mov	sp, r7
 8003480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003484:	4770      	bx	lr
 8003486:	bf00      	nop
 8003488:	aaaaaaab 	.word	0xaaaaaaab
 800348c:	0800deb4 	.word	0x0800deb4

08003490 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003490:	b480      	push	{r7}
 8003492:	b085      	sub	sp, #20
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003498:	2300      	movs	r3, #0
 800349a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034a0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	699b      	ldr	r3, [r3, #24]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d11f      	bne.n	80034ea <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	2b03      	cmp	r3, #3
 80034ae:	d856      	bhi.n	800355e <DMA_CheckFifoParam+0xce>
 80034b0:	a201      	add	r2, pc, #4	@ (adr r2, 80034b8 <DMA_CheckFifoParam+0x28>)
 80034b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034b6:	bf00      	nop
 80034b8:	080034c9 	.word	0x080034c9
 80034bc:	080034db 	.word	0x080034db
 80034c0:	080034c9 	.word	0x080034c9
 80034c4:	0800355f 	.word	0x0800355f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034cc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d046      	beq.n	8003562 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80034d4:	2301      	movs	r3, #1
 80034d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034d8:	e043      	b.n	8003562 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034de:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80034e2:	d140      	bne.n	8003566 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80034e4:	2301      	movs	r3, #1
 80034e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034e8:	e03d      	b.n	8003566 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	699b      	ldr	r3, [r3, #24]
 80034ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80034f2:	d121      	bne.n	8003538 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	2b03      	cmp	r3, #3
 80034f8:	d837      	bhi.n	800356a <DMA_CheckFifoParam+0xda>
 80034fa:	a201      	add	r2, pc, #4	@ (adr r2, 8003500 <DMA_CheckFifoParam+0x70>)
 80034fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003500:	08003511 	.word	0x08003511
 8003504:	08003517 	.word	0x08003517
 8003508:	08003511 	.word	0x08003511
 800350c:	08003529 	.word	0x08003529
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003510:	2301      	movs	r3, #1
 8003512:	73fb      	strb	r3, [r7, #15]
      break;
 8003514:	e030      	b.n	8003578 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800351a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800351e:	2b00      	cmp	r3, #0
 8003520:	d025      	beq.n	800356e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003522:	2301      	movs	r3, #1
 8003524:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003526:	e022      	b.n	800356e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800352c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003530:	d11f      	bne.n	8003572 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003536:	e01c      	b.n	8003572 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	2b02      	cmp	r3, #2
 800353c:	d903      	bls.n	8003546 <DMA_CheckFifoParam+0xb6>
 800353e:	68bb      	ldr	r3, [r7, #8]
 8003540:	2b03      	cmp	r3, #3
 8003542:	d003      	beq.n	800354c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003544:	e018      	b.n	8003578 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003546:	2301      	movs	r3, #1
 8003548:	73fb      	strb	r3, [r7, #15]
      break;
 800354a:	e015      	b.n	8003578 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003550:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003554:	2b00      	cmp	r3, #0
 8003556:	d00e      	beq.n	8003576 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003558:	2301      	movs	r3, #1
 800355a:	73fb      	strb	r3, [r7, #15]
      break;
 800355c:	e00b      	b.n	8003576 <DMA_CheckFifoParam+0xe6>
      break;
 800355e:	bf00      	nop
 8003560:	e00a      	b.n	8003578 <DMA_CheckFifoParam+0xe8>
      break;
 8003562:	bf00      	nop
 8003564:	e008      	b.n	8003578 <DMA_CheckFifoParam+0xe8>
      break;
 8003566:	bf00      	nop
 8003568:	e006      	b.n	8003578 <DMA_CheckFifoParam+0xe8>
      break;
 800356a:	bf00      	nop
 800356c:	e004      	b.n	8003578 <DMA_CheckFifoParam+0xe8>
      break;
 800356e:	bf00      	nop
 8003570:	e002      	b.n	8003578 <DMA_CheckFifoParam+0xe8>
      break;   
 8003572:	bf00      	nop
 8003574:	e000      	b.n	8003578 <DMA_CheckFifoParam+0xe8>
      break;
 8003576:	bf00      	nop
    }
  } 
  
  return status; 
 8003578:	7bfb      	ldrb	r3, [r7, #15]
}
 800357a:	4618      	mov	r0, r3
 800357c:	3714      	adds	r7, #20
 800357e:	46bd      	mov	sp, r7
 8003580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003584:	4770      	bx	lr
 8003586:	bf00      	nop

08003588 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003588:	b480      	push	{r7}
 800358a:	b089      	sub	sp, #36	@ 0x24
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
 8003590:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003592:	2300      	movs	r3, #0
 8003594:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003596:	2300      	movs	r3, #0
 8003598:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800359a:	2300      	movs	r3, #0
 800359c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800359e:	2300      	movs	r3, #0
 80035a0:	61fb      	str	r3, [r7, #28]
 80035a2:	e16b      	b.n	800387c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80035a4:	2201      	movs	r2, #1
 80035a6:	69fb      	ldr	r3, [r7, #28]
 80035a8:	fa02 f303 	lsl.w	r3, r2, r3
 80035ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	697a      	ldr	r2, [r7, #20]
 80035b4:	4013      	ands	r3, r2
 80035b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80035b8:	693a      	ldr	r2, [r7, #16]
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	429a      	cmp	r2, r3
 80035be:	f040 815a 	bne.w	8003876 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	f003 0303 	and.w	r3, r3, #3
 80035ca:	2b01      	cmp	r3, #1
 80035cc:	d005      	beq.n	80035da <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80035d6:	2b02      	cmp	r3, #2
 80035d8:	d130      	bne.n	800363c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	689b      	ldr	r3, [r3, #8]
 80035de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80035e0:	69fb      	ldr	r3, [r7, #28]
 80035e2:	005b      	lsls	r3, r3, #1
 80035e4:	2203      	movs	r2, #3
 80035e6:	fa02 f303 	lsl.w	r3, r2, r3
 80035ea:	43db      	mvns	r3, r3
 80035ec:	69ba      	ldr	r2, [r7, #24]
 80035ee:	4013      	ands	r3, r2
 80035f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	68da      	ldr	r2, [r3, #12]
 80035f6:	69fb      	ldr	r3, [r7, #28]
 80035f8:	005b      	lsls	r3, r3, #1
 80035fa:	fa02 f303 	lsl.w	r3, r2, r3
 80035fe:	69ba      	ldr	r2, [r7, #24]
 8003600:	4313      	orrs	r3, r2
 8003602:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	69ba      	ldr	r2, [r7, #24]
 8003608:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003610:	2201      	movs	r2, #1
 8003612:	69fb      	ldr	r3, [r7, #28]
 8003614:	fa02 f303 	lsl.w	r3, r2, r3
 8003618:	43db      	mvns	r3, r3
 800361a:	69ba      	ldr	r2, [r7, #24]
 800361c:	4013      	ands	r3, r2
 800361e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	091b      	lsrs	r3, r3, #4
 8003626:	f003 0201 	and.w	r2, r3, #1
 800362a:	69fb      	ldr	r3, [r7, #28]
 800362c:	fa02 f303 	lsl.w	r3, r2, r3
 8003630:	69ba      	ldr	r2, [r7, #24]
 8003632:	4313      	orrs	r3, r2
 8003634:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	69ba      	ldr	r2, [r7, #24]
 800363a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	f003 0303 	and.w	r3, r3, #3
 8003644:	2b03      	cmp	r3, #3
 8003646:	d017      	beq.n	8003678 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	68db      	ldr	r3, [r3, #12]
 800364c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800364e:	69fb      	ldr	r3, [r7, #28]
 8003650:	005b      	lsls	r3, r3, #1
 8003652:	2203      	movs	r2, #3
 8003654:	fa02 f303 	lsl.w	r3, r2, r3
 8003658:	43db      	mvns	r3, r3
 800365a:	69ba      	ldr	r2, [r7, #24]
 800365c:	4013      	ands	r3, r2
 800365e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	689a      	ldr	r2, [r3, #8]
 8003664:	69fb      	ldr	r3, [r7, #28]
 8003666:	005b      	lsls	r3, r3, #1
 8003668:	fa02 f303 	lsl.w	r3, r2, r3
 800366c:	69ba      	ldr	r2, [r7, #24]
 800366e:	4313      	orrs	r3, r2
 8003670:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	69ba      	ldr	r2, [r7, #24]
 8003676:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	f003 0303 	and.w	r3, r3, #3
 8003680:	2b02      	cmp	r3, #2
 8003682:	d123      	bne.n	80036cc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003684:	69fb      	ldr	r3, [r7, #28]
 8003686:	08da      	lsrs	r2, r3, #3
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	3208      	adds	r2, #8
 800368c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003690:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003692:	69fb      	ldr	r3, [r7, #28]
 8003694:	f003 0307 	and.w	r3, r3, #7
 8003698:	009b      	lsls	r3, r3, #2
 800369a:	220f      	movs	r2, #15
 800369c:	fa02 f303 	lsl.w	r3, r2, r3
 80036a0:	43db      	mvns	r3, r3
 80036a2:	69ba      	ldr	r2, [r7, #24]
 80036a4:	4013      	ands	r3, r2
 80036a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	691a      	ldr	r2, [r3, #16]
 80036ac:	69fb      	ldr	r3, [r7, #28]
 80036ae:	f003 0307 	and.w	r3, r3, #7
 80036b2:	009b      	lsls	r3, r3, #2
 80036b4:	fa02 f303 	lsl.w	r3, r2, r3
 80036b8:	69ba      	ldr	r2, [r7, #24]
 80036ba:	4313      	orrs	r3, r2
 80036bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80036be:	69fb      	ldr	r3, [r7, #28]
 80036c0:	08da      	lsrs	r2, r3, #3
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	3208      	adds	r2, #8
 80036c6:	69b9      	ldr	r1, [r7, #24]
 80036c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80036d2:	69fb      	ldr	r3, [r7, #28]
 80036d4:	005b      	lsls	r3, r3, #1
 80036d6:	2203      	movs	r2, #3
 80036d8:	fa02 f303 	lsl.w	r3, r2, r3
 80036dc:	43db      	mvns	r3, r3
 80036de:	69ba      	ldr	r2, [r7, #24]
 80036e0:	4013      	ands	r3, r2
 80036e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	f003 0203 	and.w	r2, r3, #3
 80036ec:	69fb      	ldr	r3, [r7, #28]
 80036ee:	005b      	lsls	r3, r3, #1
 80036f0:	fa02 f303 	lsl.w	r3, r2, r3
 80036f4:	69ba      	ldr	r2, [r7, #24]
 80036f6:	4313      	orrs	r3, r2
 80036f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	69ba      	ldr	r2, [r7, #24]
 80036fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003708:	2b00      	cmp	r3, #0
 800370a:	f000 80b4 	beq.w	8003876 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800370e:	2300      	movs	r3, #0
 8003710:	60fb      	str	r3, [r7, #12]
 8003712:	4b60      	ldr	r3, [pc, #384]	@ (8003894 <HAL_GPIO_Init+0x30c>)
 8003714:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003716:	4a5f      	ldr	r2, [pc, #380]	@ (8003894 <HAL_GPIO_Init+0x30c>)
 8003718:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800371c:	6453      	str	r3, [r2, #68]	@ 0x44
 800371e:	4b5d      	ldr	r3, [pc, #372]	@ (8003894 <HAL_GPIO_Init+0x30c>)
 8003720:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003722:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003726:	60fb      	str	r3, [r7, #12]
 8003728:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800372a:	4a5b      	ldr	r2, [pc, #364]	@ (8003898 <HAL_GPIO_Init+0x310>)
 800372c:	69fb      	ldr	r3, [r7, #28]
 800372e:	089b      	lsrs	r3, r3, #2
 8003730:	3302      	adds	r3, #2
 8003732:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003736:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003738:	69fb      	ldr	r3, [r7, #28]
 800373a:	f003 0303 	and.w	r3, r3, #3
 800373e:	009b      	lsls	r3, r3, #2
 8003740:	220f      	movs	r2, #15
 8003742:	fa02 f303 	lsl.w	r3, r2, r3
 8003746:	43db      	mvns	r3, r3
 8003748:	69ba      	ldr	r2, [r7, #24]
 800374a:	4013      	ands	r3, r2
 800374c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	4a52      	ldr	r2, [pc, #328]	@ (800389c <HAL_GPIO_Init+0x314>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d02b      	beq.n	80037ae <HAL_GPIO_Init+0x226>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	4a51      	ldr	r2, [pc, #324]	@ (80038a0 <HAL_GPIO_Init+0x318>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d025      	beq.n	80037aa <HAL_GPIO_Init+0x222>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	4a50      	ldr	r2, [pc, #320]	@ (80038a4 <HAL_GPIO_Init+0x31c>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d01f      	beq.n	80037a6 <HAL_GPIO_Init+0x21e>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	4a4f      	ldr	r2, [pc, #316]	@ (80038a8 <HAL_GPIO_Init+0x320>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d019      	beq.n	80037a2 <HAL_GPIO_Init+0x21a>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	4a4e      	ldr	r2, [pc, #312]	@ (80038ac <HAL_GPIO_Init+0x324>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d013      	beq.n	800379e <HAL_GPIO_Init+0x216>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	4a4d      	ldr	r2, [pc, #308]	@ (80038b0 <HAL_GPIO_Init+0x328>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d00d      	beq.n	800379a <HAL_GPIO_Init+0x212>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	4a4c      	ldr	r2, [pc, #304]	@ (80038b4 <HAL_GPIO_Init+0x32c>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d007      	beq.n	8003796 <HAL_GPIO_Init+0x20e>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	4a4b      	ldr	r2, [pc, #300]	@ (80038b8 <HAL_GPIO_Init+0x330>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d101      	bne.n	8003792 <HAL_GPIO_Init+0x20a>
 800378e:	2307      	movs	r3, #7
 8003790:	e00e      	b.n	80037b0 <HAL_GPIO_Init+0x228>
 8003792:	2308      	movs	r3, #8
 8003794:	e00c      	b.n	80037b0 <HAL_GPIO_Init+0x228>
 8003796:	2306      	movs	r3, #6
 8003798:	e00a      	b.n	80037b0 <HAL_GPIO_Init+0x228>
 800379a:	2305      	movs	r3, #5
 800379c:	e008      	b.n	80037b0 <HAL_GPIO_Init+0x228>
 800379e:	2304      	movs	r3, #4
 80037a0:	e006      	b.n	80037b0 <HAL_GPIO_Init+0x228>
 80037a2:	2303      	movs	r3, #3
 80037a4:	e004      	b.n	80037b0 <HAL_GPIO_Init+0x228>
 80037a6:	2302      	movs	r3, #2
 80037a8:	e002      	b.n	80037b0 <HAL_GPIO_Init+0x228>
 80037aa:	2301      	movs	r3, #1
 80037ac:	e000      	b.n	80037b0 <HAL_GPIO_Init+0x228>
 80037ae:	2300      	movs	r3, #0
 80037b0:	69fa      	ldr	r2, [r7, #28]
 80037b2:	f002 0203 	and.w	r2, r2, #3
 80037b6:	0092      	lsls	r2, r2, #2
 80037b8:	4093      	lsls	r3, r2
 80037ba:	69ba      	ldr	r2, [r7, #24]
 80037bc:	4313      	orrs	r3, r2
 80037be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80037c0:	4935      	ldr	r1, [pc, #212]	@ (8003898 <HAL_GPIO_Init+0x310>)
 80037c2:	69fb      	ldr	r3, [r7, #28]
 80037c4:	089b      	lsrs	r3, r3, #2
 80037c6:	3302      	adds	r3, #2
 80037c8:	69ba      	ldr	r2, [r7, #24]
 80037ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80037ce:	4b3b      	ldr	r3, [pc, #236]	@ (80038bc <HAL_GPIO_Init+0x334>)
 80037d0:	689b      	ldr	r3, [r3, #8]
 80037d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037d4:	693b      	ldr	r3, [r7, #16]
 80037d6:	43db      	mvns	r3, r3
 80037d8:	69ba      	ldr	r2, [r7, #24]
 80037da:	4013      	ands	r3, r2
 80037dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d003      	beq.n	80037f2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80037ea:	69ba      	ldr	r2, [r7, #24]
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	4313      	orrs	r3, r2
 80037f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80037f2:	4a32      	ldr	r2, [pc, #200]	@ (80038bc <HAL_GPIO_Init+0x334>)
 80037f4:	69bb      	ldr	r3, [r7, #24]
 80037f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80037f8:	4b30      	ldr	r3, [pc, #192]	@ (80038bc <HAL_GPIO_Init+0x334>)
 80037fa:	68db      	ldr	r3, [r3, #12]
 80037fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	43db      	mvns	r3, r3
 8003802:	69ba      	ldr	r2, [r7, #24]
 8003804:	4013      	ands	r3, r2
 8003806:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003810:	2b00      	cmp	r3, #0
 8003812:	d003      	beq.n	800381c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003814:	69ba      	ldr	r2, [r7, #24]
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	4313      	orrs	r3, r2
 800381a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800381c:	4a27      	ldr	r2, [pc, #156]	@ (80038bc <HAL_GPIO_Init+0x334>)
 800381e:	69bb      	ldr	r3, [r7, #24]
 8003820:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003822:	4b26      	ldr	r3, [pc, #152]	@ (80038bc <HAL_GPIO_Init+0x334>)
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	43db      	mvns	r3, r3
 800382c:	69ba      	ldr	r2, [r7, #24]
 800382e:	4013      	ands	r3, r2
 8003830:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800383a:	2b00      	cmp	r3, #0
 800383c:	d003      	beq.n	8003846 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800383e:	69ba      	ldr	r2, [r7, #24]
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	4313      	orrs	r3, r2
 8003844:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003846:	4a1d      	ldr	r2, [pc, #116]	@ (80038bc <HAL_GPIO_Init+0x334>)
 8003848:	69bb      	ldr	r3, [r7, #24]
 800384a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800384c:	4b1b      	ldr	r3, [pc, #108]	@ (80038bc <HAL_GPIO_Init+0x334>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	43db      	mvns	r3, r3
 8003856:	69ba      	ldr	r2, [r7, #24]
 8003858:	4013      	ands	r3, r2
 800385a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003864:	2b00      	cmp	r3, #0
 8003866:	d003      	beq.n	8003870 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003868:	69ba      	ldr	r2, [r7, #24]
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	4313      	orrs	r3, r2
 800386e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003870:	4a12      	ldr	r2, [pc, #72]	@ (80038bc <HAL_GPIO_Init+0x334>)
 8003872:	69bb      	ldr	r3, [r7, #24]
 8003874:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003876:	69fb      	ldr	r3, [r7, #28]
 8003878:	3301      	adds	r3, #1
 800387a:	61fb      	str	r3, [r7, #28]
 800387c:	69fb      	ldr	r3, [r7, #28]
 800387e:	2b0f      	cmp	r3, #15
 8003880:	f67f ae90 	bls.w	80035a4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003884:	bf00      	nop
 8003886:	bf00      	nop
 8003888:	3724      	adds	r7, #36	@ 0x24
 800388a:	46bd      	mov	sp, r7
 800388c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003890:	4770      	bx	lr
 8003892:	bf00      	nop
 8003894:	40023800 	.word	0x40023800
 8003898:	40013800 	.word	0x40013800
 800389c:	40020000 	.word	0x40020000
 80038a0:	40020400 	.word	0x40020400
 80038a4:	40020800 	.word	0x40020800
 80038a8:	40020c00 	.word	0x40020c00
 80038ac:	40021000 	.word	0x40021000
 80038b0:	40021400 	.word	0x40021400
 80038b4:	40021800 	.word	0x40021800
 80038b8:	40021c00 	.word	0x40021c00
 80038bc:	40013c00 	.word	0x40013c00

080038c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80038c0:	b480      	push	{r7}
 80038c2:	b083      	sub	sp, #12
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
 80038c8:	460b      	mov	r3, r1
 80038ca:	807b      	strh	r3, [r7, #2]
 80038cc:	4613      	mov	r3, r2
 80038ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80038d0:	787b      	ldrb	r3, [r7, #1]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d003      	beq.n	80038de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80038d6:	887a      	ldrh	r2, [r7, #2]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80038dc:	e003      	b.n	80038e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80038de:	887b      	ldrh	r3, [r7, #2]
 80038e0:	041a      	lsls	r2, r3, #16
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	619a      	str	r2, [r3, #24]
}
 80038e6:	bf00      	nop
 80038e8:	370c      	adds	r7, #12
 80038ea:	46bd      	mov	sp, r7
 80038ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f0:	4770      	bx	lr
	...

080038f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b084      	sub	sp, #16
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d101      	bne.n	8003906 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	e12b      	b.n	8003b5e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800390c:	b2db      	uxtb	r3, r3
 800390e:	2b00      	cmp	r3, #0
 8003910:	d106      	bne.n	8003920 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2200      	movs	r2, #0
 8003916:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800391a:	6878      	ldr	r0, [r7, #4]
 800391c:	f7fd f9c6 	bl	8000cac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2224      	movs	r2, #36	@ 0x24
 8003924:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	681a      	ldr	r2, [r3, #0]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f022 0201 	bic.w	r2, r2, #1
 8003936:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	681a      	ldr	r2, [r3, #0]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003946:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	681a      	ldr	r2, [r3, #0]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003956:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003958:	f001 ffd0 	bl	80058fc <HAL_RCC_GetPCLK1Freq>
 800395c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	4a81      	ldr	r2, [pc, #516]	@ (8003b68 <HAL_I2C_Init+0x274>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d807      	bhi.n	8003978 <HAL_I2C_Init+0x84>
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	4a80      	ldr	r2, [pc, #512]	@ (8003b6c <HAL_I2C_Init+0x278>)
 800396c:	4293      	cmp	r3, r2
 800396e:	bf94      	ite	ls
 8003970:	2301      	movls	r3, #1
 8003972:	2300      	movhi	r3, #0
 8003974:	b2db      	uxtb	r3, r3
 8003976:	e006      	b.n	8003986 <HAL_I2C_Init+0x92>
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	4a7d      	ldr	r2, [pc, #500]	@ (8003b70 <HAL_I2C_Init+0x27c>)
 800397c:	4293      	cmp	r3, r2
 800397e:	bf94      	ite	ls
 8003980:	2301      	movls	r3, #1
 8003982:	2300      	movhi	r3, #0
 8003984:	b2db      	uxtb	r3, r3
 8003986:	2b00      	cmp	r3, #0
 8003988:	d001      	beq.n	800398e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	e0e7      	b.n	8003b5e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	4a78      	ldr	r2, [pc, #480]	@ (8003b74 <HAL_I2C_Init+0x280>)
 8003992:	fba2 2303 	umull	r2, r3, r2, r3
 8003996:	0c9b      	lsrs	r3, r3, #18
 8003998:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	68ba      	ldr	r2, [r7, #8]
 80039aa:	430a      	orrs	r2, r1
 80039ac:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	6a1b      	ldr	r3, [r3, #32]
 80039b4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	4a6a      	ldr	r2, [pc, #424]	@ (8003b68 <HAL_I2C_Init+0x274>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d802      	bhi.n	80039c8 <HAL_I2C_Init+0xd4>
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	3301      	adds	r3, #1
 80039c6:	e009      	b.n	80039dc <HAL_I2C_Init+0xe8>
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80039ce:	fb02 f303 	mul.w	r3, r2, r3
 80039d2:	4a69      	ldr	r2, [pc, #420]	@ (8003b78 <HAL_I2C_Init+0x284>)
 80039d4:	fba2 2303 	umull	r2, r3, r2, r3
 80039d8:	099b      	lsrs	r3, r3, #6
 80039da:	3301      	adds	r3, #1
 80039dc:	687a      	ldr	r2, [r7, #4]
 80039de:	6812      	ldr	r2, [r2, #0]
 80039e0:	430b      	orrs	r3, r1
 80039e2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	69db      	ldr	r3, [r3, #28]
 80039ea:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80039ee:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	495c      	ldr	r1, [pc, #368]	@ (8003b68 <HAL_I2C_Init+0x274>)
 80039f8:	428b      	cmp	r3, r1
 80039fa:	d819      	bhi.n	8003a30 <HAL_I2C_Init+0x13c>
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	1e59      	subs	r1, r3, #1
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	005b      	lsls	r3, r3, #1
 8003a06:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a0a:	1c59      	adds	r1, r3, #1
 8003a0c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003a10:	400b      	ands	r3, r1
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d00a      	beq.n	8003a2c <HAL_I2C_Init+0x138>
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	1e59      	subs	r1, r3, #1
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	005b      	lsls	r3, r3, #1
 8003a20:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a24:	3301      	adds	r3, #1
 8003a26:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a2a:	e051      	b.n	8003ad0 <HAL_I2C_Init+0x1dc>
 8003a2c:	2304      	movs	r3, #4
 8003a2e:	e04f      	b.n	8003ad0 <HAL_I2C_Init+0x1dc>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	689b      	ldr	r3, [r3, #8]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d111      	bne.n	8003a5c <HAL_I2C_Init+0x168>
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	1e58      	subs	r0, r3, #1
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6859      	ldr	r1, [r3, #4]
 8003a40:	460b      	mov	r3, r1
 8003a42:	005b      	lsls	r3, r3, #1
 8003a44:	440b      	add	r3, r1
 8003a46:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a4a:	3301      	adds	r3, #1
 8003a4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	bf0c      	ite	eq
 8003a54:	2301      	moveq	r3, #1
 8003a56:	2300      	movne	r3, #0
 8003a58:	b2db      	uxtb	r3, r3
 8003a5a:	e012      	b.n	8003a82 <HAL_I2C_Init+0x18e>
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	1e58      	subs	r0, r3, #1
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6859      	ldr	r1, [r3, #4]
 8003a64:	460b      	mov	r3, r1
 8003a66:	009b      	lsls	r3, r3, #2
 8003a68:	440b      	add	r3, r1
 8003a6a:	0099      	lsls	r1, r3, #2
 8003a6c:	440b      	add	r3, r1
 8003a6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a72:	3301      	adds	r3, #1
 8003a74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	bf0c      	ite	eq
 8003a7c:	2301      	moveq	r3, #1
 8003a7e:	2300      	movne	r3, #0
 8003a80:	b2db      	uxtb	r3, r3
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d001      	beq.n	8003a8a <HAL_I2C_Init+0x196>
 8003a86:	2301      	movs	r3, #1
 8003a88:	e022      	b.n	8003ad0 <HAL_I2C_Init+0x1dc>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	689b      	ldr	r3, [r3, #8]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d10e      	bne.n	8003ab0 <HAL_I2C_Init+0x1bc>
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	1e58      	subs	r0, r3, #1
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6859      	ldr	r1, [r3, #4]
 8003a9a:	460b      	mov	r3, r1
 8003a9c:	005b      	lsls	r3, r3, #1
 8003a9e:	440b      	add	r3, r1
 8003aa0:	fbb0 f3f3 	udiv	r3, r0, r3
 8003aa4:	3301      	adds	r3, #1
 8003aa6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003aaa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003aae:	e00f      	b.n	8003ad0 <HAL_I2C_Init+0x1dc>
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	1e58      	subs	r0, r3, #1
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6859      	ldr	r1, [r3, #4]
 8003ab8:	460b      	mov	r3, r1
 8003aba:	009b      	lsls	r3, r3, #2
 8003abc:	440b      	add	r3, r1
 8003abe:	0099      	lsls	r1, r3, #2
 8003ac0:	440b      	add	r3, r1
 8003ac2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ac6:	3301      	adds	r3, #1
 8003ac8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003acc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003ad0:	6879      	ldr	r1, [r7, #4]
 8003ad2:	6809      	ldr	r1, [r1, #0]
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	69da      	ldr	r2, [r3, #28]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6a1b      	ldr	r3, [r3, #32]
 8003aea:	431a      	orrs	r2, r3
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	430a      	orrs	r2, r1
 8003af2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	689b      	ldr	r3, [r3, #8]
 8003afa:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003afe:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003b02:	687a      	ldr	r2, [r7, #4]
 8003b04:	6911      	ldr	r1, [r2, #16]
 8003b06:	687a      	ldr	r2, [r7, #4]
 8003b08:	68d2      	ldr	r2, [r2, #12]
 8003b0a:	4311      	orrs	r1, r2
 8003b0c:	687a      	ldr	r2, [r7, #4]
 8003b0e:	6812      	ldr	r2, [r2, #0]
 8003b10:	430b      	orrs	r3, r1
 8003b12:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	68db      	ldr	r3, [r3, #12]
 8003b1a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	695a      	ldr	r2, [r3, #20]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	699b      	ldr	r3, [r3, #24]
 8003b26:	431a      	orrs	r2, r3
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	430a      	orrs	r2, r1
 8003b2e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	681a      	ldr	r2, [r3, #0]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f042 0201 	orr.w	r2, r2, #1
 8003b3e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2200      	movs	r2, #0
 8003b44:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2220      	movs	r2, #32
 8003b4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2200      	movs	r2, #0
 8003b52:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2200      	movs	r2, #0
 8003b58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003b5c:	2300      	movs	r3, #0
}
 8003b5e:	4618      	mov	r0, r3
 8003b60:	3710      	adds	r7, #16
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}
 8003b66:	bf00      	nop
 8003b68:	000186a0 	.word	0x000186a0
 8003b6c:	001e847f 	.word	0x001e847f
 8003b70:	003d08ff 	.word	0x003d08ff
 8003b74:	431bde83 	.word	0x431bde83
 8003b78:	10624dd3 	.word	0x10624dd3

08003b7c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b086      	sub	sp, #24
 8003b80:	af02      	add	r7, sp, #8
 8003b82:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d101      	bne.n	8003b8e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	e101      	b.n	8003d92 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8003b9a:	b2db      	uxtb	r3, r3
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d106      	bne.n	8003bae <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003ba8:	6878      	ldr	r0, [r7, #4]
 8003baa:	f009 fdd5 	bl	800d758 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2203      	movs	r2, #3
 8003bb2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003bbc:	d102      	bne.n	8003bc4 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4618      	mov	r0, r3
 8003bca:	f003 fc7c 	bl	80074c6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6818      	ldr	r0, [r3, #0]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	7c1a      	ldrb	r2, [r3, #16]
 8003bd6:	f88d 2000 	strb.w	r2, [sp]
 8003bda:	3304      	adds	r3, #4
 8003bdc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003bde:	f003 fb5b 	bl	8007298 <USB_CoreInit>
 8003be2:	4603      	mov	r3, r0
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d005      	beq.n	8003bf4 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2202      	movs	r2, #2
 8003bec:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	e0ce      	b.n	8003d92 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	2100      	movs	r1, #0
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f003 fc74 	bl	80074e8 <USB_SetCurrentMode>
 8003c00:	4603      	mov	r3, r0
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d005      	beq.n	8003c12 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2202      	movs	r2, #2
 8003c0a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	e0bf      	b.n	8003d92 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c12:	2300      	movs	r3, #0
 8003c14:	73fb      	strb	r3, [r7, #15]
 8003c16:	e04a      	b.n	8003cae <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003c18:	7bfa      	ldrb	r2, [r7, #15]
 8003c1a:	6879      	ldr	r1, [r7, #4]
 8003c1c:	4613      	mov	r3, r2
 8003c1e:	00db      	lsls	r3, r3, #3
 8003c20:	4413      	add	r3, r2
 8003c22:	009b      	lsls	r3, r3, #2
 8003c24:	440b      	add	r3, r1
 8003c26:	3315      	adds	r3, #21
 8003c28:	2201      	movs	r2, #1
 8003c2a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003c2c:	7bfa      	ldrb	r2, [r7, #15]
 8003c2e:	6879      	ldr	r1, [r7, #4]
 8003c30:	4613      	mov	r3, r2
 8003c32:	00db      	lsls	r3, r3, #3
 8003c34:	4413      	add	r3, r2
 8003c36:	009b      	lsls	r3, r3, #2
 8003c38:	440b      	add	r3, r1
 8003c3a:	3314      	adds	r3, #20
 8003c3c:	7bfa      	ldrb	r2, [r7, #15]
 8003c3e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003c40:	7bfa      	ldrb	r2, [r7, #15]
 8003c42:	7bfb      	ldrb	r3, [r7, #15]
 8003c44:	b298      	uxth	r0, r3
 8003c46:	6879      	ldr	r1, [r7, #4]
 8003c48:	4613      	mov	r3, r2
 8003c4a:	00db      	lsls	r3, r3, #3
 8003c4c:	4413      	add	r3, r2
 8003c4e:	009b      	lsls	r3, r3, #2
 8003c50:	440b      	add	r3, r1
 8003c52:	332e      	adds	r3, #46	@ 0x2e
 8003c54:	4602      	mov	r2, r0
 8003c56:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003c58:	7bfa      	ldrb	r2, [r7, #15]
 8003c5a:	6879      	ldr	r1, [r7, #4]
 8003c5c:	4613      	mov	r3, r2
 8003c5e:	00db      	lsls	r3, r3, #3
 8003c60:	4413      	add	r3, r2
 8003c62:	009b      	lsls	r3, r3, #2
 8003c64:	440b      	add	r3, r1
 8003c66:	3318      	adds	r3, #24
 8003c68:	2200      	movs	r2, #0
 8003c6a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003c6c:	7bfa      	ldrb	r2, [r7, #15]
 8003c6e:	6879      	ldr	r1, [r7, #4]
 8003c70:	4613      	mov	r3, r2
 8003c72:	00db      	lsls	r3, r3, #3
 8003c74:	4413      	add	r3, r2
 8003c76:	009b      	lsls	r3, r3, #2
 8003c78:	440b      	add	r3, r1
 8003c7a:	331c      	adds	r3, #28
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003c80:	7bfa      	ldrb	r2, [r7, #15]
 8003c82:	6879      	ldr	r1, [r7, #4]
 8003c84:	4613      	mov	r3, r2
 8003c86:	00db      	lsls	r3, r3, #3
 8003c88:	4413      	add	r3, r2
 8003c8a:	009b      	lsls	r3, r3, #2
 8003c8c:	440b      	add	r3, r1
 8003c8e:	3320      	adds	r3, #32
 8003c90:	2200      	movs	r2, #0
 8003c92:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003c94:	7bfa      	ldrb	r2, [r7, #15]
 8003c96:	6879      	ldr	r1, [r7, #4]
 8003c98:	4613      	mov	r3, r2
 8003c9a:	00db      	lsls	r3, r3, #3
 8003c9c:	4413      	add	r3, r2
 8003c9e:	009b      	lsls	r3, r3, #2
 8003ca0:	440b      	add	r3, r1
 8003ca2:	3324      	adds	r3, #36	@ 0x24
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ca8:	7bfb      	ldrb	r3, [r7, #15]
 8003caa:	3301      	adds	r3, #1
 8003cac:	73fb      	strb	r3, [r7, #15]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	791b      	ldrb	r3, [r3, #4]
 8003cb2:	7bfa      	ldrb	r2, [r7, #15]
 8003cb4:	429a      	cmp	r2, r3
 8003cb6:	d3af      	bcc.n	8003c18 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003cb8:	2300      	movs	r3, #0
 8003cba:	73fb      	strb	r3, [r7, #15]
 8003cbc:	e044      	b.n	8003d48 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003cbe:	7bfa      	ldrb	r2, [r7, #15]
 8003cc0:	6879      	ldr	r1, [r7, #4]
 8003cc2:	4613      	mov	r3, r2
 8003cc4:	00db      	lsls	r3, r3, #3
 8003cc6:	4413      	add	r3, r2
 8003cc8:	009b      	lsls	r3, r3, #2
 8003cca:	440b      	add	r3, r1
 8003ccc:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003cd4:	7bfa      	ldrb	r2, [r7, #15]
 8003cd6:	6879      	ldr	r1, [r7, #4]
 8003cd8:	4613      	mov	r3, r2
 8003cda:	00db      	lsls	r3, r3, #3
 8003cdc:	4413      	add	r3, r2
 8003cde:	009b      	lsls	r3, r3, #2
 8003ce0:	440b      	add	r3, r1
 8003ce2:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8003ce6:	7bfa      	ldrb	r2, [r7, #15]
 8003ce8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003cea:	7bfa      	ldrb	r2, [r7, #15]
 8003cec:	6879      	ldr	r1, [r7, #4]
 8003cee:	4613      	mov	r3, r2
 8003cf0:	00db      	lsls	r3, r3, #3
 8003cf2:	4413      	add	r3, r2
 8003cf4:	009b      	lsls	r3, r3, #2
 8003cf6:	440b      	add	r3, r1
 8003cf8:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003d00:	7bfa      	ldrb	r2, [r7, #15]
 8003d02:	6879      	ldr	r1, [r7, #4]
 8003d04:	4613      	mov	r3, r2
 8003d06:	00db      	lsls	r3, r3, #3
 8003d08:	4413      	add	r3, r2
 8003d0a:	009b      	lsls	r3, r3, #2
 8003d0c:	440b      	add	r3, r1
 8003d0e:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8003d12:	2200      	movs	r2, #0
 8003d14:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003d16:	7bfa      	ldrb	r2, [r7, #15]
 8003d18:	6879      	ldr	r1, [r7, #4]
 8003d1a:	4613      	mov	r3, r2
 8003d1c:	00db      	lsls	r3, r3, #3
 8003d1e:	4413      	add	r3, r2
 8003d20:	009b      	lsls	r3, r3, #2
 8003d22:	440b      	add	r3, r1
 8003d24:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8003d28:	2200      	movs	r2, #0
 8003d2a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003d2c:	7bfa      	ldrb	r2, [r7, #15]
 8003d2e:	6879      	ldr	r1, [r7, #4]
 8003d30:	4613      	mov	r3, r2
 8003d32:	00db      	lsls	r3, r3, #3
 8003d34:	4413      	add	r3, r2
 8003d36:	009b      	lsls	r3, r3, #2
 8003d38:	440b      	add	r3, r1
 8003d3a:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003d3e:	2200      	movs	r2, #0
 8003d40:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d42:	7bfb      	ldrb	r3, [r7, #15]
 8003d44:	3301      	adds	r3, #1
 8003d46:	73fb      	strb	r3, [r7, #15]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	791b      	ldrb	r3, [r3, #4]
 8003d4c:	7bfa      	ldrb	r2, [r7, #15]
 8003d4e:	429a      	cmp	r2, r3
 8003d50:	d3b5      	bcc.n	8003cbe <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6818      	ldr	r0, [r3, #0]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	7c1a      	ldrb	r2, [r3, #16]
 8003d5a:	f88d 2000 	strb.w	r2, [sp]
 8003d5e:	3304      	adds	r3, #4
 8003d60:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003d62:	f003 fc0d 	bl	8007580 <USB_DevInit>
 8003d66:	4603      	mov	r3, r0
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d005      	beq.n	8003d78 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2202      	movs	r2, #2
 8003d70:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003d74:	2301      	movs	r3, #1
 8003d76:	e00c      	b.n	8003d92 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2201      	movs	r2, #1
 8003d82:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	f004 fc51 	bl	8008632 <USB_DevDisconnect>

  return HAL_OK;
 8003d90:	2300      	movs	r3, #0
}
 8003d92:	4618      	mov	r0, r3
 8003d94:	3710      	adds	r7, #16
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bd80      	pop	{r7, pc}

08003d9a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003d9a:	b580      	push	{r7, lr}
 8003d9c:	b084      	sub	sp, #16
 8003d9e:	af00      	add	r7, sp, #0
 8003da0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003dae:	2b01      	cmp	r3, #1
 8003db0:	d101      	bne.n	8003db6 <HAL_PCD_Start+0x1c>
 8003db2:	2302      	movs	r3, #2
 8003db4:	e022      	b.n	8003dfc <HAL_PCD_Start+0x62>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2201      	movs	r2, #1
 8003dba:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	68db      	ldr	r3, [r3, #12]
 8003dc2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d009      	beq.n	8003dde <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003dce:	2b01      	cmp	r3, #1
 8003dd0:	d105      	bne.n	8003dde <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dd6:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4618      	mov	r0, r3
 8003de4:	f003 fb5e 	bl	80074a4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4618      	mov	r0, r3
 8003dee:	f004 fbff 	bl	80085f0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2200      	movs	r2, #0
 8003df6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003dfa:	2300      	movs	r3, #0
}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	3710      	adds	r7, #16
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bd80      	pop	{r7, pc}

08003e04 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003e04:	b590      	push	{r4, r7, lr}
 8003e06:	b08d      	sub	sp, #52	@ 0x34
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e12:	6a3b      	ldr	r3, [r7, #32]
 8003e14:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	f004 fcbd 	bl	800879a <USB_GetMode>
 8003e20:	4603      	mov	r3, r0
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	f040 848c 	bne.w	8004740 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	f004 fc21 	bl	8008674 <USB_ReadInterrupts>
 8003e32:	4603      	mov	r3, r0
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	f000 8482 	beq.w	800473e <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003e3a:	69fb      	ldr	r3, [r7, #28]
 8003e3c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e40:	689b      	ldr	r3, [r3, #8]
 8003e42:	0a1b      	lsrs	r3, r3, #8
 8003e44:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4618      	mov	r0, r3
 8003e54:	f004 fc0e 	bl	8008674 <USB_ReadInterrupts>
 8003e58:	4603      	mov	r3, r0
 8003e5a:	f003 0302 	and.w	r3, r3, #2
 8003e5e:	2b02      	cmp	r3, #2
 8003e60:	d107      	bne.n	8003e72 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	695a      	ldr	r2, [r3, #20]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f002 0202 	and.w	r2, r2, #2
 8003e70:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4618      	mov	r0, r3
 8003e78:	f004 fbfc 	bl	8008674 <USB_ReadInterrupts>
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	f003 0310 	and.w	r3, r3, #16
 8003e82:	2b10      	cmp	r3, #16
 8003e84:	d161      	bne.n	8003f4a <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	699a      	ldr	r2, [r3, #24]
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f022 0210 	bic.w	r2, r2, #16
 8003e94:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003e96:	6a3b      	ldr	r3, [r7, #32]
 8003e98:	6a1b      	ldr	r3, [r3, #32]
 8003e9a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003e9c:	69bb      	ldr	r3, [r7, #24]
 8003e9e:	f003 020f 	and.w	r2, r3, #15
 8003ea2:	4613      	mov	r3, r2
 8003ea4:	00db      	lsls	r3, r3, #3
 8003ea6:	4413      	add	r3, r2
 8003ea8:	009b      	lsls	r3, r3, #2
 8003eaa:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003eae:	687a      	ldr	r2, [r7, #4]
 8003eb0:	4413      	add	r3, r2
 8003eb2:	3304      	adds	r3, #4
 8003eb4:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003eb6:	69bb      	ldr	r3, [r7, #24]
 8003eb8:	0c5b      	lsrs	r3, r3, #17
 8003eba:	f003 030f 	and.w	r3, r3, #15
 8003ebe:	2b02      	cmp	r3, #2
 8003ec0:	d124      	bne.n	8003f0c <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003ec2:	69ba      	ldr	r2, [r7, #24]
 8003ec4:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8003ec8:	4013      	ands	r3, r2
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d035      	beq.n	8003f3a <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003ece:	697b      	ldr	r3, [r7, #20]
 8003ed0:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003ed2:	69bb      	ldr	r3, [r7, #24]
 8003ed4:	091b      	lsrs	r3, r3, #4
 8003ed6:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003ed8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003edc:	b29b      	uxth	r3, r3
 8003ede:	461a      	mov	r2, r3
 8003ee0:	6a38      	ldr	r0, [r7, #32]
 8003ee2:	f004 fa33 	bl	800834c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003ee6:	697b      	ldr	r3, [r7, #20]
 8003ee8:	68da      	ldr	r2, [r3, #12]
 8003eea:	69bb      	ldr	r3, [r7, #24]
 8003eec:	091b      	lsrs	r3, r3, #4
 8003eee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003ef2:	441a      	add	r2, r3
 8003ef4:	697b      	ldr	r3, [r7, #20]
 8003ef6:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003ef8:	697b      	ldr	r3, [r7, #20]
 8003efa:	695a      	ldr	r2, [r3, #20]
 8003efc:	69bb      	ldr	r3, [r7, #24]
 8003efe:	091b      	lsrs	r3, r3, #4
 8003f00:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003f04:	441a      	add	r2, r3
 8003f06:	697b      	ldr	r3, [r7, #20]
 8003f08:	615a      	str	r2, [r3, #20]
 8003f0a:	e016      	b.n	8003f3a <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003f0c:	69bb      	ldr	r3, [r7, #24]
 8003f0e:	0c5b      	lsrs	r3, r3, #17
 8003f10:	f003 030f 	and.w	r3, r3, #15
 8003f14:	2b06      	cmp	r3, #6
 8003f16:	d110      	bne.n	8003f3a <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003f1e:	2208      	movs	r2, #8
 8003f20:	4619      	mov	r1, r3
 8003f22:	6a38      	ldr	r0, [r7, #32]
 8003f24:	f004 fa12 	bl	800834c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	695a      	ldr	r2, [r3, #20]
 8003f2c:	69bb      	ldr	r3, [r7, #24]
 8003f2e:	091b      	lsrs	r3, r3, #4
 8003f30:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003f34:	441a      	add	r2, r3
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	699a      	ldr	r2, [r3, #24]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f042 0210 	orr.w	r2, r2, #16
 8003f48:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4618      	mov	r0, r3
 8003f50:	f004 fb90 	bl	8008674 <USB_ReadInterrupts>
 8003f54:	4603      	mov	r3, r0
 8003f56:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003f5a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003f5e:	f040 80a7 	bne.w	80040b0 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003f62:	2300      	movs	r3, #0
 8003f64:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	f004 fb95 	bl	800869a <USB_ReadDevAllOutEpInterrupt>
 8003f70:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8003f72:	e099      	b.n	80040a8 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003f74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f76:	f003 0301 	and.w	r3, r3, #1
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	f000 808e 	beq.w	800409c <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f86:	b2d2      	uxtb	r2, r2
 8003f88:	4611      	mov	r1, r2
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	f004 fbb9 	bl	8008702 <USB_ReadDevOutEPInterrupt>
 8003f90:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003f92:	693b      	ldr	r3, [r7, #16]
 8003f94:	f003 0301 	and.w	r3, r3, #1
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d00c      	beq.n	8003fb6 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003f9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f9e:	015a      	lsls	r2, r3, #5
 8003fa0:	69fb      	ldr	r3, [r7, #28]
 8003fa2:	4413      	add	r3, r2
 8003fa4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003fa8:	461a      	mov	r2, r3
 8003faa:	2301      	movs	r3, #1
 8003fac:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003fae:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003fb0:	6878      	ldr	r0, [r7, #4]
 8003fb2:	f000 fea1 	bl	8004cf8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	f003 0308 	and.w	r3, r3, #8
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d00c      	beq.n	8003fda <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003fc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fc2:	015a      	lsls	r2, r3, #5
 8003fc4:	69fb      	ldr	r3, [r7, #28]
 8003fc6:	4413      	add	r3, r2
 8003fc8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003fcc:	461a      	mov	r2, r3
 8003fce:	2308      	movs	r3, #8
 8003fd0:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003fd2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003fd4:	6878      	ldr	r0, [r7, #4]
 8003fd6:	f000 ff77 	bl	8004ec8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003fda:	693b      	ldr	r3, [r7, #16]
 8003fdc:	f003 0310 	and.w	r3, r3, #16
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d008      	beq.n	8003ff6 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003fe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fe6:	015a      	lsls	r2, r3, #5
 8003fe8:	69fb      	ldr	r3, [r7, #28]
 8003fea:	4413      	add	r3, r2
 8003fec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ff0:	461a      	mov	r2, r3
 8003ff2:	2310      	movs	r3, #16
 8003ff4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	f003 0302 	and.w	r3, r3, #2
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d030      	beq.n	8004062 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8004000:	6a3b      	ldr	r3, [r7, #32]
 8004002:	695b      	ldr	r3, [r3, #20]
 8004004:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004008:	2b80      	cmp	r3, #128	@ 0x80
 800400a:	d109      	bne.n	8004020 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800400c:	69fb      	ldr	r3, [r7, #28]
 800400e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	69fa      	ldr	r2, [r7, #28]
 8004016:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800401a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800401e:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8004020:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004022:	4613      	mov	r3, r2
 8004024:	00db      	lsls	r3, r3, #3
 8004026:	4413      	add	r3, r2
 8004028:	009b      	lsls	r3, r3, #2
 800402a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800402e:	687a      	ldr	r2, [r7, #4]
 8004030:	4413      	add	r3, r2
 8004032:	3304      	adds	r3, #4
 8004034:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	78db      	ldrb	r3, [r3, #3]
 800403a:	2b01      	cmp	r3, #1
 800403c:	d108      	bne.n	8004050 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800403e:	697b      	ldr	r3, [r7, #20]
 8004040:	2200      	movs	r2, #0
 8004042:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004044:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004046:	b2db      	uxtb	r3, r3
 8004048:	4619      	mov	r1, r3
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	f009 fc8a 	bl	800d964 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8004050:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004052:	015a      	lsls	r2, r3, #5
 8004054:	69fb      	ldr	r3, [r7, #28]
 8004056:	4413      	add	r3, r2
 8004058:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800405c:	461a      	mov	r2, r3
 800405e:	2302      	movs	r3, #2
 8004060:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	f003 0320 	and.w	r3, r3, #32
 8004068:	2b00      	cmp	r3, #0
 800406a:	d008      	beq.n	800407e <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800406c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800406e:	015a      	lsls	r2, r3, #5
 8004070:	69fb      	ldr	r3, [r7, #28]
 8004072:	4413      	add	r3, r2
 8004074:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004078:	461a      	mov	r2, r3
 800407a:	2320      	movs	r3, #32
 800407c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004084:	2b00      	cmp	r3, #0
 8004086:	d009      	beq.n	800409c <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004088:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800408a:	015a      	lsls	r2, r3, #5
 800408c:	69fb      	ldr	r3, [r7, #28]
 800408e:	4413      	add	r3, r2
 8004090:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004094:	461a      	mov	r2, r3
 8004096:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800409a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800409c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800409e:	3301      	adds	r3, #1
 80040a0:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80040a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040a4:	085b      	lsrs	r3, r3, #1
 80040a6:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80040a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	f47f af62 	bne.w	8003f74 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4618      	mov	r0, r3
 80040b6:	f004 fadd 	bl	8008674 <USB_ReadInterrupts>
 80040ba:	4603      	mov	r3, r0
 80040bc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80040c0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80040c4:	f040 80db 	bne.w	800427e <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4618      	mov	r0, r3
 80040ce:	f004 fafe 	bl	80086ce <USB_ReadDevAllInEpInterrupt>
 80040d2:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80040d4:	2300      	movs	r3, #0
 80040d6:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80040d8:	e0cd      	b.n	8004276 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80040da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040dc:	f003 0301 	and.w	r3, r3, #1
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	f000 80c2 	beq.w	800426a <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040ec:	b2d2      	uxtb	r2, r2
 80040ee:	4611      	mov	r1, r2
 80040f0:	4618      	mov	r0, r3
 80040f2:	f004 fb24 	bl	800873e <USB_ReadDevInEPInterrupt>
 80040f6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80040f8:	693b      	ldr	r3, [r7, #16]
 80040fa:	f003 0301 	and.w	r3, r3, #1
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d057      	beq.n	80041b2 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004102:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004104:	f003 030f 	and.w	r3, r3, #15
 8004108:	2201      	movs	r2, #1
 800410a:	fa02 f303 	lsl.w	r3, r2, r3
 800410e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004110:	69fb      	ldr	r3, [r7, #28]
 8004112:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004116:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	43db      	mvns	r3, r3
 800411c:	69f9      	ldr	r1, [r7, #28]
 800411e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004122:	4013      	ands	r3, r2
 8004124:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004128:	015a      	lsls	r2, r3, #5
 800412a:	69fb      	ldr	r3, [r7, #28]
 800412c:	4413      	add	r3, r2
 800412e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004132:	461a      	mov	r2, r3
 8004134:	2301      	movs	r3, #1
 8004136:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	799b      	ldrb	r3, [r3, #6]
 800413c:	2b01      	cmp	r3, #1
 800413e:	d132      	bne.n	80041a6 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8004140:	6879      	ldr	r1, [r7, #4]
 8004142:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004144:	4613      	mov	r3, r2
 8004146:	00db      	lsls	r3, r3, #3
 8004148:	4413      	add	r3, r2
 800414a:	009b      	lsls	r3, r3, #2
 800414c:	440b      	add	r3, r1
 800414e:	3320      	adds	r3, #32
 8004150:	6819      	ldr	r1, [r3, #0]
 8004152:	6878      	ldr	r0, [r7, #4]
 8004154:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004156:	4613      	mov	r3, r2
 8004158:	00db      	lsls	r3, r3, #3
 800415a:	4413      	add	r3, r2
 800415c:	009b      	lsls	r3, r3, #2
 800415e:	4403      	add	r3, r0
 8004160:	331c      	adds	r3, #28
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4419      	add	r1, r3
 8004166:	6878      	ldr	r0, [r7, #4]
 8004168:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800416a:	4613      	mov	r3, r2
 800416c:	00db      	lsls	r3, r3, #3
 800416e:	4413      	add	r3, r2
 8004170:	009b      	lsls	r3, r3, #2
 8004172:	4403      	add	r3, r0
 8004174:	3320      	adds	r3, #32
 8004176:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8004178:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800417a:	2b00      	cmp	r3, #0
 800417c:	d113      	bne.n	80041a6 <HAL_PCD_IRQHandler+0x3a2>
 800417e:	6879      	ldr	r1, [r7, #4]
 8004180:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004182:	4613      	mov	r3, r2
 8004184:	00db      	lsls	r3, r3, #3
 8004186:	4413      	add	r3, r2
 8004188:	009b      	lsls	r3, r3, #2
 800418a:	440b      	add	r3, r1
 800418c:	3324      	adds	r3, #36	@ 0x24
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d108      	bne.n	80041a6 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6818      	ldr	r0, [r3, #0]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800419e:	461a      	mov	r2, r3
 80041a0:	2101      	movs	r1, #1
 80041a2:	f004 fb2b 	bl	80087fc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80041a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041a8:	b2db      	uxtb	r3, r3
 80041aa:	4619      	mov	r1, r3
 80041ac:	6878      	ldr	r0, [r7, #4]
 80041ae:	f009 fb54 	bl	800d85a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80041b2:	693b      	ldr	r3, [r7, #16]
 80041b4:	f003 0308 	and.w	r3, r3, #8
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d008      	beq.n	80041ce <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80041bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041be:	015a      	lsls	r2, r3, #5
 80041c0:	69fb      	ldr	r3, [r7, #28]
 80041c2:	4413      	add	r3, r2
 80041c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80041c8:	461a      	mov	r2, r3
 80041ca:	2308      	movs	r3, #8
 80041cc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80041ce:	693b      	ldr	r3, [r7, #16]
 80041d0:	f003 0310 	and.w	r3, r3, #16
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d008      	beq.n	80041ea <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80041d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041da:	015a      	lsls	r2, r3, #5
 80041dc:	69fb      	ldr	r3, [r7, #28]
 80041de:	4413      	add	r3, r2
 80041e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80041e4:	461a      	mov	r2, r3
 80041e6:	2310      	movs	r3, #16
 80041e8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80041ea:	693b      	ldr	r3, [r7, #16]
 80041ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d008      	beq.n	8004206 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80041f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041f6:	015a      	lsls	r2, r3, #5
 80041f8:	69fb      	ldr	r3, [r7, #28]
 80041fa:	4413      	add	r3, r2
 80041fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004200:	461a      	mov	r2, r3
 8004202:	2340      	movs	r3, #64	@ 0x40
 8004204:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	f003 0302 	and.w	r3, r3, #2
 800420c:	2b00      	cmp	r3, #0
 800420e:	d023      	beq.n	8004258 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8004210:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004212:	6a38      	ldr	r0, [r7, #32]
 8004214:	f003 fb18 	bl	8007848 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8004218:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800421a:	4613      	mov	r3, r2
 800421c:	00db      	lsls	r3, r3, #3
 800421e:	4413      	add	r3, r2
 8004220:	009b      	lsls	r3, r3, #2
 8004222:	3310      	adds	r3, #16
 8004224:	687a      	ldr	r2, [r7, #4]
 8004226:	4413      	add	r3, r2
 8004228:	3304      	adds	r3, #4
 800422a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800422c:	697b      	ldr	r3, [r7, #20]
 800422e:	78db      	ldrb	r3, [r3, #3]
 8004230:	2b01      	cmp	r3, #1
 8004232:	d108      	bne.n	8004246 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8004234:	697b      	ldr	r3, [r7, #20]
 8004236:	2200      	movs	r2, #0
 8004238:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800423a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800423c:	b2db      	uxtb	r3, r3
 800423e:	4619      	mov	r1, r3
 8004240:	6878      	ldr	r0, [r7, #4]
 8004242:	f009 fba1 	bl	800d988 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004246:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004248:	015a      	lsls	r2, r3, #5
 800424a:	69fb      	ldr	r3, [r7, #28]
 800424c:	4413      	add	r3, r2
 800424e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004252:	461a      	mov	r2, r3
 8004254:	2302      	movs	r3, #2
 8004256:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004258:	693b      	ldr	r3, [r7, #16]
 800425a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800425e:	2b00      	cmp	r3, #0
 8004260:	d003      	beq.n	800426a <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004262:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004264:	6878      	ldr	r0, [r7, #4]
 8004266:	f000 fcbb 	bl	8004be0 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800426a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800426c:	3301      	adds	r3, #1
 800426e:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8004270:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004272:	085b      	lsrs	r3, r3, #1
 8004274:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8004276:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004278:	2b00      	cmp	r3, #0
 800427a:	f47f af2e 	bne.w	80040da <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4618      	mov	r0, r3
 8004284:	f004 f9f6 	bl	8008674 <USB_ReadInterrupts>
 8004288:	4603      	mov	r3, r0
 800428a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800428e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004292:	d122      	bne.n	80042da <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004294:	69fb      	ldr	r3, [r7, #28]
 8004296:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	69fa      	ldr	r2, [r7, #28]
 800429e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80042a2:	f023 0301 	bic.w	r3, r3, #1
 80042a6:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80042ae:	2b01      	cmp	r3, #1
 80042b0:	d108      	bne.n	80042c4 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2200      	movs	r2, #0
 80042b6:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80042ba:	2100      	movs	r1, #0
 80042bc:	6878      	ldr	r0, [r7, #4]
 80042be:	f000 fea1 	bl	8005004 <HAL_PCDEx_LPM_Callback>
 80042c2:	e002      	b.n	80042ca <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80042c4:	6878      	ldr	r0, [r7, #4]
 80042c6:	f009 fb3f 	bl	800d948 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	695a      	ldr	r2, [r3, #20]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80042d8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4618      	mov	r0, r3
 80042e0:	f004 f9c8 	bl	8008674 <USB_ReadInterrupts>
 80042e4:	4603      	mov	r3, r0
 80042e6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80042ea:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80042ee:	d112      	bne.n	8004316 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80042f0:	69fb      	ldr	r3, [r7, #28]
 80042f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80042f6:	689b      	ldr	r3, [r3, #8]
 80042f8:	f003 0301 	and.w	r3, r3, #1
 80042fc:	2b01      	cmp	r3, #1
 80042fe:	d102      	bne.n	8004306 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004300:	6878      	ldr	r0, [r7, #4]
 8004302:	f009 fafb 	bl	800d8fc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	695a      	ldr	r2, [r3, #20]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8004314:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4618      	mov	r0, r3
 800431c:	f004 f9aa 	bl	8008674 <USB_ReadInterrupts>
 8004320:	4603      	mov	r3, r0
 8004322:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004326:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800432a:	f040 80b7 	bne.w	800449c <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800432e:	69fb      	ldr	r3, [r7, #28]
 8004330:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	69fa      	ldr	r2, [r7, #28]
 8004338:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800433c:	f023 0301 	bic.w	r3, r3, #1
 8004340:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	2110      	movs	r1, #16
 8004348:	4618      	mov	r0, r3
 800434a:	f003 fa7d 	bl	8007848 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800434e:	2300      	movs	r3, #0
 8004350:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004352:	e046      	b.n	80043e2 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004354:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004356:	015a      	lsls	r2, r3, #5
 8004358:	69fb      	ldr	r3, [r7, #28]
 800435a:	4413      	add	r3, r2
 800435c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004360:	461a      	mov	r2, r3
 8004362:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004366:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004368:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800436a:	015a      	lsls	r2, r3, #5
 800436c:	69fb      	ldr	r3, [r7, #28]
 800436e:	4413      	add	r3, r2
 8004370:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004378:	0151      	lsls	r1, r2, #5
 800437a:	69fa      	ldr	r2, [r7, #28]
 800437c:	440a      	add	r2, r1
 800437e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004382:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004386:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004388:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800438a:	015a      	lsls	r2, r3, #5
 800438c:	69fb      	ldr	r3, [r7, #28]
 800438e:	4413      	add	r3, r2
 8004390:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004394:	461a      	mov	r2, r3
 8004396:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800439a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800439c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800439e:	015a      	lsls	r2, r3, #5
 80043a0:	69fb      	ldr	r3, [r7, #28]
 80043a2:	4413      	add	r3, r2
 80043a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80043ac:	0151      	lsls	r1, r2, #5
 80043ae:	69fa      	ldr	r2, [r7, #28]
 80043b0:	440a      	add	r2, r1
 80043b2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80043b6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80043ba:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80043bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043be:	015a      	lsls	r2, r3, #5
 80043c0:	69fb      	ldr	r3, [r7, #28]
 80043c2:	4413      	add	r3, r2
 80043c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80043cc:	0151      	lsls	r1, r2, #5
 80043ce:	69fa      	ldr	r2, [r7, #28]
 80043d0:	440a      	add	r2, r1
 80043d2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80043d6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80043da:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80043dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043de:	3301      	adds	r3, #1
 80043e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	791b      	ldrb	r3, [r3, #4]
 80043e6:	461a      	mov	r2, r3
 80043e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d3b2      	bcc.n	8004354 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80043ee:	69fb      	ldr	r3, [r7, #28]
 80043f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80043f4:	69db      	ldr	r3, [r3, #28]
 80043f6:	69fa      	ldr	r2, [r7, #28]
 80043f8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80043fc:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8004400:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	7bdb      	ldrb	r3, [r3, #15]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d016      	beq.n	8004438 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800440a:	69fb      	ldr	r3, [r7, #28]
 800440c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004410:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004414:	69fa      	ldr	r2, [r7, #28]
 8004416:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800441a:	f043 030b 	orr.w	r3, r3, #11
 800441e:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004422:	69fb      	ldr	r3, [r7, #28]
 8004424:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004428:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800442a:	69fa      	ldr	r2, [r7, #28]
 800442c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004430:	f043 030b 	orr.w	r3, r3, #11
 8004434:	6453      	str	r3, [r2, #68]	@ 0x44
 8004436:	e015      	b.n	8004464 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004438:	69fb      	ldr	r3, [r7, #28]
 800443a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800443e:	695b      	ldr	r3, [r3, #20]
 8004440:	69fa      	ldr	r2, [r7, #28]
 8004442:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004446:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800444a:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 800444e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004450:	69fb      	ldr	r3, [r7, #28]
 8004452:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004456:	691b      	ldr	r3, [r3, #16]
 8004458:	69fa      	ldr	r2, [r7, #28]
 800445a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800445e:	f043 030b 	orr.w	r3, r3, #11
 8004462:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004464:	69fb      	ldr	r3, [r7, #28]
 8004466:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	69fa      	ldr	r2, [r7, #28]
 800446e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004472:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8004476:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6818      	ldr	r0, [r3, #0]
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004486:	461a      	mov	r2, r3
 8004488:	f004 f9b8 	bl	80087fc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	695a      	ldr	r2, [r3, #20]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800449a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4618      	mov	r0, r3
 80044a2:	f004 f8e7 	bl	8008674 <USB_ReadInterrupts>
 80044a6:	4603      	mov	r3, r0
 80044a8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80044ac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80044b0:	d123      	bne.n	80044fa <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4618      	mov	r0, r3
 80044b8:	f004 f97d 	bl	80087b6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4618      	mov	r0, r3
 80044c2:	f003 fa3a 	bl	800793a <USB_GetDevSpeed>
 80044c6:	4603      	mov	r3, r0
 80044c8:	461a      	mov	r2, r3
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681c      	ldr	r4, [r3, #0]
 80044d2:	f001 fa07 	bl	80058e4 <HAL_RCC_GetHCLKFreq>
 80044d6:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80044dc:	461a      	mov	r2, r3
 80044de:	4620      	mov	r0, r4
 80044e0:	f002 ff3e 	bl	8007360 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80044e4:	6878      	ldr	r0, [r7, #4]
 80044e6:	f009 f9e0 	bl	800d8aa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	695a      	ldr	r2, [r3, #20]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80044f8:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4618      	mov	r0, r3
 8004500:	f004 f8b8 	bl	8008674 <USB_ReadInterrupts>
 8004504:	4603      	mov	r3, r0
 8004506:	f003 0308 	and.w	r3, r3, #8
 800450a:	2b08      	cmp	r3, #8
 800450c:	d10a      	bne.n	8004524 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800450e:	6878      	ldr	r0, [r7, #4]
 8004510:	f009 f9bd 	bl	800d88e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	695a      	ldr	r2, [r3, #20]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f002 0208 	and.w	r2, r2, #8
 8004522:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4618      	mov	r0, r3
 800452a:	f004 f8a3 	bl	8008674 <USB_ReadInterrupts>
 800452e:	4603      	mov	r3, r0
 8004530:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004534:	2b80      	cmp	r3, #128	@ 0x80
 8004536:	d123      	bne.n	8004580 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8004538:	6a3b      	ldr	r3, [r7, #32]
 800453a:	699b      	ldr	r3, [r3, #24]
 800453c:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004540:	6a3b      	ldr	r3, [r7, #32]
 8004542:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004544:	2301      	movs	r3, #1
 8004546:	627b      	str	r3, [r7, #36]	@ 0x24
 8004548:	e014      	b.n	8004574 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800454a:	6879      	ldr	r1, [r7, #4]
 800454c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800454e:	4613      	mov	r3, r2
 8004550:	00db      	lsls	r3, r3, #3
 8004552:	4413      	add	r3, r2
 8004554:	009b      	lsls	r3, r3, #2
 8004556:	440b      	add	r3, r1
 8004558:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800455c:	781b      	ldrb	r3, [r3, #0]
 800455e:	2b01      	cmp	r3, #1
 8004560:	d105      	bne.n	800456e <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8004562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004564:	b2db      	uxtb	r3, r3
 8004566:	4619      	mov	r1, r3
 8004568:	6878      	ldr	r0, [r7, #4]
 800456a:	f000 fb08 	bl	8004b7e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800456e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004570:	3301      	adds	r3, #1
 8004572:	627b      	str	r3, [r7, #36]	@ 0x24
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	791b      	ldrb	r3, [r3, #4]
 8004578:	461a      	mov	r2, r3
 800457a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800457c:	4293      	cmp	r3, r2
 800457e:	d3e4      	bcc.n	800454a <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4618      	mov	r0, r3
 8004586:	f004 f875 	bl	8008674 <USB_ReadInterrupts>
 800458a:	4603      	mov	r3, r0
 800458c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004590:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004594:	d13c      	bne.n	8004610 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004596:	2301      	movs	r3, #1
 8004598:	627b      	str	r3, [r7, #36]	@ 0x24
 800459a:	e02b      	b.n	80045f4 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800459c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800459e:	015a      	lsls	r2, r3, #5
 80045a0:	69fb      	ldr	r3, [r7, #28]
 80045a2:	4413      	add	r3, r2
 80045a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80045ac:	6879      	ldr	r1, [r7, #4]
 80045ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045b0:	4613      	mov	r3, r2
 80045b2:	00db      	lsls	r3, r3, #3
 80045b4:	4413      	add	r3, r2
 80045b6:	009b      	lsls	r3, r3, #2
 80045b8:	440b      	add	r3, r1
 80045ba:	3318      	adds	r3, #24
 80045bc:	781b      	ldrb	r3, [r3, #0]
 80045be:	2b01      	cmp	r3, #1
 80045c0:	d115      	bne.n	80045ee <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80045c2:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	da12      	bge.n	80045ee <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80045c8:	6879      	ldr	r1, [r7, #4]
 80045ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045cc:	4613      	mov	r3, r2
 80045ce:	00db      	lsls	r3, r3, #3
 80045d0:	4413      	add	r3, r2
 80045d2:	009b      	lsls	r3, r3, #2
 80045d4:	440b      	add	r3, r1
 80045d6:	3317      	adds	r3, #23
 80045d8:	2201      	movs	r2, #1
 80045da:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80045dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045de:	b2db      	uxtb	r3, r3
 80045e0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80045e4:	b2db      	uxtb	r3, r3
 80045e6:	4619      	mov	r1, r3
 80045e8:	6878      	ldr	r0, [r7, #4]
 80045ea:	f000 fac8 	bl	8004b7e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80045ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045f0:	3301      	adds	r3, #1
 80045f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	791b      	ldrb	r3, [r3, #4]
 80045f8:	461a      	mov	r2, r3
 80045fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d3cd      	bcc.n	800459c <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	695a      	ldr	r2, [r3, #20]
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800460e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4618      	mov	r0, r3
 8004616:	f004 f82d 	bl	8008674 <USB_ReadInterrupts>
 800461a:	4603      	mov	r3, r0
 800461c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004620:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004624:	d156      	bne.n	80046d4 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004626:	2301      	movs	r3, #1
 8004628:	627b      	str	r3, [r7, #36]	@ 0x24
 800462a:	e045      	b.n	80046b8 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800462c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800462e:	015a      	lsls	r2, r3, #5
 8004630:	69fb      	ldr	r3, [r7, #28]
 8004632:	4413      	add	r3, r2
 8004634:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800463c:	6879      	ldr	r1, [r7, #4]
 800463e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004640:	4613      	mov	r3, r2
 8004642:	00db      	lsls	r3, r3, #3
 8004644:	4413      	add	r3, r2
 8004646:	009b      	lsls	r3, r3, #2
 8004648:	440b      	add	r3, r1
 800464a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800464e:	781b      	ldrb	r3, [r3, #0]
 8004650:	2b01      	cmp	r3, #1
 8004652:	d12e      	bne.n	80046b2 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004654:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004656:	2b00      	cmp	r3, #0
 8004658:	da2b      	bge.n	80046b2 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800465a:	69bb      	ldr	r3, [r7, #24]
 800465c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8004666:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800466a:	429a      	cmp	r2, r3
 800466c:	d121      	bne.n	80046b2 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800466e:	6879      	ldr	r1, [r7, #4]
 8004670:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004672:	4613      	mov	r3, r2
 8004674:	00db      	lsls	r3, r3, #3
 8004676:	4413      	add	r3, r2
 8004678:	009b      	lsls	r3, r3, #2
 800467a:	440b      	add	r3, r1
 800467c:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8004680:	2201      	movs	r2, #1
 8004682:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8004684:	6a3b      	ldr	r3, [r7, #32]
 8004686:	699b      	ldr	r3, [r3, #24]
 8004688:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800468c:	6a3b      	ldr	r3, [r7, #32]
 800468e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8004690:	6a3b      	ldr	r3, [r7, #32]
 8004692:	695b      	ldr	r3, [r3, #20]
 8004694:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004698:	2b00      	cmp	r3, #0
 800469a:	d10a      	bne.n	80046b2 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800469c:	69fb      	ldr	r3, [r7, #28]
 800469e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	69fa      	ldr	r2, [r7, #28]
 80046a6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80046aa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80046ae:	6053      	str	r3, [r2, #4]
            break;
 80046b0:	e008      	b.n	80046c4 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80046b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046b4:	3301      	adds	r3, #1
 80046b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	791b      	ldrb	r3, [r3, #4]
 80046bc:	461a      	mov	r2, r3
 80046be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d3b3      	bcc.n	800462c <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	695a      	ldr	r2, [r3, #20]
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80046d2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4618      	mov	r0, r3
 80046da:	f003 ffcb 	bl	8008674 <USB_ReadInterrupts>
 80046de:	4603      	mov	r3, r0
 80046e0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80046e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046e8:	d10a      	bne.n	8004700 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80046ea:	6878      	ldr	r0, [r7, #4]
 80046ec:	f009 f95e 	bl	800d9ac <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	695a      	ldr	r2, [r3, #20]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80046fe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4618      	mov	r0, r3
 8004706:	f003 ffb5 	bl	8008674 <USB_ReadInterrupts>
 800470a:	4603      	mov	r3, r0
 800470c:	f003 0304 	and.w	r3, r3, #4
 8004710:	2b04      	cmp	r3, #4
 8004712:	d115      	bne.n	8004740 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800471c:	69bb      	ldr	r3, [r7, #24]
 800471e:	f003 0304 	and.w	r3, r3, #4
 8004722:	2b00      	cmp	r3, #0
 8004724:	d002      	beq.n	800472c <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004726:	6878      	ldr	r0, [r7, #4]
 8004728:	f009 f94e 	bl	800d9c8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	6859      	ldr	r1, [r3, #4]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	69ba      	ldr	r2, [r7, #24]
 8004738:	430a      	orrs	r2, r1
 800473a:	605a      	str	r2, [r3, #4]
 800473c:	e000      	b.n	8004740 <HAL_PCD_IRQHandler+0x93c>
      return;
 800473e:	bf00      	nop
    }
  }
}
 8004740:	3734      	adds	r7, #52	@ 0x34
 8004742:	46bd      	mov	sp, r7
 8004744:	bd90      	pop	{r4, r7, pc}

08004746 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004746:	b580      	push	{r7, lr}
 8004748:	b082      	sub	sp, #8
 800474a:	af00      	add	r7, sp, #0
 800474c:	6078      	str	r0, [r7, #4]
 800474e:	460b      	mov	r3, r1
 8004750:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004758:	2b01      	cmp	r3, #1
 800475a:	d101      	bne.n	8004760 <HAL_PCD_SetAddress+0x1a>
 800475c:	2302      	movs	r3, #2
 800475e:	e012      	b.n	8004786 <HAL_PCD_SetAddress+0x40>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2201      	movs	r2, #1
 8004764:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	78fa      	ldrb	r2, [r7, #3]
 800476c:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	78fa      	ldrb	r2, [r7, #3]
 8004774:	4611      	mov	r1, r2
 8004776:	4618      	mov	r0, r3
 8004778:	f003 ff14 	bl	80085a4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2200      	movs	r2, #0
 8004780:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004784:	2300      	movs	r3, #0
}
 8004786:	4618      	mov	r0, r3
 8004788:	3708      	adds	r7, #8
 800478a:	46bd      	mov	sp, r7
 800478c:	bd80      	pop	{r7, pc}

0800478e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800478e:	b580      	push	{r7, lr}
 8004790:	b084      	sub	sp, #16
 8004792:	af00      	add	r7, sp, #0
 8004794:	6078      	str	r0, [r7, #4]
 8004796:	4608      	mov	r0, r1
 8004798:	4611      	mov	r1, r2
 800479a:	461a      	mov	r2, r3
 800479c:	4603      	mov	r3, r0
 800479e:	70fb      	strb	r3, [r7, #3]
 80047a0:	460b      	mov	r3, r1
 80047a2:	803b      	strh	r3, [r7, #0]
 80047a4:	4613      	mov	r3, r2
 80047a6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80047a8:	2300      	movs	r3, #0
 80047aa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80047ac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	da0f      	bge.n	80047d4 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80047b4:	78fb      	ldrb	r3, [r7, #3]
 80047b6:	f003 020f 	and.w	r2, r3, #15
 80047ba:	4613      	mov	r3, r2
 80047bc:	00db      	lsls	r3, r3, #3
 80047be:	4413      	add	r3, r2
 80047c0:	009b      	lsls	r3, r3, #2
 80047c2:	3310      	adds	r3, #16
 80047c4:	687a      	ldr	r2, [r7, #4]
 80047c6:	4413      	add	r3, r2
 80047c8:	3304      	adds	r3, #4
 80047ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	2201      	movs	r2, #1
 80047d0:	705a      	strb	r2, [r3, #1]
 80047d2:	e00f      	b.n	80047f4 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80047d4:	78fb      	ldrb	r3, [r7, #3]
 80047d6:	f003 020f 	and.w	r2, r3, #15
 80047da:	4613      	mov	r3, r2
 80047dc:	00db      	lsls	r3, r3, #3
 80047de:	4413      	add	r3, r2
 80047e0:	009b      	lsls	r3, r3, #2
 80047e2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80047e6:	687a      	ldr	r2, [r7, #4]
 80047e8:	4413      	add	r3, r2
 80047ea:	3304      	adds	r3, #4
 80047ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	2200      	movs	r2, #0
 80047f2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80047f4:	78fb      	ldrb	r3, [r7, #3]
 80047f6:	f003 030f 	and.w	r3, r3, #15
 80047fa:	b2da      	uxtb	r2, r3
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004800:	883a      	ldrh	r2, [r7, #0]
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	78ba      	ldrb	r2, [r7, #2]
 800480a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	785b      	ldrb	r3, [r3, #1]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d004      	beq.n	800481e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	781b      	ldrb	r3, [r3, #0]
 8004818:	461a      	mov	r2, r3
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800481e:	78bb      	ldrb	r3, [r7, #2]
 8004820:	2b02      	cmp	r3, #2
 8004822:	d102      	bne.n	800482a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	2200      	movs	r2, #0
 8004828:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004830:	2b01      	cmp	r3, #1
 8004832:	d101      	bne.n	8004838 <HAL_PCD_EP_Open+0xaa>
 8004834:	2302      	movs	r3, #2
 8004836:	e00e      	b.n	8004856 <HAL_PCD_EP_Open+0xc8>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2201      	movs	r2, #1
 800483c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	68f9      	ldr	r1, [r7, #12]
 8004846:	4618      	mov	r0, r3
 8004848:	f003 f89c 	bl	8007984 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2200      	movs	r2, #0
 8004850:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8004854:	7afb      	ldrb	r3, [r7, #11]
}
 8004856:	4618      	mov	r0, r3
 8004858:	3710      	adds	r7, #16
 800485a:	46bd      	mov	sp, r7
 800485c:	bd80      	pop	{r7, pc}

0800485e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800485e:	b580      	push	{r7, lr}
 8004860:	b084      	sub	sp, #16
 8004862:	af00      	add	r7, sp, #0
 8004864:	6078      	str	r0, [r7, #4]
 8004866:	460b      	mov	r3, r1
 8004868:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800486a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800486e:	2b00      	cmp	r3, #0
 8004870:	da0f      	bge.n	8004892 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004872:	78fb      	ldrb	r3, [r7, #3]
 8004874:	f003 020f 	and.w	r2, r3, #15
 8004878:	4613      	mov	r3, r2
 800487a:	00db      	lsls	r3, r3, #3
 800487c:	4413      	add	r3, r2
 800487e:	009b      	lsls	r3, r3, #2
 8004880:	3310      	adds	r3, #16
 8004882:	687a      	ldr	r2, [r7, #4]
 8004884:	4413      	add	r3, r2
 8004886:	3304      	adds	r3, #4
 8004888:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	2201      	movs	r2, #1
 800488e:	705a      	strb	r2, [r3, #1]
 8004890:	e00f      	b.n	80048b2 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004892:	78fb      	ldrb	r3, [r7, #3]
 8004894:	f003 020f 	and.w	r2, r3, #15
 8004898:	4613      	mov	r3, r2
 800489a:	00db      	lsls	r3, r3, #3
 800489c:	4413      	add	r3, r2
 800489e:	009b      	lsls	r3, r3, #2
 80048a0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80048a4:	687a      	ldr	r2, [r7, #4]
 80048a6:	4413      	add	r3, r2
 80048a8:	3304      	adds	r3, #4
 80048aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	2200      	movs	r2, #0
 80048b0:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80048b2:	78fb      	ldrb	r3, [r7, #3]
 80048b4:	f003 030f 	and.w	r3, r3, #15
 80048b8:	b2da      	uxtb	r2, r3
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80048c4:	2b01      	cmp	r3, #1
 80048c6:	d101      	bne.n	80048cc <HAL_PCD_EP_Close+0x6e>
 80048c8:	2302      	movs	r3, #2
 80048ca:	e00e      	b.n	80048ea <HAL_PCD_EP_Close+0x8c>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2201      	movs	r2, #1
 80048d0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	68f9      	ldr	r1, [r7, #12]
 80048da:	4618      	mov	r0, r3
 80048dc:	f003 f8da 	bl	8007a94 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2200      	movs	r2, #0
 80048e4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 80048e8:	2300      	movs	r3, #0
}
 80048ea:	4618      	mov	r0, r3
 80048ec:	3710      	adds	r7, #16
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bd80      	pop	{r7, pc}

080048f2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80048f2:	b580      	push	{r7, lr}
 80048f4:	b086      	sub	sp, #24
 80048f6:	af00      	add	r7, sp, #0
 80048f8:	60f8      	str	r0, [r7, #12]
 80048fa:	607a      	str	r2, [r7, #4]
 80048fc:	603b      	str	r3, [r7, #0]
 80048fe:	460b      	mov	r3, r1
 8004900:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004902:	7afb      	ldrb	r3, [r7, #11]
 8004904:	f003 020f 	and.w	r2, r3, #15
 8004908:	4613      	mov	r3, r2
 800490a:	00db      	lsls	r3, r3, #3
 800490c:	4413      	add	r3, r2
 800490e:	009b      	lsls	r3, r3, #2
 8004910:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004914:	68fa      	ldr	r2, [r7, #12]
 8004916:	4413      	add	r3, r2
 8004918:	3304      	adds	r3, #4
 800491a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800491c:	697b      	ldr	r3, [r7, #20]
 800491e:	687a      	ldr	r2, [r7, #4]
 8004920:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004922:	697b      	ldr	r3, [r7, #20]
 8004924:	683a      	ldr	r2, [r7, #0]
 8004926:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004928:	697b      	ldr	r3, [r7, #20]
 800492a:	2200      	movs	r2, #0
 800492c:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800492e:	697b      	ldr	r3, [r7, #20]
 8004930:	2200      	movs	r2, #0
 8004932:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004934:	7afb      	ldrb	r3, [r7, #11]
 8004936:	f003 030f 	and.w	r3, r3, #15
 800493a:	b2da      	uxtb	r2, r3
 800493c:	697b      	ldr	r3, [r7, #20]
 800493e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	799b      	ldrb	r3, [r3, #6]
 8004944:	2b01      	cmp	r3, #1
 8004946:	d102      	bne.n	800494e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004948:	687a      	ldr	r2, [r7, #4]
 800494a:	697b      	ldr	r3, [r7, #20]
 800494c:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	6818      	ldr	r0, [r3, #0]
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	799b      	ldrb	r3, [r3, #6]
 8004956:	461a      	mov	r2, r3
 8004958:	6979      	ldr	r1, [r7, #20]
 800495a:	f003 f977 	bl	8007c4c <USB_EPStartXfer>

  return HAL_OK;
 800495e:	2300      	movs	r3, #0
}
 8004960:	4618      	mov	r0, r3
 8004962:	3718      	adds	r7, #24
 8004964:	46bd      	mov	sp, r7
 8004966:	bd80      	pop	{r7, pc}

08004968 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8004968:	b480      	push	{r7}
 800496a:	b083      	sub	sp, #12
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
 8004970:	460b      	mov	r3, r1
 8004972:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004974:	78fb      	ldrb	r3, [r7, #3]
 8004976:	f003 020f 	and.w	r2, r3, #15
 800497a:	6879      	ldr	r1, [r7, #4]
 800497c:	4613      	mov	r3, r2
 800497e:	00db      	lsls	r3, r3, #3
 8004980:	4413      	add	r3, r2
 8004982:	009b      	lsls	r3, r3, #2
 8004984:	440b      	add	r3, r1
 8004986:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 800498a:	681b      	ldr	r3, [r3, #0]
}
 800498c:	4618      	mov	r0, r3
 800498e:	370c      	adds	r7, #12
 8004990:	46bd      	mov	sp, r7
 8004992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004996:	4770      	bx	lr

08004998 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b086      	sub	sp, #24
 800499c:	af00      	add	r7, sp, #0
 800499e:	60f8      	str	r0, [r7, #12]
 80049a0:	607a      	str	r2, [r7, #4]
 80049a2:	603b      	str	r3, [r7, #0]
 80049a4:	460b      	mov	r3, r1
 80049a6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80049a8:	7afb      	ldrb	r3, [r7, #11]
 80049aa:	f003 020f 	and.w	r2, r3, #15
 80049ae:	4613      	mov	r3, r2
 80049b0:	00db      	lsls	r3, r3, #3
 80049b2:	4413      	add	r3, r2
 80049b4:	009b      	lsls	r3, r3, #2
 80049b6:	3310      	adds	r3, #16
 80049b8:	68fa      	ldr	r2, [r7, #12]
 80049ba:	4413      	add	r3, r2
 80049bc:	3304      	adds	r3, #4
 80049be:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80049c0:	697b      	ldr	r3, [r7, #20]
 80049c2:	687a      	ldr	r2, [r7, #4]
 80049c4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80049c6:	697b      	ldr	r3, [r7, #20]
 80049c8:	683a      	ldr	r2, [r7, #0]
 80049ca:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80049cc:	697b      	ldr	r3, [r7, #20]
 80049ce:	2200      	movs	r2, #0
 80049d0:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80049d2:	697b      	ldr	r3, [r7, #20]
 80049d4:	2201      	movs	r2, #1
 80049d6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80049d8:	7afb      	ldrb	r3, [r7, #11]
 80049da:	f003 030f 	and.w	r3, r3, #15
 80049de:	b2da      	uxtb	r2, r3
 80049e0:	697b      	ldr	r3, [r7, #20]
 80049e2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	799b      	ldrb	r3, [r3, #6]
 80049e8:	2b01      	cmp	r3, #1
 80049ea:	d102      	bne.n	80049f2 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80049ec:	687a      	ldr	r2, [r7, #4]
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	6818      	ldr	r0, [r3, #0]
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	799b      	ldrb	r3, [r3, #6]
 80049fa:	461a      	mov	r2, r3
 80049fc:	6979      	ldr	r1, [r7, #20]
 80049fe:	f003 f925 	bl	8007c4c <USB_EPStartXfer>

  return HAL_OK;
 8004a02:	2300      	movs	r3, #0
}
 8004a04:	4618      	mov	r0, r3
 8004a06:	3718      	adds	r7, #24
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bd80      	pop	{r7, pc}

08004a0c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b084      	sub	sp, #16
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
 8004a14:	460b      	mov	r3, r1
 8004a16:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004a18:	78fb      	ldrb	r3, [r7, #3]
 8004a1a:	f003 030f 	and.w	r3, r3, #15
 8004a1e:	687a      	ldr	r2, [r7, #4]
 8004a20:	7912      	ldrb	r2, [r2, #4]
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d901      	bls.n	8004a2a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004a26:	2301      	movs	r3, #1
 8004a28:	e04f      	b.n	8004aca <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004a2a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	da0f      	bge.n	8004a52 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004a32:	78fb      	ldrb	r3, [r7, #3]
 8004a34:	f003 020f 	and.w	r2, r3, #15
 8004a38:	4613      	mov	r3, r2
 8004a3a:	00db      	lsls	r3, r3, #3
 8004a3c:	4413      	add	r3, r2
 8004a3e:	009b      	lsls	r3, r3, #2
 8004a40:	3310      	adds	r3, #16
 8004a42:	687a      	ldr	r2, [r7, #4]
 8004a44:	4413      	add	r3, r2
 8004a46:	3304      	adds	r3, #4
 8004a48:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	2201      	movs	r2, #1
 8004a4e:	705a      	strb	r2, [r3, #1]
 8004a50:	e00d      	b.n	8004a6e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004a52:	78fa      	ldrb	r2, [r7, #3]
 8004a54:	4613      	mov	r3, r2
 8004a56:	00db      	lsls	r3, r3, #3
 8004a58:	4413      	add	r3, r2
 8004a5a:	009b      	lsls	r3, r3, #2
 8004a5c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004a60:	687a      	ldr	r2, [r7, #4]
 8004a62:	4413      	add	r3, r2
 8004a64:	3304      	adds	r3, #4
 8004a66:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	2201      	movs	r2, #1
 8004a72:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004a74:	78fb      	ldrb	r3, [r7, #3]
 8004a76:	f003 030f 	and.w	r3, r3, #15
 8004a7a:	b2da      	uxtb	r2, r3
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004a86:	2b01      	cmp	r3, #1
 8004a88:	d101      	bne.n	8004a8e <HAL_PCD_EP_SetStall+0x82>
 8004a8a:	2302      	movs	r3, #2
 8004a8c:	e01d      	b.n	8004aca <HAL_PCD_EP_SetStall+0xbe>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2201      	movs	r2, #1
 8004a92:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	68f9      	ldr	r1, [r7, #12]
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	f003 fcad 	bl	80083fc <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004aa2:	78fb      	ldrb	r3, [r7, #3]
 8004aa4:	f003 030f 	and.w	r3, r3, #15
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d109      	bne.n	8004ac0 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6818      	ldr	r0, [r3, #0]
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	7999      	ldrb	r1, [r3, #6]
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004aba:	461a      	mov	r2, r3
 8004abc:	f003 fe9e 	bl	80087fc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004ac8:	2300      	movs	r3, #0
}
 8004aca:	4618      	mov	r0, r3
 8004acc:	3710      	adds	r7, #16
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	bd80      	pop	{r7, pc}

08004ad2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004ad2:	b580      	push	{r7, lr}
 8004ad4:	b084      	sub	sp, #16
 8004ad6:	af00      	add	r7, sp, #0
 8004ad8:	6078      	str	r0, [r7, #4]
 8004ada:	460b      	mov	r3, r1
 8004adc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004ade:	78fb      	ldrb	r3, [r7, #3]
 8004ae0:	f003 030f 	and.w	r3, r3, #15
 8004ae4:	687a      	ldr	r2, [r7, #4]
 8004ae6:	7912      	ldrb	r2, [r2, #4]
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d901      	bls.n	8004af0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004aec:	2301      	movs	r3, #1
 8004aee:	e042      	b.n	8004b76 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004af0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	da0f      	bge.n	8004b18 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004af8:	78fb      	ldrb	r3, [r7, #3]
 8004afa:	f003 020f 	and.w	r2, r3, #15
 8004afe:	4613      	mov	r3, r2
 8004b00:	00db      	lsls	r3, r3, #3
 8004b02:	4413      	add	r3, r2
 8004b04:	009b      	lsls	r3, r3, #2
 8004b06:	3310      	adds	r3, #16
 8004b08:	687a      	ldr	r2, [r7, #4]
 8004b0a:	4413      	add	r3, r2
 8004b0c:	3304      	adds	r3, #4
 8004b0e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	2201      	movs	r2, #1
 8004b14:	705a      	strb	r2, [r3, #1]
 8004b16:	e00f      	b.n	8004b38 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004b18:	78fb      	ldrb	r3, [r7, #3]
 8004b1a:	f003 020f 	and.w	r2, r3, #15
 8004b1e:	4613      	mov	r3, r2
 8004b20:	00db      	lsls	r3, r3, #3
 8004b22:	4413      	add	r3, r2
 8004b24:	009b      	lsls	r3, r3, #2
 8004b26:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004b2a:	687a      	ldr	r2, [r7, #4]
 8004b2c:	4413      	add	r3, r2
 8004b2e:	3304      	adds	r3, #4
 8004b30:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	2200      	movs	r2, #0
 8004b36:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004b3e:	78fb      	ldrb	r3, [r7, #3]
 8004b40:	f003 030f 	and.w	r3, r3, #15
 8004b44:	b2da      	uxtb	r2, r3
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004b50:	2b01      	cmp	r3, #1
 8004b52:	d101      	bne.n	8004b58 <HAL_PCD_EP_ClrStall+0x86>
 8004b54:	2302      	movs	r3, #2
 8004b56:	e00e      	b.n	8004b76 <HAL_PCD_EP_ClrStall+0xa4>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2201      	movs	r2, #1
 8004b5c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	68f9      	ldr	r1, [r7, #12]
 8004b66:	4618      	mov	r0, r3
 8004b68:	f003 fcb6 	bl	80084d8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2200      	movs	r2, #0
 8004b70:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004b74:	2300      	movs	r3, #0
}
 8004b76:	4618      	mov	r0, r3
 8004b78:	3710      	adds	r7, #16
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	bd80      	pop	{r7, pc}

08004b7e <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004b7e:	b580      	push	{r7, lr}
 8004b80:	b084      	sub	sp, #16
 8004b82:	af00      	add	r7, sp, #0
 8004b84:	6078      	str	r0, [r7, #4]
 8004b86:	460b      	mov	r3, r1
 8004b88:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004b8a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	da0c      	bge.n	8004bac <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004b92:	78fb      	ldrb	r3, [r7, #3]
 8004b94:	f003 020f 	and.w	r2, r3, #15
 8004b98:	4613      	mov	r3, r2
 8004b9a:	00db      	lsls	r3, r3, #3
 8004b9c:	4413      	add	r3, r2
 8004b9e:	009b      	lsls	r3, r3, #2
 8004ba0:	3310      	adds	r3, #16
 8004ba2:	687a      	ldr	r2, [r7, #4]
 8004ba4:	4413      	add	r3, r2
 8004ba6:	3304      	adds	r3, #4
 8004ba8:	60fb      	str	r3, [r7, #12]
 8004baa:	e00c      	b.n	8004bc6 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004bac:	78fb      	ldrb	r3, [r7, #3]
 8004bae:	f003 020f 	and.w	r2, r3, #15
 8004bb2:	4613      	mov	r3, r2
 8004bb4:	00db      	lsls	r3, r3, #3
 8004bb6:	4413      	add	r3, r2
 8004bb8:	009b      	lsls	r3, r3, #2
 8004bba:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004bbe:	687a      	ldr	r2, [r7, #4]
 8004bc0:	4413      	add	r3, r2
 8004bc2:	3304      	adds	r3, #4
 8004bc4:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	68f9      	ldr	r1, [r7, #12]
 8004bcc:	4618      	mov	r0, r3
 8004bce:	f003 fad5 	bl	800817c <USB_EPStopXfer>
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004bd6:	7afb      	ldrb	r3, [r7, #11]
}
 8004bd8:	4618      	mov	r0, r3
 8004bda:	3710      	adds	r7, #16
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	bd80      	pop	{r7, pc}

08004be0 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b08a      	sub	sp, #40	@ 0x28
 8004be4:	af02      	add	r7, sp, #8
 8004be6:	6078      	str	r0, [r7, #4]
 8004be8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bf0:	697b      	ldr	r3, [r7, #20]
 8004bf2:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004bf4:	683a      	ldr	r2, [r7, #0]
 8004bf6:	4613      	mov	r3, r2
 8004bf8:	00db      	lsls	r3, r3, #3
 8004bfa:	4413      	add	r3, r2
 8004bfc:	009b      	lsls	r3, r3, #2
 8004bfe:	3310      	adds	r3, #16
 8004c00:	687a      	ldr	r2, [r7, #4]
 8004c02:	4413      	add	r3, r2
 8004c04:	3304      	adds	r3, #4
 8004c06:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	695a      	ldr	r2, [r3, #20]
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	691b      	ldr	r3, [r3, #16]
 8004c10:	429a      	cmp	r2, r3
 8004c12:	d901      	bls.n	8004c18 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004c14:	2301      	movs	r3, #1
 8004c16:	e06b      	b.n	8004cf0 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	691a      	ldr	r2, [r3, #16]
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	695b      	ldr	r3, [r3, #20]
 8004c20:	1ad3      	subs	r3, r2, r3
 8004c22:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	689b      	ldr	r3, [r3, #8]
 8004c28:	69fa      	ldr	r2, [r7, #28]
 8004c2a:	429a      	cmp	r2, r3
 8004c2c:	d902      	bls.n	8004c34 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	689b      	ldr	r3, [r3, #8]
 8004c32:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004c34:	69fb      	ldr	r3, [r7, #28]
 8004c36:	3303      	adds	r3, #3
 8004c38:	089b      	lsrs	r3, r3, #2
 8004c3a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004c3c:	e02a      	b.n	8004c94 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	691a      	ldr	r2, [r3, #16]
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	695b      	ldr	r3, [r3, #20]
 8004c46:	1ad3      	subs	r3, r2, r3
 8004c48:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	689b      	ldr	r3, [r3, #8]
 8004c4e:	69fa      	ldr	r2, [r7, #28]
 8004c50:	429a      	cmp	r2, r3
 8004c52:	d902      	bls.n	8004c5a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	689b      	ldr	r3, [r3, #8]
 8004c58:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004c5a:	69fb      	ldr	r3, [r7, #28]
 8004c5c:	3303      	adds	r3, #3
 8004c5e:	089b      	lsrs	r3, r3, #2
 8004c60:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	68d9      	ldr	r1, [r3, #12]
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	b2da      	uxtb	r2, r3
 8004c6a:	69fb      	ldr	r3, [r7, #28]
 8004c6c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004c72:	9300      	str	r3, [sp, #0]
 8004c74:	4603      	mov	r3, r0
 8004c76:	6978      	ldr	r0, [r7, #20]
 8004c78:	f003 fb2a 	bl	80082d0 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	68da      	ldr	r2, [r3, #12]
 8004c80:	69fb      	ldr	r3, [r7, #28]
 8004c82:	441a      	add	r2, r3
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	695a      	ldr	r2, [r3, #20]
 8004c8c:	69fb      	ldr	r3, [r7, #28]
 8004c8e:	441a      	add	r2, r3
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	015a      	lsls	r2, r3, #5
 8004c98:	693b      	ldr	r3, [r7, #16]
 8004c9a:	4413      	add	r3, r2
 8004c9c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ca0:	699b      	ldr	r3, [r3, #24]
 8004ca2:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004ca4:	69ba      	ldr	r2, [r7, #24]
 8004ca6:	429a      	cmp	r2, r3
 8004ca8:	d809      	bhi.n	8004cbe <PCD_WriteEmptyTxFifo+0xde>
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	695a      	ldr	r2, [r3, #20]
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004cb2:	429a      	cmp	r2, r3
 8004cb4:	d203      	bcs.n	8004cbe <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	691b      	ldr	r3, [r3, #16]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d1bf      	bne.n	8004c3e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	691a      	ldr	r2, [r3, #16]
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	695b      	ldr	r3, [r3, #20]
 8004cc6:	429a      	cmp	r2, r3
 8004cc8:	d811      	bhi.n	8004cee <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	f003 030f 	and.w	r3, r3, #15
 8004cd0:	2201      	movs	r2, #1
 8004cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8004cd6:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004cd8:	693b      	ldr	r3, [r7, #16]
 8004cda:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004cde:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	43db      	mvns	r3, r3
 8004ce4:	6939      	ldr	r1, [r7, #16]
 8004ce6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004cea:	4013      	ands	r3, r2
 8004cec:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8004cee:	2300      	movs	r3, #0
}
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	3720      	adds	r7, #32
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	bd80      	pop	{r7, pc}

08004cf8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b088      	sub	sp, #32
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
 8004d00:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d08:	69fb      	ldr	r3, [r7, #28]
 8004d0a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004d0c:	69fb      	ldr	r3, [r7, #28]
 8004d0e:	333c      	adds	r3, #60	@ 0x3c
 8004d10:	3304      	adds	r3, #4
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	015a      	lsls	r2, r3, #5
 8004d1a:	69bb      	ldr	r3, [r7, #24]
 8004d1c:	4413      	add	r3, r2
 8004d1e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d22:	689b      	ldr	r3, [r3, #8]
 8004d24:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	799b      	ldrb	r3, [r3, #6]
 8004d2a:	2b01      	cmp	r3, #1
 8004d2c:	d17b      	bne.n	8004e26 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004d2e:	693b      	ldr	r3, [r7, #16]
 8004d30:	f003 0308 	and.w	r3, r3, #8
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d015      	beq.n	8004d64 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004d38:	697b      	ldr	r3, [r7, #20]
 8004d3a:	4a61      	ldr	r2, [pc, #388]	@ (8004ec0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	f240 80b9 	bls.w	8004eb4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004d42:	693b      	ldr	r3, [r7, #16]
 8004d44:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	f000 80b3 	beq.w	8004eb4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	015a      	lsls	r2, r3, #5
 8004d52:	69bb      	ldr	r3, [r7, #24]
 8004d54:	4413      	add	r3, r2
 8004d56:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d5a:	461a      	mov	r2, r3
 8004d5c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004d60:	6093      	str	r3, [r2, #8]
 8004d62:	e0a7      	b.n	8004eb4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004d64:	693b      	ldr	r3, [r7, #16]
 8004d66:	f003 0320 	and.w	r3, r3, #32
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d009      	beq.n	8004d82 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	015a      	lsls	r2, r3, #5
 8004d72:	69bb      	ldr	r3, [r7, #24]
 8004d74:	4413      	add	r3, r2
 8004d76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d7a:	461a      	mov	r2, r3
 8004d7c:	2320      	movs	r3, #32
 8004d7e:	6093      	str	r3, [r2, #8]
 8004d80:	e098      	b.n	8004eb4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004d82:	693b      	ldr	r3, [r7, #16]
 8004d84:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	f040 8093 	bne.w	8004eb4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004d8e:	697b      	ldr	r3, [r7, #20]
 8004d90:	4a4b      	ldr	r2, [pc, #300]	@ (8004ec0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d90f      	bls.n	8004db6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004d96:	693b      	ldr	r3, [r7, #16]
 8004d98:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d00a      	beq.n	8004db6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	015a      	lsls	r2, r3, #5
 8004da4:	69bb      	ldr	r3, [r7, #24]
 8004da6:	4413      	add	r3, r2
 8004da8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004dac:	461a      	mov	r2, r3
 8004dae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004db2:	6093      	str	r3, [r2, #8]
 8004db4:	e07e      	b.n	8004eb4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004db6:	683a      	ldr	r2, [r7, #0]
 8004db8:	4613      	mov	r3, r2
 8004dba:	00db      	lsls	r3, r3, #3
 8004dbc:	4413      	add	r3, r2
 8004dbe:	009b      	lsls	r3, r3, #2
 8004dc0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004dc4:	687a      	ldr	r2, [r7, #4]
 8004dc6:	4413      	add	r3, r2
 8004dc8:	3304      	adds	r3, #4
 8004dca:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	6a1a      	ldr	r2, [r3, #32]
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	0159      	lsls	r1, r3, #5
 8004dd4:	69bb      	ldr	r3, [r7, #24]
 8004dd6:	440b      	add	r3, r1
 8004dd8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ddc:	691b      	ldr	r3, [r3, #16]
 8004dde:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004de2:	1ad2      	subs	r2, r2, r3
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d114      	bne.n	8004e18 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	691b      	ldr	r3, [r3, #16]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d109      	bne.n	8004e0a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6818      	ldr	r0, [r3, #0]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004e00:	461a      	mov	r2, r3
 8004e02:	2101      	movs	r1, #1
 8004e04:	f003 fcfa 	bl	80087fc <USB_EP0_OutStart>
 8004e08:	e006      	b.n	8004e18 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	68da      	ldr	r2, [r3, #12]
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	695b      	ldr	r3, [r3, #20]
 8004e12:	441a      	add	r2, r3
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	b2db      	uxtb	r3, r3
 8004e1c:	4619      	mov	r1, r3
 8004e1e:	6878      	ldr	r0, [r7, #4]
 8004e20:	f008 fd00 	bl	800d824 <HAL_PCD_DataOutStageCallback>
 8004e24:	e046      	b.n	8004eb4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004e26:	697b      	ldr	r3, [r7, #20]
 8004e28:	4a26      	ldr	r2, [pc, #152]	@ (8004ec4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d124      	bne.n	8004e78 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004e2e:	693b      	ldr	r3, [r7, #16]
 8004e30:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d00a      	beq.n	8004e4e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	015a      	lsls	r2, r3, #5
 8004e3c:	69bb      	ldr	r3, [r7, #24]
 8004e3e:	4413      	add	r3, r2
 8004e40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e44:	461a      	mov	r2, r3
 8004e46:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004e4a:	6093      	str	r3, [r2, #8]
 8004e4c:	e032      	b.n	8004eb4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004e4e:	693b      	ldr	r3, [r7, #16]
 8004e50:	f003 0320 	and.w	r3, r3, #32
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d008      	beq.n	8004e6a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	015a      	lsls	r2, r3, #5
 8004e5c:	69bb      	ldr	r3, [r7, #24]
 8004e5e:	4413      	add	r3, r2
 8004e60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e64:	461a      	mov	r2, r3
 8004e66:	2320      	movs	r3, #32
 8004e68:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	b2db      	uxtb	r3, r3
 8004e6e:	4619      	mov	r1, r3
 8004e70:	6878      	ldr	r0, [r7, #4]
 8004e72:	f008 fcd7 	bl	800d824 <HAL_PCD_DataOutStageCallback>
 8004e76:	e01d      	b.n	8004eb4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d114      	bne.n	8004ea8 <PCD_EP_OutXfrComplete_int+0x1b0>
 8004e7e:	6879      	ldr	r1, [r7, #4]
 8004e80:	683a      	ldr	r2, [r7, #0]
 8004e82:	4613      	mov	r3, r2
 8004e84:	00db      	lsls	r3, r3, #3
 8004e86:	4413      	add	r3, r2
 8004e88:	009b      	lsls	r3, r3, #2
 8004e8a:	440b      	add	r3, r1
 8004e8c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d108      	bne.n	8004ea8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6818      	ldr	r0, [r3, #0]
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004ea0:	461a      	mov	r2, r3
 8004ea2:	2100      	movs	r1, #0
 8004ea4:	f003 fcaa 	bl	80087fc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	b2db      	uxtb	r3, r3
 8004eac:	4619      	mov	r1, r3
 8004eae:	6878      	ldr	r0, [r7, #4]
 8004eb0:	f008 fcb8 	bl	800d824 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004eb4:	2300      	movs	r3, #0
}
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	3720      	adds	r7, #32
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bd80      	pop	{r7, pc}
 8004ebe:	bf00      	nop
 8004ec0:	4f54300a 	.word	0x4f54300a
 8004ec4:	4f54310a 	.word	0x4f54310a

08004ec8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b086      	sub	sp, #24
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
 8004ed0:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ed8:	697b      	ldr	r3, [r7, #20]
 8004eda:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004edc:	697b      	ldr	r3, [r7, #20]
 8004ede:	333c      	adds	r3, #60	@ 0x3c
 8004ee0:	3304      	adds	r3, #4
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	015a      	lsls	r2, r3, #5
 8004eea:	693b      	ldr	r3, [r7, #16]
 8004eec:	4413      	add	r3, r2
 8004eee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ef2:	689b      	ldr	r3, [r3, #8]
 8004ef4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	4a15      	ldr	r2, [pc, #84]	@ (8004f50 <PCD_EP_OutSetupPacket_int+0x88>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d90e      	bls.n	8004f1c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004efe:	68bb      	ldr	r3, [r7, #8]
 8004f00:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d009      	beq.n	8004f1c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	015a      	lsls	r2, r3, #5
 8004f0c:	693b      	ldr	r3, [r7, #16]
 8004f0e:	4413      	add	r3, r2
 8004f10:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f14:	461a      	mov	r2, r3
 8004f16:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004f1a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004f1c:	6878      	ldr	r0, [r7, #4]
 8004f1e:	f008 fc6f 	bl	800d800 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	4a0a      	ldr	r2, [pc, #40]	@ (8004f50 <PCD_EP_OutSetupPacket_int+0x88>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d90c      	bls.n	8004f44 <PCD_EP_OutSetupPacket_int+0x7c>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	799b      	ldrb	r3, [r3, #6]
 8004f2e:	2b01      	cmp	r3, #1
 8004f30:	d108      	bne.n	8004f44 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6818      	ldr	r0, [r3, #0]
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004f3c:	461a      	mov	r2, r3
 8004f3e:	2101      	movs	r1, #1
 8004f40:	f003 fc5c 	bl	80087fc <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004f44:	2300      	movs	r3, #0
}
 8004f46:	4618      	mov	r0, r3
 8004f48:	3718      	adds	r7, #24
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	bd80      	pop	{r7, pc}
 8004f4e:	bf00      	nop
 8004f50:	4f54300a 	.word	0x4f54300a

08004f54 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004f54:	b480      	push	{r7}
 8004f56:	b085      	sub	sp, #20
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
 8004f5c:	460b      	mov	r3, r1
 8004f5e:	70fb      	strb	r3, [r7, #3]
 8004f60:	4613      	mov	r3, r2
 8004f62:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f6a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004f6c:	78fb      	ldrb	r3, [r7, #3]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d107      	bne.n	8004f82 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004f72:	883b      	ldrh	r3, [r7, #0]
 8004f74:	0419      	lsls	r1, r3, #16
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	68ba      	ldr	r2, [r7, #8]
 8004f7c:	430a      	orrs	r2, r1
 8004f7e:	629a      	str	r2, [r3, #40]	@ 0x28
 8004f80:	e028      	b.n	8004fd4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f88:	0c1b      	lsrs	r3, r3, #16
 8004f8a:	68ba      	ldr	r2, [r7, #8]
 8004f8c:	4413      	add	r3, r2
 8004f8e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004f90:	2300      	movs	r3, #0
 8004f92:	73fb      	strb	r3, [r7, #15]
 8004f94:	e00d      	b.n	8004fb2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681a      	ldr	r2, [r3, #0]
 8004f9a:	7bfb      	ldrb	r3, [r7, #15]
 8004f9c:	3340      	adds	r3, #64	@ 0x40
 8004f9e:	009b      	lsls	r3, r3, #2
 8004fa0:	4413      	add	r3, r2
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	0c1b      	lsrs	r3, r3, #16
 8004fa6:	68ba      	ldr	r2, [r7, #8]
 8004fa8:	4413      	add	r3, r2
 8004faa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004fac:	7bfb      	ldrb	r3, [r7, #15]
 8004fae:	3301      	adds	r3, #1
 8004fb0:	73fb      	strb	r3, [r7, #15]
 8004fb2:	7bfa      	ldrb	r2, [r7, #15]
 8004fb4:	78fb      	ldrb	r3, [r7, #3]
 8004fb6:	3b01      	subs	r3, #1
 8004fb8:	429a      	cmp	r2, r3
 8004fba:	d3ec      	bcc.n	8004f96 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004fbc:	883b      	ldrh	r3, [r7, #0]
 8004fbe:	0418      	lsls	r0, r3, #16
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6819      	ldr	r1, [r3, #0]
 8004fc4:	78fb      	ldrb	r3, [r7, #3]
 8004fc6:	3b01      	subs	r3, #1
 8004fc8:	68ba      	ldr	r2, [r7, #8]
 8004fca:	4302      	orrs	r2, r0
 8004fcc:	3340      	adds	r3, #64	@ 0x40
 8004fce:	009b      	lsls	r3, r3, #2
 8004fd0:	440b      	add	r3, r1
 8004fd2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004fd4:	2300      	movs	r3, #0
}
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	3714      	adds	r7, #20
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe0:	4770      	bx	lr

08004fe2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004fe2:	b480      	push	{r7}
 8004fe4:	b083      	sub	sp, #12
 8004fe6:	af00      	add	r7, sp, #0
 8004fe8:	6078      	str	r0, [r7, #4]
 8004fea:	460b      	mov	r3, r1
 8004fec:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	887a      	ldrh	r2, [r7, #2]
 8004ff4:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004ff6:	2300      	movs	r3, #0
}
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	370c      	adds	r7, #12
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005002:	4770      	bx	lr

08005004 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005004:	b480      	push	{r7}
 8005006:	b083      	sub	sp, #12
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
 800500c:	460b      	mov	r3, r1
 800500e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005010:	bf00      	nop
 8005012:	370c      	adds	r7, #12
 8005014:	46bd      	mov	sp, r7
 8005016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501a:	4770      	bx	lr

0800501c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b086      	sub	sp, #24
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d101      	bne.n	800502e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800502a:	2301      	movs	r3, #1
 800502c:	e267      	b.n	80054fe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f003 0301 	and.w	r3, r3, #1
 8005036:	2b00      	cmp	r3, #0
 8005038:	d075      	beq.n	8005126 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800503a:	4b88      	ldr	r3, [pc, #544]	@ (800525c <HAL_RCC_OscConfig+0x240>)
 800503c:	689b      	ldr	r3, [r3, #8]
 800503e:	f003 030c 	and.w	r3, r3, #12
 8005042:	2b04      	cmp	r3, #4
 8005044:	d00c      	beq.n	8005060 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005046:	4b85      	ldr	r3, [pc, #532]	@ (800525c <HAL_RCC_OscConfig+0x240>)
 8005048:	689b      	ldr	r3, [r3, #8]
 800504a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800504e:	2b08      	cmp	r3, #8
 8005050:	d112      	bne.n	8005078 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005052:	4b82      	ldr	r3, [pc, #520]	@ (800525c <HAL_RCC_OscConfig+0x240>)
 8005054:	685b      	ldr	r3, [r3, #4]
 8005056:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800505a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800505e:	d10b      	bne.n	8005078 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005060:	4b7e      	ldr	r3, [pc, #504]	@ (800525c <HAL_RCC_OscConfig+0x240>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005068:	2b00      	cmp	r3, #0
 800506a:	d05b      	beq.n	8005124 <HAL_RCC_OscConfig+0x108>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	685b      	ldr	r3, [r3, #4]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d157      	bne.n	8005124 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005074:	2301      	movs	r3, #1
 8005076:	e242      	b.n	80054fe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	685b      	ldr	r3, [r3, #4]
 800507c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005080:	d106      	bne.n	8005090 <HAL_RCC_OscConfig+0x74>
 8005082:	4b76      	ldr	r3, [pc, #472]	@ (800525c <HAL_RCC_OscConfig+0x240>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4a75      	ldr	r2, [pc, #468]	@ (800525c <HAL_RCC_OscConfig+0x240>)
 8005088:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800508c:	6013      	str	r3, [r2, #0]
 800508e:	e01d      	b.n	80050cc <HAL_RCC_OscConfig+0xb0>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	685b      	ldr	r3, [r3, #4]
 8005094:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005098:	d10c      	bne.n	80050b4 <HAL_RCC_OscConfig+0x98>
 800509a:	4b70      	ldr	r3, [pc, #448]	@ (800525c <HAL_RCC_OscConfig+0x240>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4a6f      	ldr	r2, [pc, #444]	@ (800525c <HAL_RCC_OscConfig+0x240>)
 80050a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80050a4:	6013      	str	r3, [r2, #0]
 80050a6:	4b6d      	ldr	r3, [pc, #436]	@ (800525c <HAL_RCC_OscConfig+0x240>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4a6c      	ldr	r2, [pc, #432]	@ (800525c <HAL_RCC_OscConfig+0x240>)
 80050ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80050b0:	6013      	str	r3, [r2, #0]
 80050b2:	e00b      	b.n	80050cc <HAL_RCC_OscConfig+0xb0>
 80050b4:	4b69      	ldr	r3, [pc, #420]	@ (800525c <HAL_RCC_OscConfig+0x240>)
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4a68      	ldr	r2, [pc, #416]	@ (800525c <HAL_RCC_OscConfig+0x240>)
 80050ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80050be:	6013      	str	r3, [r2, #0]
 80050c0:	4b66      	ldr	r3, [pc, #408]	@ (800525c <HAL_RCC_OscConfig+0x240>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4a65      	ldr	r2, [pc, #404]	@ (800525c <HAL_RCC_OscConfig+0x240>)
 80050c6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80050ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	685b      	ldr	r3, [r3, #4]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d013      	beq.n	80050fc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050d4:	f7fc fefc 	bl	8001ed0 <HAL_GetTick>
 80050d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050da:	e008      	b.n	80050ee <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80050dc:	f7fc fef8 	bl	8001ed0 <HAL_GetTick>
 80050e0:	4602      	mov	r2, r0
 80050e2:	693b      	ldr	r3, [r7, #16]
 80050e4:	1ad3      	subs	r3, r2, r3
 80050e6:	2b64      	cmp	r3, #100	@ 0x64
 80050e8:	d901      	bls.n	80050ee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80050ea:	2303      	movs	r3, #3
 80050ec:	e207      	b.n	80054fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050ee:	4b5b      	ldr	r3, [pc, #364]	@ (800525c <HAL_RCC_OscConfig+0x240>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d0f0      	beq.n	80050dc <HAL_RCC_OscConfig+0xc0>
 80050fa:	e014      	b.n	8005126 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050fc:	f7fc fee8 	bl	8001ed0 <HAL_GetTick>
 8005100:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005102:	e008      	b.n	8005116 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005104:	f7fc fee4 	bl	8001ed0 <HAL_GetTick>
 8005108:	4602      	mov	r2, r0
 800510a:	693b      	ldr	r3, [r7, #16]
 800510c:	1ad3      	subs	r3, r2, r3
 800510e:	2b64      	cmp	r3, #100	@ 0x64
 8005110:	d901      	bls.n	8005116 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005112:	2303      	movs	r3, #3
 8005114:	e1f3      	b.n	80054fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005116:	4b51      	ldr	r3, [pc, #324]	@ (800525c <HAL_RCC_OscConfig+0x240>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800511e:	2b00      	cmp	r3, #0
 8005120:	d1f0      	bne.n	8005104 <HAL_RCC_OscConfig+0xe8>
 8005122:	e000      	b.n	8005126 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005124:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f003 0302 	and.w	r3, r3, #2
 800512e:	2b00      	cmp	r3, #0
 8005130:	d063      	beq.n	80051fa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005132:	4b4a      	ldr	r3, [pc, #296]	@ (800525c <HAL_RCC_OscConfig+0x240>)
 8005134:	689b      	ldr	r3, [r3, #8]
 8005136:	f003 030c 	and.w	r3, r3, #12
 800513a:	2b00      	cmp	r3, #0
 800513c:	d00b      	beq.n	8005156 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800513e:	4b47      	ldr	r3, [pc, #284]	@ (800525c <HAL_RCC_OscConfig+0x240>)
 8005140:	689b      	ldr	r3, [r3, #8]
 8005142:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005146:	2b08      	cmp	r3, #8
 8005148:	d11c      	bne.n	8005184 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800514a:	4b44      	ldr	r3, [pc, #272]	@ (800525c <HAL_RCC_OscConfig+0x240>)
 800514c:	685b      	ldr	r3, [r3, #4]
 800514e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005152:	2b00      	cmp	r3, #0
 8005154:	d116      	bne.n	8005184 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005156:	4b41      	ldr	r3, [pc, #260]	@ (800525c <HAL_RCC_OscConfig+0x240>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f003 0302 	and.w	r3, r3, #2
 800515e:	2b00      	cmp	r3, #0
 8005160:	d005      	beq.n	800516e <HAL_RCC_OscConfig+0x152>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	68db      	ldr	r3, [r3, #12]
 8005166:	2b01      	cmp	r3, #1
 8005168:	d001      	beq.n	800516e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800516a:	2301      	movs	r3, #1
 800516c:	e1c7      	b.n	80054fe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800516e:	4b3b      	ldr	r3, [pc, #236]	@ (800525c <HAL_RCC_OscConfig+0x240>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	691b      	ldr	r3, [r3, #16]
 800517a:	00db      	lsls	r3, r3, #3
 800517c:	4937      	ldr	r1, [pc, #220]	@ (800525c <HAL_RCC_OscConfig+0x240>)
 800517e:	4313      	orrs	r3, r2
 8005180:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005182:	e03a      	b.n	80051fa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	68db      	ldr	r3, [r3, #12]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d020      	beq.n	80051ce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800518c:	4b34      	ldr	r3, [pc, #208]	@ (8005260 <HAL_RCC_OscConfig+0x244>)
 800518e:	2201      	movs	r2, #1
 8005190:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005192:	f7fc fe9d 	bl	8001ed0 <HAL_GetTick>
 8005196:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005198:	e008      	b.n	80051ac <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800519a:	f7fc fe99 	bl	8001ed0 <HAL_GetTick>
 800519e:	4602      	mov	r2, r0
 80051a0:	693b      	ldr	r3, [r7, #16]
 80051a2:	1ad3      	subs	r3, r2, r3
 80051a4:	2b02      	cmp	r3, #2
 80051a6:	d901      	bls.n	80051ac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80051a8:	2303      	movs	r3, #3
 80051aa:	e1a8      	b.n	80054fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051ac:	4b2b      	ldr	r3, [pc, #172]	@ (800525c <HAL_RCC_OscConfig+0x240>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f003 0302 	and.w	r3, r3, #2
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d0f0      	beq.n	800519a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051b8:	4b28      	ldr	r3, [pc, #160]	@ (800525c <HAL_RCC_OscConfig+0x240>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	691b      	ldr	r3, [r3, #16]
 80051c4:	00db      	lsls	r3, r3, #3
 80051c6:	4925      	ldr	r1, [pc, #148]	@ (800525c <HAL_RCC_OscConfig+0x240>)
 80051c8:	4313      	orrs	r3, r2
 80051ca:	600b      	str	r3, [r1, #0]
 80051cc:	e015      	b.n	80051fa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80051ce:	4b24      	ldr	r3, [pc, #144]	@ (8005260 <HAL_RCC_OscConfig+0x244>)
 80051d0:	2200      	movs	r2, #0
 80051d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051d4:	f7fc fe7c 	bl	8001ed0 <HAL_GetTick>
 80051d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80051da:	e008      	b.n	80051ee <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80051dc:	f7fc fe78 	bl	8001ed0 <HAL_GetTick>
 80051e0:	4602      	mov	r2, r0
 80051e2:	693b      	ldr	r3, [r7, #16]
 80051e4:	1ad3      	subs	r3, r2, r3
 80051e6:	2b02      	cmp	r3, #2
 80051e8:	d901      	bls.n	80051ee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80051ea:	2303      	movs	r3, #3
 80051ec:	e187      	b.n	80054fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80051ee:	4b1b      	ldr	r3, [pc, #108]	@ (800525c <HAL_RCC_OscConfig+0x240>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f003 0302 	and.w	r3, r3, #2
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d1f0      	bne.n	80051dc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f003 0308 	and.w	r3, r3, #8
 8005202:	2b00      	cmp	r3, #0
 8005204:	d036      	beq.n	8005274 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	695b      	ldr	r3, [r3, #20]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d016      	beq.n	800523c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800520e:	4b15      	ldr	r3, [pc, #84]	@ (8005264 <HAL_RCC_OscConfig+0x248>)
 8005210:	2201      	movs	r2, #1
 8005212:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005214:	f7fc fe5c 	bl	8001ed0 <HAL_GetTick>
 8005218:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800521a:	e008      	b.n	800522e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800521c:	f7fc fe58 	bl	8001ed0 <HAL_GetTick>
 8005220:	4602      	mov	r2, r0
 8005222:	693b      	ldr	r3, [r7, #16]
 8005224:	1ad3      	subs	r3, r2, r3
 8005226:	2b02      	cmp	r3, #2
 8005228:	d901      	bls.n	800522e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800522a:	2303      	movs	r3, #3
 800522c:	e167      	b.n	80054fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800522e:	4b0b      	ldr	r3, [pc, #44]	@ (800525c <HAL_RCC_OscConfig+0x240>)
 8005230:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005232:	f003 0302 	and.w	r3, r3, #2
 8005236:	2b00      	cmp	r3, #0
 8005238:	d0f0      	beq.n	800521c <HAL_RCC_OscConfig+0x200>
 800523a:	e01b      	b.n	8005274 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800523c:	4b09      	ldr	r3, [pc, #36]	@ (8005264 <HAL_RCC_OscConfig+0x248>)
 800523e:	2200      	movs	r2, #0
 8005240:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005242:	f7fc fe45 	bl	8001ed0 <HAL_GetTick>
 8005246:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005248:	e00e      	b.n	8005268 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800524a:	f7fc fe41 	bl	8001ed0 <HAL_GetTick>
 800524e:	4602      	mov	r2, r0
 8005250:	693b      	ldr	r3, [r7, #16]
 8005252:	1ad3      	subs	r3, r2, r3
 8005254:	2b02      	cmp	r3, #2
 8005256:	d907      	bls.n	8005268 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005258:	2303      	movs	r3, #3
 800525a:	e150      	b.n	80054fe <HAL_RCC_OscConfig+0x4e2>
 800525c:	40023800 	.word	0x40023800
 8005260:	42470000 	.word	0x42470000
 8005264:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005268:	4b88      	ldr	r3, [pc, #544]	@ (800548c <HAL_RCC_OscConfig+0x470>)
 800526a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800526c:	f003 0302 	and.w	r3, r3, #2
 8005270:	2b00      	cmp	r3, #0
 8005272:	d1ea      	bne.n	800524a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f003 0304 	and.w	r3, r3, #4
 800527c:	2b00      	cmp	r3, #0
 800527e:	f000 8097 	beq.w	80053b0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005282:	2300      	movs	r3, #0
 8005284:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005286:	4b81      	ldr	r3, [pc, #516]	@ (800548c <HAL_RCC_OscConfig+0x470>)
 8005288:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800528a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800528e:	2b00      	cmp	r3, #0
 8005290:	d10f      	bne.n	80052b2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005292:	2300      	movs	r3, #0
 8005294:	60bb      	str	r3, [r7, #8]
 8005296:	4b7d      	ldr	r3, [pc, #500]	@ (800548c <HAL_RCC_OscConfig+0x470>)
 8005298:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800529a:	4a7c      	ldr	r2, [pc, #496]	@ (800548c <HAL_RCC_OscConfig+0x470>)
 800529c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80052a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80052a2:	4b7a      	ldr	r3, [pc, #488]	@ (800548c <HAL_RCC_OscConfig+0x470>)
 80052a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80052aa:	60bb      	str	r3, [r7, #8]
 80052ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80052ae:	2301      	movs	r3, #1
 80052b0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052b2:	4b77      	ldr	r3, [pc, #476]	@ (8005490 <HAL_RCC_OscConfig+0x474>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d118      	bne.n	80052f0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80052be:	4b74      	ldr	r3, [pc, #464]	@ (8005490 <HAL_RCC_OscConfig+0x474>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	4a73      	ldr	r2, [pc, #460]	@ (8005490 <HAL_RCC_OscConfig+0x474>)
 80052c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80052c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80052ca:	f7fc fe01 	bl	8001ed0 <HAL_GetTick>
 80052ce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052d0:	e008      	b.n	80052e4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052d2:	f7fc fdfd 	bl	8001ed0 <HAL_GetTick>
 80052d6:	4602      	mov	r2, r0
 80052d8:	693b      	ldr	r3, [r7, #16]
 80052da:	1ad3      	subs	r3, r2, r3
 80052dc:	2b02      	cmp	r3, #2
 80052de:	d901      	bls.n	80052e4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80052e0:	2303      	movs	r3, #3
 80052e2:	e10c      	b.n	80054fe <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052e4:	4b6a      	ldr	r3, [pc, #424]	@ (8005490 <HAL_RCC_OscConfig+0x474>)
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d0f0      	beq.n	80052d2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	689b      	ldr	r3, [r3, #8]
 80052f4:	2b01      	cmp	r3, #1
 80052f6:	d106      	bne.n	8005306 <HAL_RCC_OscConfig+0x2ea>
 80052f8:	4b64      	ldr	r3, [pc, #400]	@ (800548c <HAL_RCC_OscConfig+0x470>)
 80052fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052fc:	4a63      	ldr	r2, [pc, #396]	@ (800548c <HAL_RCC_OscConfig+0x470>)
 80052fe:	f043 0301 	orr.w	r3, r3, #1
 8005302:	6713      	str	r3, [r2, #112]	@ 0x70
 8005304:	e01c      	b.n	8005340 <HAL_RCC_OscConfig+0x324>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	689b      	ldr	r3, [r3, #8]
 800530a:	2b05      	cmp	r3, #5
 800530c:	d10c      	bne.n	8005328 <HAL_RCC_OscConfig+0x30c>
 800530e:	4b5f      	ldr	r3, [pc, #380]	@ (800548c <HAL_RCC_OscConfig+0x470>)
 8005310:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005312:	4a5e      	ldr	r2, [pc, #376]	@ (800548c <HAL_RCC_OscConfig+0x470>)
 8005314:	f043 0304 	orr.w	r3, r3, #4
 8005318:	6713      	str	r3, [r2, #112]	@ 0x70
 800531a:	4b5c      	ldr	r3, [pc, #368]	@ (800548c <HAL_RCC_OscConfig+0x470>)
 800531c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800531e:	4a5b      	ldr	r2, [pc, #364]	@ (800548c <HAL_RCC_OscConfig+0x470>)
 8005320:	f043 0301 	orr.w	r3, r3, #1
 8005324:	6713      	str	r3, [r2, #112]	@ 0x70
 8005326:	e00b      	b.n	8005340 <HAL_RCC_OscConfig+0x324>
 8005328:	4b58      	ldr	r3, [pc, #352]	@ (800548c <HAL_RCC_OscConfig+0x470>)
 800532a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800532c:	4a57      	ldr	r2, [pc, #348]	@ (800548c <HAL_RCC_OscConfig+0x470>)
 800532e:	f023 0301 	bic.w	r3, r3, #1
 8005332:	6713      	str	r3, [r2, #112]	@ 0x70
 8005334:	4b55      	ldr	r3, [pc, #340]	@ (800548c <HAL_RCC_OscConfig+0x470>)
 8005336:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005338:	4a54      	ldr	r2, [pc, #336]	@ (800548c <HAL_RCC_OscConfig+0x470>)
 800533a:	f023 0304 	bic.w	r3, r3, #4
 800533e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	689b      	ldr	r3, [r3, #8]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d015      	beq.n	8005374 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005348:	f7fc fdc2 	bl	8001ed0 <HAL_GetTick>
 800534c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800534e:	e00a      	b.n	8005366 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005350:	f7fc fdbe 	bl	8001ed0 <HAL_GetTick>
 8005354:	4602      	mov	r2, r0
 8005356:	693b      	ldr	r3, [r7, #16]
 8005358:	1ad3      	subs	r3, r2, r3
 800535a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800535e:	4293      	cmp	r3, r2
 8005360:	d901      	bls.n	8005366 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005362:	2303      	movs	r3, #3
 8005364:	e0cb      	b.n	80054fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005366:	4b49      	ldr	r3, [pc, #292]	@ (800548c <HAL_RCC_OscConfig+0x470>)
 8005368:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800536a:	f003 0302 	and.w	r3, r3, #2
 800536e:	2b00      	cmp	r3, #0
 8005370:	d0ee      	beq.n	8005350 <HAL_RCC_OscConfig+0x334>
 8005372:	e014      	b.n	800539e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005374:	f7fc fdac 	bl	8001ed0 <HAL_GetTick>
 8005378:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800537a:	e00a      	b.n	8005392 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800537c:	f7fc fda8 	bl	8001ed0 <HAL_GetTick>
 8005380:	4602      	mov	r2, r0
 8005382:	693b      	ldr	r3, [r7, #16]
 8005384:	1ad3      	subs	r3, r2, r3
 8005386:	f241 3288 	movw	r2, #5000	@ 0x1388
 800538a:	4293      	cmp	r3, r2
 800538c:	d901      	bls.n	8005392 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800538e:	2303      	movs	r3, #3
 8005390:	e0b5      	b.n	80054fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005392:	4b3e      	ldr	r3, [pc, #248]	@ (800548c <HAL_RCC_OscConfig+0x470>)
 8005394:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005396:	f003 0302 	and.w	r3, r3, #2
 800539a:	2b00      	cmp	r3, #0
 800539c:	d1ee      	bne.n	800537c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800539e:	7dfb      	ldrb	r3, [r7, #23]
 80053a0:	2b01      	cmp	r3, #1
 80053a2:	d105      	bne.n	80053b0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80053a4:	4b39      	ldr	r3, [pc, #228]	@ (800548c <HAL_RCC_OscConfig+0x470>)
 80053a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053a8:	4a38      	ldr	r2, [pc, #224]	@ (800548c <HAL_RCC_OscConfig+0x470>)
 80053aa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80053ae:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	699b      	ldr	r3, [r3, #24]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	f000 80a1 	beq.w	80054fc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80053ba:	4b34      	ldr	r3, [pc, #208]	@ (800548c <HAL_RCC_OscConfig+0x470>)
 80053bc:	689b      	ldr	r3, [r3, #8]
 80053be:	f003 030c 	and.w	r3, r3, #12
 80053c2:	2b08      	cmp	r3, #8
 80053c4:	d05c      	beq.n	8005480 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	699b      	ldr	r3, [r3, #24]
 80053ca:	2b02      	cmp	r3, #2
 80053cc:	d141      	bne.n	8005452 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053ce:	4b31      	ldr	r3, [pc, #196]	@ (8005494 <HAL_RCC_OscConfig+0x478>)
 80053d0:	2200      	movs	r2, #0
 80053d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053d4:	f7fc fd7c 	bl	8001ed0 <HAL_GetTick>
 80053d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053da:	e008      	b.n	80053ee <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80053dc:	f7fc fd78 	bl	8001ed0 <HAL_GetTick>
 80053e0:	4602      	mov	r2, r0
 80053e2:	693b      	ldr	r3, [r7, #16]
 80053e4:	1ad3      	subs	r3, r2, r3
 80053e6:	2b02      	cmp	r3, #2
 80053e8:	d901      	bls.n	80053ee <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80053ea:	2303      	movs	r3, #3
 80053ec:	e087      	b.n	80054fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053ee:	4b27      	ldr	r3, [pc, #156]	@ (800548c <HAL_RCC_OscConfig+0x470>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d1f0      	bne.n	80053dc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	69da      	ldr	r2, [r3, #28]
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6a1b      	ldr	r3, [r3, #32]
 8005402:	431a      	orrs	r2, r3
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005408:	019b      	lsls	r3, r3, #6
 800540a:	431a      	orrs	r2, r3
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005410:	085b      	lsrs	r3, r3, #1
 8005412:	3b01      	subs	r3, #1
 8005414:	041b      	lsls	r3, r3, #16
 8005416:	431a      	orrs	r2, r3
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800541c:	061b      	lsls	r3, r3, #24
 800541e:	491b      	ldr	r1, [pc, #108]	@ (800548c <HAL_RCC_OscConfig+0x470>)
 8005420:	4313      	orrs	r3, r2
 8005422:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005424:	4b1b      	ldr	r3, [pc, #108]	@ (8005494 <HAL_RCC_OscConfig+0x478>)
 8005426:	2201      	movs	r2, #1
 8005428:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800542a:	f7fc fd51 	bl	8001ed0 <HAL_GetTick>
 800542e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005430:	e008      	b.n	8005444 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005432:	f7fc fd4d 	bl	8001ed0 <HAL_GetTick>
 8005436:	4602      	mov	r2, r0
 8005438:	693b      	ldr	r3, [r7, #16]
 800543a:	1ad3      	subs	r3, r2, r3
 800543c:	2b02      	cmp	r3, #2
 800543e:	d901      	bls.n	8005444 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005440:	2303      	movs	r3, #3
 8005442:	e05c      	b.n	80054fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005444:	4b11      	ldr	r3, [pc, #68]	@ (800548c <HAL_RCC_OscConfig+0x470>)
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800544c:	2b00      	cmp	r3, #0
 800544e:	d0f0      	beq.n	8005432 <HAL_RCC_OscConfig+0x416>
 8005450:	e054      	b.n	80054fc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005452:	4b10      	ldr	r3, [pc, #64]	@ (8005494 <HAL_RCC_OscConfig+0x478>)
 8005454:	2200      	movs	r2, #0
 8005456:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005458:	f7fc fd3a 	bl	8001ed0 <HAL_GetTick>
 800545c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800545e:	e008      	b.n	8005472 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005460:	f7fc fd36 	bl	8001ed0 <HAL_GetTick>
 8005464:	4602      	mov	r2, r0
 8005466:	693b      	ldr	r3, [r7, #16]
 8005468:	1ad3      	subs	r3, r2, r3
 800546a:	2b02      	cmp	r3, #2
 800546c:	d901      	bls.n	8005472 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800546e:	2303      	movs	r3, #3
 8005470:	e045      	b.n	80054fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005472:	4b06      	ldr	r3, [pc, #24]	@ (800548c <HAL_RCC_OscConfig+0x470>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800547a:	2b00      	cmp	r3, #0
 800547c:	d1f0      	bne.n	8005460 <HAL_RCC_OscConfig+0x444>
 800547e:	e03d      	b.n	80054fc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	699b      	ldr	r3, [r3, #24]
 8005484:	2b01      	cmp	r3, #1
 8005486:	d107      	bne.n	8005498 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005488:	2301      	movs	r3, #1
 800548a:	e038      	b.n	80054fe <HAL_RCC_OscConfig+0x4e2>
 800548c:	40023800 	.word	0x40023800
 8005490:	40007000 	.word	0x40007000
 8005494:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005498:	4b1b      	ldr	r3, [pc, #108]	@ (8005508 <HAL_RCC_OscConfig+0x4ec>)
 800549a:	685b      	ldr	r3, [r3, #4]
 800549c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	699b      	ldr	r3, [r3, #24]
 80054a2:	2b01      	cmp	r3, #1
 80054a4:	d028      	beq.n	80054f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80054b0:	429a      	cmp	r2, r3
 80054b2:	d121      	bne.n	80054f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054be:	429a      	cmp	r2, r3
 80054c0:	d11a      	bne.n	80054f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80054c2:	68fa      	ldr	r2, [r7, #12]
 80054c4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80054c8:	4013      	ands	r3, r2
 80054ca:	687a      	ldr	r2, [r7, #4]
 80054cc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80054ce:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d111      	bne.n	80054f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054de:	085b      	lsrs	r3, r3, #1
 80054e0:	3b01      	subs	r3, #1
 80054e2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80054e4:	429a      	cmp	r2, r3
 80054e6:	d107      	bne.n	80054f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054f2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80054f4:	429a      	cmp	r2, r3
 80054f6:	d001      	beq.n	80054fc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80054f8:	2301      	movs	r3, #1
 80054fa:	e000      	b.n	80054fe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80054fc:	2300      	movs	r3, #0
}
 80054fe:	4618      	mov	r0, r3
 8005500:	3718      	adds	r7, #24
 8005502:	46bd      	mov	sp, r7
 8005504:	bd80      	pop	{r7, pc}
 8005506:	bf00      	nop
 8005508:	40023800 	.word	0x40023800

0800550c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b084      	sub	sp, #16
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
 8005514:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d101      	bne.n	8005520 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800551c:	2301      	movs	r3, #1
 800551e:	e0cc      	b.n	80056ba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005520:	4b68      	ldr	r3, [pc, #416]	@ (80056c4 <HAL_RCC_ClockConfig+0x1b8>)
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f003 0307 	and.w	r3, r3, #7
 8005528:	683a      	ldr	r2, [r7, #0]
 800552a:	429a      	cmp	r2, r3
 800552c:	d90c      	bls.n	8005548 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800552e:	4b65      	ldr	r3, [pc, #404]	@ (80056c4 <HAL_RCC_ClockConfig+0x1b8>)
 8005530:	683a      	ldr	r2, [r7, #0]
 8005532:	b2d2      	uxtb	r2, r2
 8005534:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005536:	4b63      	ldr	r3, [pc, #396]	@ (80056c4 <HAL_RCC_ClockConfig+0x1b8>)
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f003 0307 	and.w	r3, r3, #7
 800553e:	683a      	ldr	r2, [r7, #0]
 8005540:	429a      	cmp	r2, r3
 8005542:	d001      	beq.n	8005548 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005544:	2301      	movs	r3, #1
 8005546:	e0b8      	b.n	80056ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f003 0302 	and.w	r3, r3, #2
 8005550:	2b00      	cmp	r3, #0
 8005552:	d020      	beq.n	8005596 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f003 0304 	and.w	r3, r3, #4
 800555c:	2b00      	cmp	r3, #0
 800555e:	d005      	beq.n	800556c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005560:	4b59      	ldr	r3, [pc, #356]	@ (80056c8 <HAL_RCC_ClockConfig+0x1bc>)
 8005562:	689b      	ldr	r3, [r3, #8]
 8005564:	4a58      	ldr	r2, [pc, #352]	@ (80056c8 <HAL_RCC_ClockConfig+0x1bc>)
 8005566:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800556a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f003 0308 	and.w	r3, r3, #8
 8005574:	2b00      	cmp	r3, #0
 8005576:	d005      	beq.n	8005584 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005578:	4b53      	ldr	r3, [pc, #332]	@ (80056c8 <HAL_RCC_ClockConfig+0x1bc>)
 800557a:	689b      	ldr	r3, [r3, #8]
 800557c:	4a52      	ldr	r2, [pc, #328]	@ (80056c8 <HAL_RCC_ClockConfig+0x1bc>)
 800557e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005582:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005584:	4b50      	ldr	r3, [pc, #320]	@ (80056c8 <HAL_RCC_ClockConfig+0x1bc>)
 8005586:	689b      	ldr	r3, [r3, #8]
 8005588:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	689b      	ldr	r3, [r3, #8]
 8005590:	494d      	ldr	r1, [pc, #308]	@ (80056c8 <HAL_RCC_ClockConfig+0x1bc>)
 8005592:	4313      	orrs	r3, r2
 8005594:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f003 0301 	and.w	r3, r3, #1
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d044      	beq.n	800562c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	685b      	ldr	r3, [r3, #4]
 80055a6:	2b01      	cmp	r3, #1
 80055a8:	d107      	bne.n	80055ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055aa:	4b47      	ldr	r3, [pc, #284]	@ (80056c8 <HAL_RCC_ClockConfig+0x1bc>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d119      	bne.n	80055ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80055b6:	2301      	movs	r3, #1
 80055b8:	e07f      	b.n	80056ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	685b      	ldr	r3, [r3, #4]
 80055be:	2b02      	cmp	r3, #2
 80055c0:	d003      	beq.n	80055ca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80055c6:	2b03      	cmp	r3, #3
 80055c8:	d107      	bne.n	80055da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80055ca:	4b3f      	ldr	r3, [pc, #252]	@ (80056c8 <HAL_RCC_ClockConfig+0x1bc>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d109      	bne.n	80055ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80055d6:	2301      	movs	r3, #1
 80055d8:	e06f      	b.n	80056ba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80055da:	4b3b      	ldr	r3, [pc, #236]	@ (80056c8 <HAL_RCC_ClockConfig+0x1bc>)
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f003 0302 	and.w	r3, r3, #2
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d101      	bne.n	80055ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80055e6:	2301      	movs	r3, #1
 80055e8:	e067      	b.n	80056ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80055ea:	4b37      	ldr	r3, [pc, #220]	@ (80056c8 <HAL_RCC_ClockConfig+0x1bc>)
 80055ec:	689b      	ldr	r3, [r3, #8]
 80055ee:	f023 0203 	bic.w	r2, r3, #3
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	685b      	ldr	r3, [r3, #4]
 80055f6:	4934      	ldr	r1, [pc, #208]	@ (80056c8 <HAL_RCC_ClockConfig+0x1bc>)
 80055f8:	4313      	orrs	r3, r2
 80055fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80055fc:	f7fc fc68 	bl	8001ed0 <HAL_GetTick>
 8005600:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005602:	e00a      	b.n	800561a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005604:	f7fc fc64 	bl	8001ed0 <HAL_GetTick>
 8005608:	4602      	mov	r2, r0
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	1ad3      	subs	r3, r2, r3
 800560e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005612:	4293      	cmp	r3, r2
 8005614:	d901      	bls.n	800561a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005616:	2303      	movs	r3, #3
 8005618:	e04f      	b.n	80056ba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800561a:	4b2b      	ldr	r3, [pc, #172]	@ (80056c8 <HAL_RCC_ClockConfig+0x1bc>)
 800561c:	689b      	ldr	r3, [r3, #8]
 800561e:	f003 020c 	and.w	r2, r3, #12
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	685b      	ldr	r3, [r3, #4]
 8005626:	009b      	lsls	r3, r3, #2
 8005628:	429a      	cmp	r2, r3
 800562a:	d1eb      	bne.n	8005604 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800562c:	4b25      	ldr	r3, [pc, #148]	@ (80056c4 <HAL_RCC_ClockConfig+0x1b8>)
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f003 0307 	and.w	r3, r3, #7
 8005634:	683a      	ldr	r2, [r7, #0]
 8005636:	429a      	cmp	r2, r3
 8005638:	d20c      	bcs.n	8005654 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800563a:	4b22      	ldr	r3, [pc, #136]	@ (80056c4 <HAL_RCC_ClockConfig+0x1b8>)
 800563c:	683a      	ldr	r2, [r7, #0]
 800563e:	b2d2      	uxtb	r2, r2
 8005640:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005642:	4b20      	ldr	r3, [pc, #128]	@ (80056c4 <HAL_RCC_ClockConfig+0x1b8>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f003 0307 	and.w	r3, r3, #7
 800564a:	683a      	ldr	r2, [r7, #0]
 800564c:	429a      	cmp	r2, r3
 800564e:	d001      	beq.n	8005654 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005650:	2301      	movs	r3, #1
 8005652:	e032      	b.n	80056ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f003 0304 	and.w	r3, r3, #4
 800565c:	2b00      	cmp	r3, #0
 800565e:	d008      	beq.n	8005672 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005660:	4b19      	ldr	r3, [pc, #100]	@ (80056c8 <HAL_RCC_ClockConfig+0x1bc>)
 8005662:	689b      	ldr	r3, [r3, #8]
 8005664:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	68db      	ldr	r3, [r3, #12]
 800566c:	4916      	ldr	r1, [pc, #88]	@ (80056c8 <HAL_RCC_ClockConfig+0x1bc>)
 800566e:	4313      	orrs	r3, r2
 8005670:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f003 0308 	and.w	r3, r3, #8
 800567a:	2b00      	cmp	r3, #0
 800567c:	d009      	beq.n	8005692 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800567e:	4b12      	ldr	r3, [pc, #72]	@ (80056c8 <HAL_RCC_ClockConfig+0x1bc>)
 8005680:	689b      	ldr	r3, [r3, #8]
 8005682:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	691b      	ldr	r3, [r3, #16]
 800568a:	00db      	lsls	r3, r3, #3
 800568c:	490e      	ldr	r1, [pc, #56]	@ (80056c8 <HAL_RCC_ClockConfig+0x1bc>)
 800568e:	4313      	orrs	r3, r2
 8005690:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005692:	f000 f821 	bl	80056d8 <HAL_RCC_GetSysClockFreq>
 8005696:	4602      	mov	r2, r0
 8005698:	4b0b      	ldr	r3, [pc, #44]	@ (80056c8 <HAL_RCC_ClockConfig+0x1bc>)
 800569a:	689b      	ldr	r3, [r3, #8]
 800569c:	091b      	lsrs	r3, r3, #4
 800569e:	f003 030f 	and.w	r3, r3, #15
 80056a2:	490a      	ldr	r1, [pc, #40]	@ (80056cc <HAL_RCC_ClockConfig+0x1c0>)
 80056a4:	5ccb      	ldrb	r3, [r1, r3]
 80056a6:	fa22 f303 	lsr.w	r3, r2, r3
 80056aa:	4a09      	ldr	r2, [pc, #36]	@ (80056d0 <HAL_RCC_ClockConfig+0x1c4>)
 80056ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80056ae:	4b09      	ldr	r3, [pc, #36]	@ (80056d4 <HAL_RCC_ClockConfig+0x1c8>)
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	4618      	mov	r0, r3
 80056b4:	f7fb fdd8 	bl	8001268 <HAL_InitTick>

  return HAL_OK;
 80056b8:	2300      	movs	r3, #0
}
 80056ba:	4618      	mov	r0, r3
 80056bc:	3710      	adds	r7, #16
 80056be:	46bd      	mov	sp, r7
 80056c0:	bd80      	pop	{r7, pc}
 80056c2:	bf00      	nop
 80056c4:	40023c00 	.word	0x40023c00
 80056c8:	40023800 	.word	0x40023800
 80056cc:	0800de9c 	.word	0x0800de9c
 80056d0:	20000000 	.word	0x20000000
 80056d4:	20000004 	.word	0x20000004

080056d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80056d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80056dc:	b094      	sub	sp, #80	@ 0x50
 80056de:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80056e0:	2300      	movs	r3, #0
 80056e2:	647b      	str	r3, [r7, #68]	@ 0x44
 80056e4:	2300      	movs	r3, #0
 80056e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80056e8:	2300      	movs	r3, #0
 80056ea:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80056ec:	2300      	movs	r3, #0
 80056ee:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80056f0:	4b79      	ldr	r3, [pc, #484]	@ (80058d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80056f2:	689b      	ldr	r3, [r3, #8]
 80056f4:	f003 030c 	and.w	r3, r3, #12
 80056f8:	2b08      	cmp	r3, #8
 80056fa:	d00d      	beq.n	8005718 <HAL_RCC_GetSysClockFreq+0x40>
 80056fc:	2b08      	cmp	r3, #8
 80056fe:	f200 80e1 	bhi.w	80058c4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005702:	2b00      	cmp	r3, #0
 8005704:	d002      	beq.n	800570c <HAL_RCC_GetSysClockFreq+0x34>
 8005706:	2b04      	cmp	r3, #4
 8005708:	d003      	beq.n	8005712 <HAL_RCC_GetSysClockFreq+0x3a>
 800570a:	e0db      	b.n	80058c4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800570c:	4b73      	ldr	r3, [pc, #460]	@ (80058dc <HAL_RCC_GetSysClockFreq+0x204>)
 800570e:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8005710:	e0db      	b.n	80058ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005712:	4b73      	ldr	r3, [pc, #460]	@ (80058e0 <HAL_RCC_GetSysClockFreq+0x208>)
 8005714:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005716:	e0d8      	b.n	80058ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005718:	4b6f      	ldr	r3, [pc, #444]	@ (80058d8 <HAL_RCC_GetSysClockFreq+0x200>)
 800571a:	685b      	ldr	r3, [r3, #4]
 800571c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005720:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005722:	4b6d      	ldr	r3, [pc, #436]	@ (80058d8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005724:	685b      	ldr	r3, [r3, #4]
 8005726:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800572a:	2b00      	cmp	r3, #0
 800572c:	d063      	beq.n	80057f6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800572e:	4b6a      	ldr	r3, [pc, #424]	@ (80058d8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005730:	685b      	ldr	r3, [r3, #4]
 8005732:	099b      	lsrs	r3, r3, #6
 8005734:	2200      	movs	r2, #0
 8005736:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005738:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800573a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800573c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005740:	633b      	str	r3, [r7, #48]	@ 0x30
 8005742:	2300      	movs	r3, #0
 8005744:	637b      	str	r3, [r7, #52]	@ 0x34
 8005746:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800574a:	4622      	mov	r2, r4
 800574c:	462b      	mov	r3, r5
 800574e:	f04f 0000 	mov.w	r0, #0
 8005752:	f04f 0100 	mov.w	r1, #0
 8005756:	0159      	lsls	r1, r3, #5
 8005758:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800575c:	0150      	lsls	r0, r2, #5
 800575e:	4602      	mov	r2, r0
 8005760:	460b      	mov	r3, r1
 8005762:	4621      	mov	r1, r4
 8005764:	1a51      	subs	r1, r2, r1
 8005766:	6139      	str	r1, [r7, #16]
 8005768:	4629      	mov	r1, r5
 800576a:	eb63 0301 	sbc.w	r3, r3, r1
 800576e:	617b      	str	r3, [r7, #20]
 8005770:	f04f 0200 	mov.w	r2, #0
 8005774:	f04f 0300 	mov.w	r3, #0
 8005778:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800577c:	4659      	mov	r1, fp
 800577e:	018b      	lsls	r3, r1, #6
 8005780:	4651      	mov	r1, sl
 8005782:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005786:	4651      	mov	r1, sl
 8005788:	018a      	lsls	r2, r1, #6
 800578a:	4651      	mov	r1, sl
 800578c:	ebb2 0801 	subs.w	r8, r2, r1
 8005790:	4659      	mov	r1, fp
 8005792:	eb63 0901 	sbc.w	r9, r3, r1
 8005796:	f04f 0200 	mov.w	r2, #0
 800579a:	f04f 0300 	mov.w	r3, #0
 800579e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80057a2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80057a6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80057aa:	4690      	mov	r8, r2
 80057ac:	4699      	mov	r9, r3
 80057ae:	4623      	mov	r3, r4
 80057b0:	eb18 0303 	adds.w	r3, r8, r3
 80057b4:	60bb      	str	r3, [r7, #8]
 80057b6:	462b      	mov	r3, r5
 80057b8:	eb49 0303 	adc.w	r3, r9, r3
 80057bc:	60fb      	str	r3, [r7, #12]
 80057be:	f04f 0200 	mov.w	r2, #0
 80057c2:	f04f 0300 	mov.w	r3, #0
 80057c6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80057ca:	4629      	mov	r1, r5
 80057cc:	024b      	lsls	r3, r1, #9
 80057ce:	4621      	mov	r1, r4
 80057d0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80057d4:	4621      	mov	r1, r4
 80057d6:	024a      	lsls	r2, r1, #9
 80057d8:	4610      	mov	r0, r2
 80057da:	4619      	mov	r1, r3
 80057dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80057de:	2200      	movs	r2, #0
 80057e0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80057e2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80057e4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80057e8:	f7fa fcf2 	bl	80001d0 <__aeabi_uldivmod>
 80057ec:	4602      	mov	r2, r0
 80057ee:	460b      	mov	r3, r1
 80057f0:	4613      	mov	r3, r2
 80057f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80057f4:	e058      	b.n	80058a8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80057f6:	4b38      	ldr	r3, [pc, #224]	@ (80058d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80057f8:	685b      	ldr	r3, [r3, #4]
 80057fa:	099b      	lsrs	r3, r3, #6
 80057fc:	2200      	movs	r2, #0
 80057fe:	4618      	mov	r0, r3
 8005800:	4611      	mov	r1, r2
 8005802:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005806:	623b      	str	r3, [r7, #32]
 8005808:	2300      	movs	r3, #0
 800580a:	627b      	str	r3, [r7, #36]	@ 0x24
 800580c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005810:	4642      	mov	r2, r8
 8005812:	464b      	mov	r3, r9
 8005814:	f04f 0000 	mov.w	r0, #0
 8005818:	f04f 0100 	mov.w	r1, #0
 800581c:	0159      	lsls	r1, r3, #5
 800581e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005822:	0150      	lsls	r0, r2, #5
 8005824:	4602      	mov	r2, r0
 8005826:	460b      	mov	r3, r1
 8005828:	4641      	mov	r1, r8
 800582a:	ebb2 0a01 	subs.w	sl, r2, r1
 800582e:	4649      	mov	r1, r9
 8005830:	eb63 0b01 	sbc.w	fp, r3, r1
 8005834:	f04f 0200 	mov.w	r2, #0
 8005838:	f04f 0300 	mov.w	r3, #0
 800583c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005840:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005844:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005848:	ebb2 040a 	subs.w	r4, r2, sl
 800584c:	eb63 050b 	sbc.w	r5, r3, fp
 8005850:	f04f 0200 	mov.w	r2, #0
 8005854:	f04f 0300 	mov.w	r3, #0
 8005858:	00eb      	lsls	r3, r5, #3
 800585a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800585e:	00e2      	lsls	r2, r4, #3
 8005860:	4614      	mov	r4, r2
 8005862:	461d      	mov	r5, r3
 8005864:	4643      	mov	r3, r8
 8005866:	18e3      	adds	r3, r4, r3
 8005868:	603b      	str	r3, [r7, #0]
 800586a:	464b      	mov	r3, r9
 800586c:	eb45 0303 	adc.w	r3, r5, r3
 8005870:	607b      	str	r3, [r7, #4]
 8005872:	f04f 0200 	mov.w	r2, #0
 8005876:	f04f 0300 	mov.w	r3, #0
 800587a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800587e:	4629      	mov	r1, r5
 8005880:	028b      	lsls	r3, r1, #10
 8005882:	4621      	mov	r1, r4
 8005884:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005888:	4621      	mov	r1, r4
 800588a:	028a      	lsls	r2, r1, #10
 800588c:	4610      	mov	r0, r2
 800588e:	4619      	mov	r1, r3
 8005890:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005892:	2200      	movs	r2, #0
 8005894:	61bb      	str	r3, [r7, #24]
 8005896:	61fa      	str	r2, [r7, #28]
 8005898:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800589c:	f7fa fc98 	bl	80001d0 <__aeabi_uldivmod>
 80058a0:	4602      	mov	r2, r0
 80058a2:	460b      	mov	r3, r1
 80058a4:	4613      	mov	r3, r2
 80058a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80058a8:	4b0b      	ldr	r3, [pc, #44]	@ (80058d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80058aa:	685b      	ldr	r3, [r3, #4]
 80058ac:	0c1b      	lsrs	r3, r3, #16
 80058ae:	f003 0303 	and.w	r3, r3, #3
 80058b2:	3301      	adds	r3, #1
 80058b4:	005b      	lsls	r3, r3, #1
 80058b6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 80058b8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80058ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80058bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80058c0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80058c2:	e002      	b.n	80058ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80058c4:	4b05      	ldr	r3, [pc, #20]	@ (80058dc <HAL_RCC_GetSysClockFreq+0x204>)
 80058c6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80058c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80058ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80058cc:	4618      	mov	r0, r3
 80058ce:	3750      	adds	r7, #80	@ 0x50
 80058d0:	46bd      	mov	sp, r7
 80058d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80058d6:	bf00      	nop
 80058d8:	40023800 	.word	0x40023800
 80058dc:	00f42400 	.word	0x00f42400
 80058e0:	007a1200 	.word	0x007a1200

080058e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80058e4:	b480      	push	{r7}
 80058e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80058e8:	4b03      	ldr	r3, [pc, #12]	@ (80058f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80058ea:	681b      	ldr	r3, [r3, #0]
}
 80058ec:	4618      	mov	r0, r3
 80058ee:	46bd      	mov	sp, r7
 80058f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f4:	4770      	bx	lr
 80058f6:	bf00      	nop
 80058f8:	20000000 	.word	0x20000000

080058fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005900:	f7ff fff0 	bl	80058e4 <HAL_RCC_GetHCLKFreq>
 8005904:	4602      	mov	r2, r0
 8005906:	4b05      	ldr	r3, [pc, #20]	@ (800591c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005908:	689b      	ldr	r3, [r3, #8]
 800590a:	0a9b      	lsrs	r3, r3, #10
 800590c:	f003 0307 	and.w	r3, r3, #7
 8005910:	4903      	ldr	r1, [pc, #12]	@ (8005920 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005912:	5ccb      	ldrb	r3, [r1, r3]
 8005914:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005918:	4618      	mov	r0, r3
 800591a:	bd80      	pop	{r7, pc}
 800591c:	40023800 	.word	0x40023800
 8005920:	0800deac 	.word	0x0800deac

08005924 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005924:	b580      	push	{r7, lr}
 8005926:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005928:	f7ff ffdc 	bl	80058e4 <HAL_RCC_GetHCLKFreq>
 800592c:	4602      	mov	r2, r0
 800592e:	4b05      	ldr	r3, [pc, #20]	@ (8005944 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005930:	689b      	ldr	r3, [r3, #8]
 8005932:	0b5b      	lsrs	r3, r3, #13
 8005934:	f003 0307 	and.w	r3, r3, #7
 8005938:	4903      	ldr	r1, [pc, #12]	@ (8005948 <HAL_RCC_GetPCLK2Freq+0x24>)
 800593a:	5ccb      	ldrb	r3, [r1, r3]
 800593c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005940:	4618      	mov	r0, r3
 8005942:	bd80      	pop	{r7, pc}
 8005944:	40023800 	.word	0x40023800
 8005948:	0800deac 	.word	0x0800deac

0800594c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800594c:	b480      	push	{r7}
 800594e:	b083      	sub	sp, #12
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
 8005954:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	220f      	movs	r2, #15
 800595a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800595c:	4b12      	ldr	r3, [pc, #72]	@ (80059a8 <HAL_RCC_GetClockConfig+0x5c>)
 800595e:	689b      	ldr	r3, [r3, #8]
 8005960:	f003 0203 	and.w	r2, r3, #3
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005968:	4b0f      	ldr	r3, [pc, #60]	@ (80059a8 <HAL_RCC_GetClockConfig+0x5c>)
 800596a:	689b      	ldr	r3, [r3, #8]
 800596c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005974:	4b0c      	ldr	r3, [pc, #48]	@ (80059a8 <HAL_RCC_GetClockConfig+0x5c>)
 8005976:	689b      	ldr	r3, [r3, #8]
 8005978:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005980:	4b09      	ldr	r3, [pc, #36]	@ (80059a8 <HAL_RCC_GetClockConfig+0x5c>)
 8005982:	689b      	ldr	r3, [r3, #8]
 8005984:	08db      	lsrs	r3, r3, #3
 8005986:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800598e:	4b07      	ldr	r3, [pc, #28]	@ (80059ac <HAL_RCC_GetClockConfig+0x60>)
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f003 0207 	and.w	r2, r3, #7
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	601a      	str	r2, [r3, #0]
}
 800599a:	bf00      	nop
 800599c:	370c      	adds	r7, #12
 800599e:	46bd      	mov	sp, r7
 80059a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a4:	4770      	bx	lr
 80059a6:	bf00      	nop
 80059a8:	40023800 	.word	0x40023800
 80059ac:	40023c00 	.word	0x40023c00

080059b0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b082      	sub	sp, #8
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d101      	bne.n	80059c2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80059be:	2301      	movs	r3, #1
 80059c0:	e07b      	b.n	8005aba <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d108      	bne.n	80059dc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	685b      	ldr	r3, [r3, #4]
 80059ce:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80059d2:	d009      	beq.n	80059e8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2200      	movs	r2, #0
 80059d8:	61da      	str	r2, [r3, #28]
 80059da:	e005      	b.n	80059e8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2200      	movs	r2, #0
 80059e0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2200      	movs	r2, #0
 80059e6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2200      	movs	r2, #0
 80059ec:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80059f4:	b2db      	uxtb	r3, r3
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d106      	bne.n	8005a08 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2200      	movs	r2, #0
 80059fe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005a02:	6878      	ldr	r0, [r7, #4]
 8005a04:	f7fb fb40 	bl	8001088 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2202      	movs	r2, #2
 8005a0c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	681a      	ldr	r2, [r3, #0]
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005a1e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	685b      	ldr	r3, [r3, #4]
 8005a24:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	689b      	ldr	r3, [r3, #8]
 8005a2c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005a30:	431a      	orrs	r2, r3
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	68db      	ldr	r3, [r3, #12]
 8005a36:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005a3a:	431a      	orrs	r2, r3
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	691b      	ldr	r3, [r3, #16]
 8005a40:	f003 0302 	and.w	r3, r3, #2
 8005a44:	431a      	orrs	r2, r3
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	695b      	ldr	r3, [r3, #20]
 8005a4a:	f003 0301 	and.w	r3, r3, #1
 8005a4e:	431a      	orrs	r2, r3
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	699b      	ldr	r3, [r3, #24]
 8005a54:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005a58:	431a      	orrs	r2, r3
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	69db      	ldr	r3, [r3, #28]
 8005a5e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005a62:	431a      	orrs	r2, r3
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6a1b      	ldr	r3, [r3, #32]
 8005a68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a6c:	ea42 0103 	orr.w	r1, r2, r3
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a74:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	430a      	orrs	r2, r1
 8005a7e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	699b      	ldr	r3, [r3, #24]
 8005a84:	0c1b      	lsrs	r3, r3, #16
 8005a86:	f003 0104 	and.w	r1, r3, #4
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a8e:	f003 0210 	and.w	r2, r3, #16
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	430a      	orrs	r2, r1
 8005a98:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	69da      	ldr	r2, [r3, #28]
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005aa8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2200      	movs	r2, #0
 8005aae:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2201      	movs	r2, #1
 8005ab4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005ab8:	2300      	movs	r3, #0
}
 8005aba:	4618      	mov	r0, r3
 8005abc:	3708      	adds	r7, #8
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	bd80      	pop	{r7, pc}
	...

08005ac4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b088      	sub	sp, #32
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	685b      	ldr	r3, [r3, #4]
 8005ad2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	689b      	ldr	r3, [r3, #8]
 8005ada:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005adc:	69bb      	ldr	r3, [r7, #24]
 8005ade:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d10e      	bne.n	8005b04 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005ae6:	69bb      	ldr	r3, [r7, #24]
 8005ae8:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d009      	beq.n	8005b04 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005af0:	69fb      	ldr	r3, [r7, #28]
 8005af2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d004      	beq.n	8005b04 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005afe:	6878      	ldr	r0, [r7, #4]
 8005b00:	4798      	blx	r3
    return;
 8005b02:	e0ce      	b.n	8005ca2 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005b04:	69bb      	ldr	r3, [r7, #24]
 8005b06:	f003 0302 	and.w	r3, r3, #2
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d009      	beq.n	8005b22 <HAL_SPI_IRQHandler+0x5e>
 8005b0e:	69fb      	ldr	r3, [r7, #28]
 8005b10:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d004      	beq.n	8005b22 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b1c:	6878      	ldr	r0, [r7, #4]
 8005b1e:	4798      	blx	r3
    return;
 8005b20:	e0bf      	b.n	8005ca2 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005b22:	69bb      	ldr	r3, [r7, #24]
 8005b24:	f003 0320 	and.w	r3, r3, #32
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d10a      	bne.n	8005b42 <HAL_SPI_IRQHandler+0x7e>
 8005b2c:	69bb      	ldr	r3, [r7, #24]
 8005b2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d105      	bne.n	8005b42 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005b36:	69bb      	ldr	r3, [r7, #24]
 8005b38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	f000 80b0 	beq.w	8005ca2 <HAL_SPI_IRQHandler+0x1de>
 8005b42:	69fb      	ldr	r3, [r7, #28]
 8005b44:	f003 0320 	and.w	r3, r3, #32
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	f000 80aa 	beq.w	8005ca2 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005b4e:	69bb      	ldr	r3, [r7, #24]
 8005b50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d023      	beq.n	8005ba0 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005b5e:	b2db      	uxtb	r3, r3
 8005b60:	2b03      	cmp	r3, #3
 8005b62:	d011      	beq.n	8005b88 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b68:	f043 0204 	orr.w	r2, r3, #4
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005b70:	2300      	movs	r3, #0
 8005b72:	617b      	str	r3, [r7, #20]
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	68db      	ldr	r3, [r3, #12]
 8005b7a:	617b      	str	r3, [r7, #20]
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	689b      	ldr	r3, [r3, #8]
 8005b82:	617b      	str	r3, [r7, #20]
 8005b84:	697b      	ldr	r3, [r7, #20]
 8005b86:	e00b      	b.n	8005ba0 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005b88:	2300      	movs	r3, #0
 8005b8a:	613b      	str	r3, [r7, #16]
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	68db      	ldr	r3, [r3, #12]
 8005b92:	613b      	str	r3, [r7, #16]
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	689b      	ldr	r3, [r3, #8]
 8005b9a:	613b      	str	r3, [r7, #16]
 8005b9c:	693b      	ldr	r3, [r7, #16]
        return;
 8005b9e:	e080      	b.n	8005ca2 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005ba0:	69bb      	ldr	r3, [r7, #24]
 8005ba2:	f003 0320 	and.w	r3, r3, #32
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d014      	beq.n	8005bd4 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bae:	f043 0201 	orr.w	r2, r3, #1
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	60fb      	str	r3, [r7, #12]
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	689b      	ldr	r3, [r3, #8]
 8005bc0:	60fb      	str	r3, [r7, #12]
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	681a      	ldr	r2, [r3, #0]
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005bd0:	601a      	str	r2, [r3, #0]
 8005bd2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8005bd4:	69bb      	ldr	r3, [r7, #24]
 8005bd6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d00c      	beq.n	8005bf8 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005be2:	f043 0208 	orr.w	r2, r3, #8
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005bea:	2300      	movs	r3, #0
 8005bec:	60bb      	str	r3, [r7, #8]
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	689b      	ldr	r3, [r3, #8]
 8005bf4:	60bb      	str	r3, [r7, #8]
 8005bf6:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d04f      	beq.n	8005ca0 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	685a      	ldr	r2, [r3, #4]
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005c0e:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2201      	movs	r2, #1
 8005c14:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005c18:	69fb      	ldr	r3, [r7, #28]
 8005c1a:	f003 0302 	and.w	r3, r3, #2
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d104      	bne.n	8005c2c <HAL_SPI_IRQHandler+0x168>
 8005c22:	69fb      	ldr	r3, [r7, #28]
 8005c24:	f003 0301 	and.w	r3, r3, #1
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d034      	beq.n	8005c96 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	685a      	ldr	r2, [r3, #4]
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f022 0203 	bic.w	r2, r2, #3
 8005c3a:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d011      	beq.n	8005c68 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c48:	4a17      	ldr	r2, [pc, #92]	@ (8005ca8 <HAL_SPI_IRQHandler+0x1e4>)
 8005c4a:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c50:	4618      	mov	r0, r3
 8005c52:	f7fd fa3b 	bl	80030cc <HAL_DMA_Abort_IT>
 8005c56:	4603      	mov	r3, r0
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d005      	beq.n	8005c68 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c60:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d016      	beq.n	8005c9e <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c74:	4a0c      	ldr	r2, [pc, #48]	@ (8005ca8 <HAL_SPI_IRQHandler+0x1e4>)
 8005c76:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	f7fd fa25 	bl	80030cc <HAL_DMA_Abort_IT>
 8005c82:	4603      	mov	r3, r0
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d00a      	beq.n	8005c9e <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c8c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 8005c94:	e003      	b.n	8005c9e <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005c96:	6878      	ldr	r0, [r7, #4]
 8005c98:	f000 f808 	bl	8005cac <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005c9c:	e000      	b.n	8005ca0 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8005c9e:	bf00      	nop
    return;
 8005ca0:	bf00      	nop
  }
}
 8005ca2:	3720      	adds	r7, #32
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	bd80      	pop	{r7, pc}
 8005ca8:	08005cc1 	.word	0x08005cc1

08005cac <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005cac:	b480      	push	{r7}
 8005cae:	b083      	sub	sp, #12
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005cb4:	bf00      	nop
 8005cb6:	370c      	adds	r7, #12
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbe:	4770      	bx	lr

08005cc0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b084      	sub	sp, #16
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ccc:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005cda:	68f8      	ldr	r0, [r7, #12]
 8005cdc:	f7ff ffe6 	bl	8005cac <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005ce0:	bf00      	nop
 8005ce2:	3710      	adds	r7, #16
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	bd80      	pop	{r7, pc}

08005ce8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b082      	sub	sp, #8
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d101      	bne.n	8005cfa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005cf6:	2301      	movs	r3, #1
 8005cf8:	e041      	b.n	8005d7e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d00:	b2db      	uxtb	r3, r3
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d106      	bne.n	8005d14 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2200      	movs	r2, #0
 8005d0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005d0e:	6878      	ldr	r0, [r7, #4]
 8005d10:	f7fb fdac 	bl	800186c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2202      	movs	r2, #2
 8005d18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681a      	ldr	r2, [r3, #0]
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	3304      	adds	r3, #4
 8005d24:	4619      	mov	r1, r3
 8005d26:	4610      	mov	r0, r2
 8005d28:	f000 fa5c 	bl	80061e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2201      	movs	r2, #1
 8005d30:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2201      	movs	r2, #1
 8005d38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2201      	movs	r2, #1
 8005d40:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2201      	movs	r2, #1
 8005d48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2201      	movs	r2, #1
 8005d50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2201      	movs	r2, #1
 8005d58:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2201      	movs	r2, #1
 8005d60:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2201      	movs	r2, #1
 8005d68:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2201      	movs	r2, #1
 8005d70:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2201      	movs	r2, #1
 8005d78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005d7c:	2300      	movs	r3, #0
}
 8005d7e:	4618      	mov	r0, r3
 8005d80:	3708      	adds	r7, #8
 8005d82:	46bd      	mov	sp, r7
 8005d84:	bd80      	pop	{r7, pc}
	...

08005d88 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005d88:	b480      	push	{r7}
 8005d8a:	b085      	sub	sp, #20
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d96:	b2db      	uxtb	r3, r3
 8005d98:	2b01      	cmp	r3, #1
 8005d9a:	d001      	beq.n	8005da0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005d9c:	2301      	movs	r3, #1
 8005d9e:	e04e      	b.n	8005e3e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2202      	movs	r2, #2
 8005da4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	68da      	ldr	r2, [r3, #12]
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f042 0201 	orr.w	r2, r2, #1
 8005db6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	4a23      	ldr	r2, [pc, #140]	@ (8005e4c <HAL_TIM_Base_Start_IT+0xc4>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d022      	beq.n	8005e08 <HAL_TIM_Base_Start_IT+0x80>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005dca:	d01d      	beq.n	8005e08 <HAL_TIM_Base_Start_IT+0x80>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	4a1f      	ldr	r2, [pc, #124]	@ (8005e50 <HAL_TIM_Base_Start_IT+0xc8>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d018      	beq.n	8005e08 <HAL_TIM_Base_Start_IT+0x80>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	4a1e      	ldr	r2, [pc, #120]	@ (8005e54 <HAL_TIM_Base_Start_IT+0xcc>)
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	d013      	beq.n	8005e08 <HAL_TIM_Base_Start_IT+0x80>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	4a1c      	ldr	r2, [pc, #112]	@ (8005e58 <HAL_TIM_Base_Start_IT+0xd0>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d00e      	beq.n	8005e08 <HAL_TIM_Base_Start_IT+0x80>
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	4a1b      	ldr	r2, [pc, #108]	@ (8005e5c <HAL_TIM_Base_Start_IT+0xd4>)
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d009      	beq.n	8005e08 <HAL_TIM_Base_Start_IT+0x80>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	4a19      	ldr	r2, [pc, #100]	@ (8005e60 <HAL_TIM_Base_Start_IT+0xd8>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d004      	beq.n	8005e08 <HAL_TIM_Base_Start_IT+0x80>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	4a18      	ldr	r2, [pc, #96]	@ (8005e64 <HAL_TIM_Base_Start_IT+0xdc>)
 8005e04:	4293      	cmp	r3, r2
 8005e06:	d111      	bne.n	8005e2c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	689b      	ldr	r3, [r3, #8]
 8005e0e:	f003 0307 	and.w	r3, r3, #7
 8005e12:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	2b06      	cmp	r3, #6
 8005e18:	d010      	beq.n	8005e3c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	681a      	ldr	r2, [r3, #0]
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f042 0201 	orr.w	r2, r2, #1
 8005e28:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e2a:	e007      	b.n	8005e3c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	681a      	ldr	r2, [r3, #0]
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f042 0201 	orr.w	r2, r2, #1
 8005e3a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005e3c:	2300      	movs	r3, #0
}
 8005e3e:	4618      	mov	r0, r3
 8005e40:	3714      	adds	r7, #20
 8005e42:	46bd      	mov	sp, r7
 8005e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e48:	4770      	bx	lr
 8005e4a:	bf00      	nop
 8005e4c:	40010000 	.word	0x40010000
 8005e50:	40000400 	.word	0x40000400
 8005e54:	40000800 	.word	0x40000800
 8005e58:	40000c00 	.word	0x40000c00
 8005e5c:	40010400 	.word	0x40010400
 8005e60:	40014000 	.word	0x40014000
 8005e64:	40001800 	.word	0x40001800

08005e68 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b086      	sub	sp, #24
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
 8005e70:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d101      	bne.n	8005e7c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005e78:	2301      	movs	r3, #1
 8005e7a:	e097      	b.n	8005fac <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e82:	b2db      	uxtb	r3, r3
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d106      	bne.n	8005e96 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005e90:	6878      	ldr	r0, [r7, #4]
 8005e92:	f7fb fc3f 	bl	8001714 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2202      	movs	r2, #2
 8005e9a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	689b      	ldr	r3, [r3, #8]
 8005ea4:	687a      	ldr	r2, [r7, #4]
 8005ea6:	6812      	ldr	r2, [r2, #0]
 8005ea8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005eac:	f023 0307 	bic.w	r3, r3, #7
 8005eb0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681a      	ldr	r2, [r3, #0]
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	3304      	adds	r3, #4
 8005eba:	4619      	mov	r1, r3
 8005ebc:	4610      	mov	r0, r2
 8005ebe:	f000 f991 	bl	80061e4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	689b      	ldr	r3, [r3, #8]
 8005ec8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	699b      	ldr	r3, [r3, #24]
 8005ed0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	6a1b      	ldr	r3, [r3, #32]
 8005ed8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	697a      	ldr	r2, [r7, #20]
 8005ee0:	4313      	orrs	r3, r2
 8005ee2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005ee4:	693b      	ldr	r3, [r7, #16]
 8005ee6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005eea:	f023 0303 	bic.w	r3, r3, #3
 8005eee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	689a      	ldr	r2, [r3, #8]
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	699b      	ldr	r3, [r3, #24]
 8005ef8:	021b      	lsls	r3, r3, #8
 8005efa:	4313      	orrs	r3, r2
 8005efc:	693a      	ldr	r2, [r7, #16]
 8005efe:	4313      	orrs	r3, r2
 8005f00:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005f02:	693b      	ldr	r3, [r7, #16]
 8005f04:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8005f08:	f023 030c 	bic.w	r3, r3, #12
 8005f0c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005f0e:	693b      	ldr	r3, [r7, #16]
 8005f10:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005f14:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005f18:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	68da      	ldr	r2, [r3, #12]
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	69db      	ldr	r3, [r3, #28]
 8005f22:	021b      	lsls	r3, r3, #8
 8005f24:	4313      	orrs	r3, r2
 8005f26:	693a      	ldr	r2, [r7, #16]
 8005f28:	4313      	orrs	r3, r2
 8005f2a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	691b      	ldr	r3, [r3, #16]
 8005f30:	011a      	lsls	r2, r3, #4
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	6a1b      	ldr	r3, [r3, #32]
 8005f36:	031b      	lsls	r3, r3, #12
 8005f38:	4313      	orrs	r3, r2
 8005f3a:	693a      	ldr	r2, [r7, #16]
 8005f3c:	4313      	orrs	r3, r2
 8005f3e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8005f46:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8005f4e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	685a      	ldr	r2, [r3, #4]
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	695b      	ldr	r3, [r3, #20]
 8005f58:	011b      	lsls	r3, r3, #4
 8005f5a:	4313      	orrs	r3, r2
 8005f5c:	68fa      	ldr	r2, [r7, #12]
 8005f5e:	4313      	orrs	r3, r2
 8005f60:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	697a      	ldr	r2, [r7, #20]
 8005f68:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	693a      	ldr	r2, [r7, #16]
 8005f70:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	68fa      	ldr	r2, [r7, #12]
 8005f78:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2201      	movs	r2, #1
 8005f7e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2201      	movs	r2, #1
 8005f86:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2201      	movs	r2, #1
 8005f8e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2201      	movs	r2, #1
 8005f96:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2201      	movs	r2, #1
 8005f9e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2201      	movs	r2, #1
 8005fa6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005faa:	2300      	movs	r3, #0
}
 8005fac:	4618      	mov	r0, r3
 8005fae:	3718      	adds	r7, #24
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	bd80      	pop	{r7, pc}

08005fb4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b084      	sub	sp, #16
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	68db      	ldr	r3, [r3, #12]
 8005fc2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	691b      	ldr	r3, [r3, #16]
 8005fca:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005fcc:	68bb      	ldr	r3, [r7, #8]
 8005fce:	f003 0302 	and.w	r3, r3, #2
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d020      	beq.n	8006018 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	f003 0302 	and.w	r3, r3, #2
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d01b      	beq.n	8006018 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f06f 0202 	mvn.w	r2, #2
 8005fe8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2201      	movs	r2, #1
 8005fee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	699b      	ldr	r3, [r3, #24]
 8005ff6:	f003 0303 	and.w	r3, r3, #3
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d003      	beq.n	8006006 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005ffe:	6878      	ldr	r0, [r7, #4]
 8006000:	f000 f8d2 	bl	80061a8 <HAL_TIM_IC_CaptureCallback>
 8006004:	e005      	b.n	8006012 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006006:	6878      	ldr	r0, [r7, #4]
 8006008:	f000 f8c4 	bl	8006194 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800600c:	6878      	ldr	r0, [r7, #4]
 800600e:	f000 f8d5 	bl	80061bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2200      	movs	r2, #0
 8006016:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006018:	68bb      	ldr	r3, [r7, #8]
 800601a:	f003 0304 	and.w	r3, r3, #4
 800601e:	2b00      	cmp	r3, #0
 8006020:	d020      	beq.n	8006064 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	f003 0304 	and.w	r3, r3, #4
 8006028:	2b00      	cmp	r3, #0
 800602a:	d01b      	beq.n	8006064 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f06f 0204 	mvn.w	r2, #4
 8006034:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2202      	movs	r2, #2
 800603a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	699b      	ldr	r3, [r3, #24]
 8006042:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006046:	2b00      	cmp	r3, #0
 8006048:	d003      	beq.n	8006052 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800604a:	6878      	ldr	r0, [r7, #4]
 800604c:	f000 f8ac 	bl	80061a8 <HAL_TIM_IC_CaptureCallback>
 8006050:	e005      	b.n	800605e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006052:	6878      	ldr	r0, [r7, #4]
 8006054:	f000 f89e 	bl	8006194 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006058:	6878      	ldr	r0, [r7, #4]
 800605a:	f000 f8af 	bl	80061bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2200      	movs	r2, #0
 8006062:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006064:	68bb      	ldr	r3, [r7, #8]
 8006066:	f003 0308 	and.w	r3, r3, #8
 800606a:	2b00      	cmp	r3, #0
 800606c:	d020      	beq.n	80060b0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	f003 0308 	and.w	r3, r3, #8
 8006074:	2b00      	cmp	r3, #0
 8006076:	d01b      	beq.n	80060b0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f06f 0208 	mvn.w	r2, #8
 8006080:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2204      	movs	r2, #4
 8006086:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	69db      	ldr	r3, [r3, #28]
 800608e:	f003 0303 	and.w	r3, r3, #3
 8006092:	2b00      	cmp	r3, #0
 8006094:	d003      	beq.n	800609e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006096:	6878      	ldr	r0, [r7, #4]
 8006098:	f000 f886 	bl	80061a8 <HAL_TIM_IC_CaptureCallback>
 800609c:	e005      	b.n	80060aa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800609e:	6878      	ldr	r0, [r7, #4]
 80060a0:	f000 f878 	bl	8006194 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060a4:	6878      	ldr	r0, [r7, #4]
 80060a6:	f000 f889 	bl	80061bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2200      	movs	r2, #0
 80060ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80060b0:	68bb      	ldr	r3, [r7, #8]
 80060b2:	f003 0310 	and.w	r3, r3, #16
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d020      	beq.n	80060fc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	f003 0310 	and.w	r3, r3, #16
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d01b      	beq.n	80060fc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f06f 0210 	mvn.w	r2, #16
 80060cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2208      	movs	r2, #8
 80060d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	69db      	ldr	r3, [r3, #28]
 80060da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d003      	beq.n	80060ea <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80060e2:	6878      	ldr	r0, [r7, #4]
 80060e4:	f000 f860 	bl	80061a8 <HAL_TIM_IC_CaptureCallback>
 80060e8:	e005      	b.n	80060f6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80060ea:	6878      	ldr	r0, [r7, #4]
 80060ec:	f000 f852 	bl	8006194 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060f0:	6878      	ldr	r0, [r7, #4]
 80060f2:	f000 f863 	bl	80061bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2200      	movs	r2, #0
 80060fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80060fc:	68bb      	ldr	r3, [r7, #8]
 80060fe:	f003 0301 	and.w	r3, r3, #1
 8006102:	2b00      	cmp	r3, #0
 8006104:	d00c      	beq.n	8006120 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	f003 0301 	and.w	r3, r3, #1
 800610c:	2b00      	cmp	r3, #0
 800610e:	d007      	beq.n	8006120 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f06f 0201 	mvn.w	r2, #1
 8006118:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800611a:	6878      	ldr	r0, [r7, #4]
 800611c:	f7fa ff30 	bl	8000f80 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006120:	68bb      	ldr	r3, [r7, #8]
 8006122:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006126:	2b00      	cmp	r3, #0
 8006128:	d00c      	beq.n	8006144 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006130:	2b00      	cmp	r3, #0
 8006132:	d007      	beq.n	8006144 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800613c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800613e:	6878      	ldr	r0, [r7, #4]
 8006140:	f000 f982 	bl	8006448 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006144:	68bb      	ldr	r3, [r7, #8]
 8006146:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800614a:	2b00      	cmp	r3, #0
 800614c:	d00c      	beq.n	8006168 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006154:	2b00      	cmp	r3, #0
 8006156:	d007      	beq.n	8006168 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006160:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006162:	6878      	ldr	r0, [r7, #4]
 8006164:	f000 f834 	bl	80061d0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	f003 0320 	and.w	r3, r3, #32
 800616e:	2b00      	cmp	r3, #0
 8006170:	d00c      	beq.n	800618c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	f003 0320 	and.w	r3, r3, #32
 8006178:	2b00      	cmp	r3, #0
 800617a:	d007      	beq.n	800618c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f06f 0220 	mvn.w	r2, #32
 8006184:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006186:	6878      	ldr	r0, [r7, #4]
 8006188:	f000 f954 	bl	8006434 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800618c:	bf00      	nop
 800618e:	3710      	adds	r7, #16
 8006190:	46bd      	mov	sp, r7
 8006192:	bd80      	pop	{r7, pc}

08006194 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006194:	b480      	push	{r7}
 8006196:	b083      	sub	sp, #12
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800619c:	bf00      	nop
 800619e:	370c      	adds	r7, #12
 80061a0:	46bd      	mov	sp, r7
 80061a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a6:	4770      	bx	lr

080061a8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80061a8:	b480      	push	{r7}
 80061aa:	b083      	sub	sp, #12
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80061b0:	bf00      	nop
 80061b2:	370c      	adds	r7, #12
 80061b4:	46bd      	mov	sp, r7
 80061b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ba:	4770      	bx	lr

080061bc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80061bc:	b480      	push	{r7}
 80061be:	b083      	sub	sp, #12
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80061c4:	bf00      	nop
 80061c6:	370c      	adds	r7, #12
 80061c8:	46bd      	mov	sp, r7
 80061ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ce:	4770      	bx	lr

080061d0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80061d0:	b480      	push	{r7}
 80061d2:	b083      	sub	sp, #12
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80061d8:	bf00      	nop
 80061da:	370c      	adds	r7, #12
 80061dc:	46bd      	mov	sp, r7
 80061de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e2:	4770      	bx	lr

080061e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80061e4:	b480      	push	{r7}
 80061e6:	b085      	sub	sp, #20
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
 80061ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	4a46      	ldr	r2, [pc, #280]	@ (8006310 <TIM_Base_SetConfig+0x12c>)
 80061f8:	4293      	cmp	r3, r2
 80061fa:	d013      	beq.n	8006224 <TIM_Base_SetConfig+0x40>
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006202:	d00f      	beq.n	8006224 <TIM_Base_SetConfig+0x40>
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	4a43      	ldr	r2, [pc, #268]	@ (8006314 <TIM_Base_SetConfig+0x130>)
 8006208:	4293      	cmp	r3, r2
 800620a:	d00b      	beq.n	8006224 <TIM_Base_SetConfig+0x40>
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	4a42      	ldr	r2, [pc, #264]	@ (8006318 <TIM_Base_SetConfig+0x134>)
 8006210:	4293      	cmp	r3, r2
 8006212:	d007      	beq.n	8006224 <TIM_Base_SetConfig+0x40>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	4a41      	ldr	r2, [pc, #260]	@ (800631c <TIM_Base_SetConfig+0x138>)
 8006218:	4293      	cmp	r3, r2
 800621a:	d003      	beq.n	8006224 <TIM_Base_SetConfig+0x40>
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	4a40      	ldr	r2, [pc, #256]	@ (8006320 <TIM_Base_SetConfig+0x13c>)
 8006220:	4293      	cmp	r3, r2
 8006222:	d108      	bne.n	8006236 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800622a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	685b      	ldr	r3, [r3, #4]
 8006230:	68fa      	ldr	r2, [r7, #12]
 8006232:	4313      	orrs	r3, r2
 8006234:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	4a35      	ldr	r2, [pc, #212]	@ (8006310 <TIM_Base_SetConfig+0x12c>)
 800623a:	4293      	cmp	r3, r2
 800623c:	d02b      	beq.n	8006296 <TIM_Base_SetConfig+0xb2>
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006244:	d027      	beq.n	8006296 <TIM_Base_SetConfig+0xb2>
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	4a32      	ldr	r2, [pc, #200]	@ (8006314 <TIM_Base_SetConfig+0x130>)
 800624a:	4293      	cmp	r3, r2
 800624c:	d023      	beq.n	8006296 <TIM_Base_SetConfig+0xb2>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	4a31      	ldr	r2, [pc, #196]	@ (8006318 <TIM_Base_SetConfig+0x134>)
 8006252:	4293      	cmp	r3, r2
 8006254:	d01f      	beq.n	8006296 <TIM_Base_SetConfig+0xb2>
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	4a30      	ldr	r2, [pc, #192]	@ (800631c <TIM_Base_SetConfig+0x138>)
 800625a:	4293      	cmp	r3, r2
 800625c:	d01b      	beq.n	8006296 <TIM_Base_SetConfig+0xb2>
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	4a2f      	ldr	r2, [pc, #188]	@ (8006320 <TIM_Base_SetConfig+0x13c>)
 8006262:	4293      	cmp	r3, r2
 8006264:	d017      	beq.n	8006296 <TIM_Base_SetConfig+0xb2>
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	4a2e      	ldr	r2, [pc, #184]	@ (8006324 <TIM_Base_SetConfig+0x140>)
 800626a:	4293      	cmp	r3, r2
 800626c:	d013      	beq.n	8006296 <TIM_Base_SetConfig+0xb2>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	4a2d      	ldr	r2, [pc, #180]	@ (8006328 <TIM_Base_SetConfig+0x144>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d00f      	beq.n	8006296 <TIM_Base_SetConfig+0xb2>
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	4a2c      	ldr	r2, [pc, #176]	@ (800632c <TIM_Base_SetConfig+0x148>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d00b      	beq.n	8006296 <TIM_Base_SetConfig+0xb2>
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	4a2b      	ldr	r2, [pc, #172]	@ (8006330 <TIM_Base_SetConfig+0x14c>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d007      	beq.n	8006296 <TIM_Base_SetConfig+0xb2>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	4a2a      	ldr	r2, [pc, #168]	@ (8006334 <TIM_Base_SetConfig+0x150>)
 800628a:	4293      	cmp	r3, r2
 800628c:	d003      	beq.n	8006296 <TIM_Base_SetConfig+0xb2>
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	4a29      	ldr	r2, [pc, #164]	@ (8006338 <TIM_Base_SetConfig+0x154>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d108      	bne.n	80062a8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800629c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	68db      	ldr	r3, [r3, #12]
 80062a2:	68fa      	ldr	r2, [r7, #12]
 80062a4:	4313      	orrs	r3, r2
 80062a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	695b      	ldr	r3, [r3, #20]
 80062b2:	4313      	orrs	r3, r2
 80062b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	68fa      	ldr	r2, [r7, #12]
 80062ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	689a      	ldr	r2, [r3, #8]
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	681a      	ldr	r2, [r3, #0]
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	4a10      	ldr	r2, [pc, #64]	@ (8006310 <TIM_Base_SetConfig+0x12c>)
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d003      	beq.n	80062dc <TIM_Base_SetConfig+0xf8>
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	4a12      	ldr	r2, [pc, #72]	@ (8006320 <TIM_Base_SetConfig+0x13c>)
 80062d8:	4293      	cmp	r3, r2
 80062da:	d103      	bne.n	80062e4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	691a      	ldr	r2, [r3, #16]
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2201      	movs	r2, #1
 80062e8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	691b      	ldr	r3, [r3, #16]
 80062ee:	f003 0301 	and.w	r3, r3, #1
 80062f2:	2b01      	cmp	r3, #1
 80062f4:	d105      	bne.n	8006302 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	691b      	ldr	r3, [r3, #16]
 80062fa:	f023 0201 	bic.w	r2, r3, #1
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	611a      	str	r2, [r3, #16]
  }
}
 8006302:	bf00      	nop
 8006304:	3714      	adds	r7, #20
 8006306:	46bd      	mov	sp, r7
 8006308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630c:	4770      	bx	lr
 800630e:	bf00      	nop
 8006310:	40010000 	.word	0x40010000
 8006314:	40000400 	.word	0x40000400
 8006318:	40000800 	.word	0x40000800
 800631c:	40000c00 	.word	0x40000c00
 8006320:	40010400 	.word	0x40010400
 8006324:	40014000 	.word	0x40014000
 8006328:	40014400 	.word	0x40014400
 800632c:	40014800 	.word	0x40014800
 8006330:	40001800 	.word	0x40001800
 8006334:	40001c00 	.word	0x40001c00
 8006338:	40002000 	.word	0x40002000

0800633c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800633c:	b480      	push	{r7}
 800633e:	b085      	sub	sp, #20
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
 8006344:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800634c:	2b01      	cmp	r3, #1
 800634e:	d101      	bne.n	8006354 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006350:	2302      	movs	r3, #2
 8006352:	e05a      	b.n	800640a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2201      	movs	r2, #1
 8006358:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2202      	movs	r2, #2
 8006360:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	685b      	ldr	r3, [r3, #4]
 800636a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	689b      	ldr	r3, [r3, #8]
 8006372:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800637a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	68fa      	ldr	r2, [r7, #12]
 8006382:	4313      	orrs	r3, r2
 8006384:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	68fa      	ldr	r2, [r7, #12]
 800638c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	4a21      	ldr	r2, [pc, #132]	@ (8006418 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006394:	4293      	cmp	r3, r2
 8006396:	d022      	beq.n	80063de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80063a0:	d01d      	beq.n	80063de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	4a1d      	ldr	r2, [pc, #116]	@ (800641c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80063a8:	4293      	cmp	r3, r2
 80063aa:	d018      	beq.n	80063de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	4a1b      	ldr	r2, [pc, #108]	@ (8006420 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80063b2:	4293      	cmp	r3, r2
 80063b4:	d013      	beq.n	80063de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	4a1a      	ldr	r2, [pc, #104]	@ (8006424 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80063bc:	4293      	cmp	r3, r2
 80063be:	d00e      	beq.n	80063de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	4a18      	ldr	r2, [pc, #96]	@ (8006428 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d009      	beq.n	80063de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	4a17      	ldr	r2, [pc, #92]	@ (800642c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d004      	beq.n	80063de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	4a15      	ldr	r2, [pc, #84]	@ (8006430 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80063da:	4293      	cmp	r3, r2
 80063dc:	d10c      	bne.n	80063f8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80063de:	68bb      	ldr	r3, [r7, #8]
 80063e0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80063e4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	685b      	ldr	r3, [r3, #4]
 80063ea:	68ba      	ldr	r2, [r7, #8]
 80063ec:	4313      	orrs	r3, r2
 80063ee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	68ba      	ldr	r2, [r7, #8]
 80063f6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2201      	movs	r2, #1
 80063fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2200      	movs	r2, #0
 8006404:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006408:	2300      	movs	r3, #0
}
 800640a:	4618      	mov	r0, r3
 800640c:	3714      	adds	r7, #20
 800640e:	46bd      	mov	sp, r7
 8006410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006414:	4770      	bx	lr
 8006416:	bf00      	nop
 8006418:	40010000 	.word	0x40010000
 800641c:	40000400 	.word	0x40000400
 8006420:	40000800 	.word	0x40000800
 8006424:	40000c00 	.word	0x40000c00
 8006428:	40010400 	.word	0x40010400
 800642c:	40014000 	.word	0x40014000
 8006430:	40001800 	.word	0x40001800

08006434 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006434:	b480      	push	{r7}
 8006436:	b083      	sub	sp, #12
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800643c:	bf00      	nop
 800643e:	370c      	adds	r7, #12
 8006440:	46bd      	mov	sp, r7
 8006442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006446:	4770      	bx	lr

08006448 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006448:	b480      	push	{r7}
 800644a:	b083      	sub	sp, #12
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006450:	bf00      	nop
 8006452:	370c      	adds	r7, #12
 8006454:	46bd      	mov	sp, r7
 8006456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645a:	4770      	bx	lr

0800645c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b082      	sub	sp, #8
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d101      	bne.n	800646e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800646a:	2301      	movs	r3, #1
 800646c:	e042      	b.n	80064f4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006474:	b2db      	uxtb	r3, r3
 8006476:	2b00      	cmp	r3, #0
 8006478:	d106      	bne.n	8006488 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2200      	movs	r2, #0
 800647e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006482:	6878      	ldr	r0, [r7, #4]
 8006484:	f7fb fb10 	bl	8001aa8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2224      	movs	r2, #36	@ 0x24
 800648c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	68da      	ldr	r2, [r3, #12]
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800649e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80064a0:	6878      	ldr	r0, [r7, #4]
 80064a2:	f000 fc85 	bl	8006db0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	691a      	ldr	r2, [r3, #16]
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80064b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	695a      	ldr	r2, [r3, #20]
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80064c4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	68da      	ldr	r2, [r3, #12]
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80064d4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	2200      	movs	r2, #0
 80064da:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2220      	movs	r2, #32
 80064e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2220      	movs	r2, #32
 80064e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2200      	movs	r2, #0
 80064f0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80064f2:	2300      	movs	r3, #0
}
 80064f4:	4618      	mov	r0, r3
 80064f6:	3708      	adds	r7, #8
 80064f8:	46bd      	mov	sp, r7
 80064fa:	bd80      	pop	{r7, pc}

080064fc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b0ba      	sub	sp, #232	@ 0xe8
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	68db      	ldr	r3, [r3, #12]
 8006514:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	695b      	ldr	r3, [r3, #20]
 800651e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8006522:	2300      	movs	r3, #0
 8006524:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006528:	2300      	movs	r3, #0
 800652a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800652e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006532:	f003 030f 	and.w	r3, r3, #15
 8006536:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800653a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800653e:	2b00      	cmp	r3, #0
 8006540:	d10f      	bne.n	8006562 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006542:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006546:	f003 0320 	and.w	r3, r3, #32
 800654a:	2b00      	cmp	r3, #0
 800654c:	d009      	beq.n	8006562 <HAL_UART_IRQHandler+0x66>
 800654e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006552:	f003 0320 	and.w	r3, r3, #32
 8006556:	2b00      	cmp	r3, #0
 8006558:	d003      	beq.n	8006562 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800655a:	6878      	ldr	r0, [r7, #4]
 800655c:	f000 fb69 	bl	8006c32 <UART_Receive_IT>
      return;
 8006560:	e25b      	b.n	8006a1a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006562:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006566:	2b00      	cmp	r3, #0
 8006568:	f000 80de 	beq.w	8006728 <HAL_UART_IRQHandler+0x22c>
 800656c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006570:	f003 0301 	and.w	r3, r3, #1
 8006574:	2b00      	cmp	r3, #0
 8006576:	d106      	bne.n	8006586 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006578:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800657c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8006580:	2b00      	cmp	r3, #0
 8006582:	f000 80d1 	beq.w	8006728 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006586:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800658a:	f003 0301 	and.w	r3, r3, #1
 800658e:	2b00      	cmp	r3, #0
 8006590:	d00b      	beq.n	80065aa <HAL_UART_IRQHandler+0xae>
 8006592:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006596:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800659a:	2b00      	cmp	r3, #0
 800659c:	d005      	beq.n	80065aa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065a2:	f043 0201 	orr.w	r2, r3, #1
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80065aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80065ae:	f003 0304 	and.w	r3, r3, #4
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d00b      	beq.n	80065ce <HAL_UART_IRQHandler+0xd2>
 80065b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80065ba:	f003 0301 	and.w	r3, r3, #1
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d005      	beq.n	80065ce <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065c6:	f043 0202 	orr.w	r2, r3, #2
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80065ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80065d2:	f003 0302 	and.w	r3, r3, #2
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d00b      	beq.n	80065f2 <HAL_UART_IRQHandler+0xf6>
 80065da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80065de:	f003 0301 	and.w	r3, r3, #1
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d005      	beq.n	80065f2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065ea:	f043 0204 	orr.w	r2, r3, #4
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80065f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80065f6:	f003 0308 	and.w	r3, r3, #8
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d011      	beq.n	8006622 <HAL_UART_IRQHandler+0x126>
 80065fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006602:	f003 0320 	and.w	r3, r3, #32
 8006606:	2b00      	cmp	r3, #0
 8006608:	d105      	bne.n	8006616 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800660a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800660e:	f003 0301 	and.w	r3, r3, #1
 8006612:	2b00      	cmp	r3, #0
 8006614:	d005      	beq.n	8006622 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800661a:	f043 0208 	orr.w	r2, r3, #8
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006626:	2b00      	cmp	r3, #0
 8006628:	f000 81f2 	beq.w	8006a10 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800662c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006630:	f003 0320 	and.w	r3, r3, #32
 8006634:	2b00      	cmp	r3, #0
 8006636:	d008      	beq.n	800664a <HAL_UART_IRQHandler+0x14e>
 8006638:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800663c:	f003 0320 	and.w	r3, r3, #32
 8006640:	2b00      	cmp	r3, #0
 8006642:	d002      	beq.n	800664a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006644:	6878      	ldr	r0, [r7, #4]
 8006646:	f000 faf4 	bl	8006c32 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	695b      	ldr	r3, [r3, #20]
 8006650:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006654:	2b40      	cmp	r3, #64	@ 0x40
 8006656:	bf0c      	ite	eq
 8006658:	2301      	moveq	r3, #1
 800665a:	2300      	movne	r3, #0
 800665c:	b2db      	uxtb	r3, r3
 800665e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006666:	f003 0308 	and.w	r3, r3, #8
 800666a:	2b00      	cmp	r3, #0
 800666c:	d103      	bne.n	8006676 <HAL_UART_IRQHandler+0x17a>
 800666e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006672:	2b00      	cmp	r3, #0
 8006674:	d04f      	beq.n	8006716 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006676:	6878      	ldr	r0, [r7, #4]
 8006678:	f000 f9fc 	bl	8006a74 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	695b      	ldr	r3, [r3, #20]
 8006682:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006686:	2b40      	cmp	r3, #64	@ 0x40
 8006688:	d141      	bne.n	800670e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	3314      	adds	r3, #20
 8006690:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006694:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006698:	e853 3f00 	ldrex	r3, [r3]
 800669c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80066a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80066a4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80066a8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	3314      	adds	r3, #20
 80066b2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80066b6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80066ba:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066be:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80066c2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80066c6:	e841 2300 	strex	r3, r2, [r1]
 80066ca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80066ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d1d9      	bne.n	800668a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d013      	beq.n	8006706 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066e2:	4a7e      	ldr	r2, [pc, #504]	@ (80068dc <HAL_UART_IRQHandler+0x3e0>)
 80066e4:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066ea:	4618      	mov	r0, r3
 80066ec:	f7fc fcee 	bl	80030cc <HAL_DMA_Abort_IT>
 80066f0:	4603      	mov	r3, r0
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d016      	beq.n	8006724 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80066fc:	687a      	ldr	r2, [r7, #4]
 80066fe:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006700:	4610      	mov	r0, r2
 8006702:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006704:	e00e      	b.n	8006724 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006706:	6878      	ldr	r0, [r7, #4]
 8006708:	f000 f99e 	bl	8006a48 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800670c:	e00a      	b.n	8006724 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800670e:	6878      	ldr	r0, [r7, #4]
 8006710:	f000 f99a 	bl	8006a48 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006714:	e006      	b.n	8006724 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006716:	6878      	ldr	r0, [r7, #4]
 8006718:	f000 f996 	bl	8006a48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2200      	movs	r2, #0
 8006720:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8006722:	e175      	b.n	8006a10 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006724:	bf00      	nop
    return;
 8006726:	e173      	b.n	8006a10 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800672c:	2b01      	cmp	r3, #1
 800672e:	f040 814f 	bne.w	80069d0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006732:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006736:	f003 0310 	and.w	r3, r3, #16
 800673a:	2b00      	cmp	r3, #0
 800673c:	f000 8148 	beq.w	80069d0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006740:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006744:	f003 0310 	and.w	r3, r3, #16
 8006748:	2b00      	cmp	r3, #0
 800674a:	f000 8141 	beq.w	80069d0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800674e:	2300      	movs	r3, #0
 8006750:	60bb      	str	r3, [r7, #8]
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	60bb      	str	r3, [r7, #8]
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	685b      	ldr	r3, [r3, #4]
 8006760:	60bb      	str	r3, [r7, #8]
 8006762:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	695b      	ldr	r3, [r3, #20]
 800676a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800676e:	2b40      	cmp	r3, #64	@ 0x40
 8006770:	f040 80b6 	bne.w	80068e0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	685b      	ldr	r3, [r3, #4]
 800677c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006780:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006784:	2b00      	cmp	r3, #0
 8006786:	f000 8145 	beq.w	8006a14 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800678e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006792:	429a      	cmp	r2, r3
 8006794:	f080 813e 	bcs.w	8006a14 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800679e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067a4:	69db      	ldr	r3, [r3, #28]
 80067a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80067aa:	f000 8088 	beq.w	80068be <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	330c      	adds	r3, #12
 80067b4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067b8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80067bc:	e853 3f00 	ldrex	r3, [r3]
 80067c0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80067c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80067c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80067cc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	330c      	adds	r3, #12
 80067d6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80067da:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80067de:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067e2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80067e6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80067ea:	e841 2300 	strex	r3, r2, [r1]
 80067ee:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80067f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d1d9      	bne.n	80067ae <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	3314      	adds	r3, #20
 8006800:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006802:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006804:	e853 3f00 	ldrex	r3, [r3]
 8006808:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800680a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800680c:	f023 0301 	bic.w	r3, r3, #1
 8006810:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	3314      	adds	r3, #20
 800681a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800681e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006822:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006824:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006826:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800682a:	e841 2300 	strex	r3, r2, [r1]
 800682e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006830:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006832:	2b00      	cmp	r3, #0
 8006834:	d1e1      	bne.n	80067fa <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	3314      	adds	r3, #20
 800683c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800683e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006840:	e853 3f00 	ldrex	r3, [r3]
 8006844:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006846:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006848:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800684c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	3314      	adds	r3, #20
 8006856:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800685a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800685c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800685e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006860:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006862:	e841 2300 	strex	r3, r2, [r1]
 8006866:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006868:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800686a:	2b00      	cmp	r3, #0
 800686c:	d1e3      	bne.n	8006836 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2220      	movs	r2, #32
 8006872:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2200      	movs	r2, #0
 800687a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	330c      	adds	r3, #12
 8006882:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006884:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006886:	e853 3f00 	ldrex	r3, [r3]
 800688a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800688c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800688e:	f023 0310 	bic.w	r3, r3, #16
 8006892:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	330c      	adds	r3, #12
 800689c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80068a0:	65ba      	str	r2, [r7, #88]	@ 0x58
 80068a2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068a4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80068a6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80068a8:	e841 2300 	strex	r3, r2, [r1]
 80068ac:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80068ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d1e3      	bne.n	800687c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068b8:	4618      	mov	r0, r3
 80068ba:	f7fc fb97 	bl	8002fec <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	2202      	movs	r2, #2
 80068c2:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80068cc:	b29b      	uxth	r3, r3
 80068ce:	1ad3      	subs	r3, r2, r3
 80068d0:	b29b      	uxth	r3, r3
 80068d2:	4619      	mov	r1, r3
 80068d4:	6878      	ldr	r0, [r7, #4]
 80068d6:	f000 f8c1 	bl	8006a5c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80068da:	e09b      	b.n	8006a14 <HAL_UART_IRQHandler+0x518>
 80068dc:	08006b3b 	.word	0x08006b3b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80068e8:	b29b      	uxth	r3, r3
 80068ea:	1ad3      	subs	r3, r2, r3
 80068ec:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80068f4:	b29b      	uxth	r3, r3
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	f000 808e 	beq.w	8006a18 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80068fc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006900:	2b00      	cmp	r3, #0
 8006902:	f000 8089 	beq.w	8006a18 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	330c      	adds	r3, #12
 800690c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800690e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006910:	e853 3f00 	ldrex	r3, [r3]
 8006914:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006916:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006918:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800691c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	330c      	adds	r3, #12
 8006926:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800692a:	647a      	str	r2, [r7, #68]	@ 0x44
 800692c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800692e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006930:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006932:	e841 2300 	strex	r3, r2, [r1]
 8006936:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006938:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800693a:	2b00      	cmp	r3, #0
 800693c:	d1e3      	bne.n	8006906 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	3314      	adds	r3, #20
 8006944:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006948:	e853 3f00 	ldrex	r3, [r3]
 800694c:	623b      	str	r3, [r7, #32]
   return(result);
 800694e:	6a3b      	ldr	r3, [r7, #32]
 8006950:	f023 0301 	bic.w	r3, r3, #1
 8006954:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	3314      	adds	r3, #20
 800695e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006962:	633a      	str	r2, [r7, #48]	@ 0x30
 8006964:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006966:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006968:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800696a:	e841 2300 	strex	r3, r2, [r1]
 800696e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006970:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006972:	2b00      	cmp	r3, #0
 8006974:	d1e3      	bne.n	800693e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	2220      	movs	r2, #32
 800697a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	2200      	movs	r2, #0
 8006982:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	330c      	adds	r3, #12
 800698a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800698c:	693b      	ldr	r3, [r7, #16]
 800698e:	e853 3f00 	ldrex	r3, [r3]
 8006992:	60fb      	str	r3, [r7, #12]
   return(result);
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	f023 0310 	bic.w	r3, r3, #16
 800699a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	330c      	adds	r3, #12
 80069a4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80069a8:	61fa      	str	r2, [r7, #28]
 80069aa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069ac:	69b9      	ldr	r1, [r7, #24]
 80069ae:	69fa      	ldr	r2, [r7, #28]
 80069b0:	e841 2300 	strex	r3, r2, [r1]
 80069b4:	617b      	str	r3, [r7, #20]
   return(result);
 80069b6:	697b      	ldr	r3, [r7, #20]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d1e3      	bne.n	8006984 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2202      	movs	r2, #2
 80069c0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80069c2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80069c6:	4619      	mov	r1, r3
 80069c8:	6878      	ldr	r0, [r7, #4]
 80069ca:	f000 f847 	bl	8006a5c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80069ce:	e023      	b.n	8006a18 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80069d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80069d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d009      	beq.n	80069f0 <HAL_UART_IRQHandler+0x4f4>
 80069dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80069e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d003      	beq.n	80069f0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80069e8:	6878      	ldr	r0, [r7, #4]
 80069ea:	f000 f8ba 	bl	8006b62 <UART_Transmit_IT>
    return;
 80069ee:	e014      	b.n	8006a1a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80069f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80069f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d00e      	beq.n	8006a1a <HAL_UART_IRQHandler+0x51e>
 80069fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d008      	beq.n	8006a1a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006a08:	6878      	ldr	r0, [r7, #4]
 8006a0a:	f000 f8fa 	bl	8006c02 <UART_EndTransmit_IT>
    return;
 8006a0e:	e004      	b.n	8006a1a <HAL_UART_IRQHandler+0x51e>
    return;
 8006a10:	bf00      	nop
 8006a12:	e002      	b.n	8006a1a <HAL_UART_IRQHandler+0x51e>
      return;
 8006a14:	bf00      	nop
 8006a16:	e000      	b.n	8006a1a <HAL_UART_IRQHandler+0x51e>
      return;
 8006a18:	bf00      	nop
  }
}
 8006a1a:	37e8      	adds	r7, #232	@ 0xe8
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	bd80      	pop	{r7, pc}

08006a20 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006a20:	b480      	push	{r7}
 8006a22:	b083      	sub	sp, #12
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006a28:	bf00      	nop
 8006a2a:	370c      	adds	r7, #12
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a32:	4770      	bx	lr

08006a34 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006a34:	b480      	push	{r7}
 8006a36:	b083      	sub	sp, #12
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006a3c:	bf00      	nop
 8006a3e:	370c      	adds	r7, #12
 8006a40:	46bd      	mov	sp, r7
 8006a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a46:	4770      	bx	lr

08006a48 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006a48:	b480      	push	{r7}
 8006a4a:	b083      	sub	sp, #12
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006a50:	bf00      	nop
 8006a52:	370c      	adds	r7, #12
 8006a54:	46bd      	mov	sp, r7
 8006a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5a:	4770      	bx	lr

08006a5c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006a5c:	b480      	push	{r7}
 8006a5e:	b083      	sub	sp, #12
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
 8006a64:	460b      	mov	r3, r1
 8006a66:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006a68:	bf00      	nop
 8006a6a:	370c      	adds	r7, #12
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a72:	4770      	bx	lr

08006a74 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006a74:	b480      	push	{r7}
 8006a76:	b095      	sub	sp, #84	@ 0x54
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	330c      	adds	r3, #12
 8006a82:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a86:	e853 3f00 	ldrex	r3, [r3]
 8006a8a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006a8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a8e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006a92:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	330c      	adds	r3, #12
 8006a9a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006a9c:	643a      	str	r2, [r7, #64]	@ 0x40
 8006a9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aa0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006aa2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006aa4:	e841 2300 	strex	r3, r2, [r1]
 8006aa8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006aaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d1e5      	bne.n	8006a7c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	3314      	adds	r3, #20
 8006ab6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ab8:	6a3b      	ldr	r3, [r7, #32]
 8006aba:	e853 3f00 	ldrex	r3, [r3]
 8006abe:	61fb      	str	r3, [r7, #28]
   return(result);
 8006ac0:	69fb      	ldr	r3, [r7, #28]
 8006ac2:	f023 0301 	bic.w	r3, r3, #1
 8006ac6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	3314      	adds	r3, #20
 8006ace:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006ad0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006ad2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ad4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006ad6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006ad8:	e841 2300 	strex	r3, r2, [r1]
 8006adc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006ade:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d1e5      	bne.n	8006ab0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ae8:	2b01      	cmp	r3, #1
 8006aea:	d119      	bne.n	8006b20 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	330c      	adds	r3, #12
 8006af2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	e853 3f00 	ldrex	r3, [r3]
 8006afa:	60bb      	str	r3, [r7, #8]
   return(result);
 8006afc:	68bb      	ldr	r3, [r7, #8]
 8006afe:	f023 0310 	bic.w	r3, r3, #16
 8006b02:	647b      	str	r3, [r7, #68]	@ 0x44
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	330c      	adds	r3, #12
 8006b0a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006b0c:	61ba      	str	r2, [r7, #24]
 8006b0e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b10:	6979      	ldr	r1, [r7, #20]
 8006b12:	69ba      	ldr	r2, [r7, #24]
 8006b14:	e841 2300 	strex	r3, r2, [r1]
 8006b18:	613b      	str	r3, [r7, #16]
   return(result);
 8006b1a:	693b      	ldr	r3, [r7, #16]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d1e5      	bne.n	8006aec <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2220      	movs	r2, #32
 8006b24:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006b2e:	bf00      	nop
 8006b30:	3754      	adds	r7, #84	@ 0x54
 8006b32:	46bd      	mov	sp, r7
 8006b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b38:	4770      	bx	lr

08006b3a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006b3a:	b580      	push	{r7, lr}
 8006b3c:	b084      	sub	sp, #16
 8006b3e:	af00      	add	r7, sp, #0
 8006b40:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b46:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	2200      	movs	r2, #0
 8006b52:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006b54:	68f8      	ldr	r0, [r7, #12]
 8006b56:	f7ff ff77 	bl	8006a48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006b5a:	bf00      	nop
 8006b5c:	3710      	adds	r7, #16
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	bd80      	pop	{r7, pc}

08006b62 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006b62:	b480      	push	{r7}
 8006b64:	b085      	sub	sp, #20
 8006b66:	af00      	add	r7, sp, #0
 8006b68:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006b70:	b2db      	uxtb	r3, r3
 8006b72:	2b21      	cmp	r3, #33	@ 0x21
 8006b74:	d13e      	bne.n	8006bf4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	689b      	ldr	r3, [r3, #8]
 8006b7a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006b7e:	d114      	bne.n	8006baa <UART_Transmit_IT+0x48>
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	691b      	ldr	r3, [r3, #16]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d110      	bne.n	8006baa <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	6a1b      	ldr	r3, [r3, #32]
 8006b8c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	881b      	ldrh	r3, [r3, #0]
 8006b92:	461a      	mov	r2, r3
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006b9c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	6a1b      	ldr	r3, [r3, #32]
 8006ba2:	1c9a      	adds	r2, r3, #2
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	621a      	str	r2, [r3, #32]
 8006ba8:	e008      	b.n	8006bbc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	6a1b      	ldr	r3, [r3, #32]
 8006bae:	1c59      	adds	r1, r3, #1
 8006bb0:	687a      	ldr	r2, [r7, #4]
 8006bb2:	6211      	str	r1, [r2, #32]
 8006bb4:	781a      	ldrb	r2, [r3, #0]
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006bc0:	b29b      	uxth	r3, r3
 8006bc2:	3b01      	subs	r3, #1
 8006bc4:	b29b      	uxth	r3, r3
 8006bc6:	687a      	ldr	r2, [r7, #4]
 8006bc8:	4619      	mov	r1, r3
 8006bca:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d10f      	bne.n	8006bf0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	68da      	ldr	r2, [r3, #12]
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006bde:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	68da      	ldr	r2, [r3, #12]
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006bee:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	e000      	b.n	8006bf6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006bf4:	2302      	movs	r3, #2
  }
}
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	3714      	adds	r7, #20
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c00:	4770      	bx	lr

08006c02 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006c02:	b580      	push	{r7, lr}
 8006c04:	b082      	sub	sp, #8
 8006c06:	af00      	add	r7, sp, #0
 8006c08:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	68da      	ldr	r2, [r3, #12]
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006c18:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	2220      	movs	r2, #32
 8006c1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006c22:	6878      	ldr	r0, [r7, #4]
 8006c24:	f7ff fefc 	bl	8006a20 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006c28:	2300      	movs	r3, #0
}
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	3708      	adds	r7, #8
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	bd80      	pop	{r7, pc}

08006c32 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006c32:	b580      	push	{r7, lr}
 8006c34:	b08c      	sub	sp, #48	@ 0x30
 8006c36:	af00      	add	r7, sp, #0
 8006c38:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006c40:	b2db      	uxtb	r3, r3
 8006c42:	2b22      	cmp	r3, #34	@ 0x22
 8006c44:	f040 80ae 	bne.w	8006da4 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	689b      	ldr	r3, [r3, #8]
 8006c4c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006c50:	d117      	bne.n	8006c82 <UART_Receive_IT+0x50>
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	691b      	ldr	r3, [r3, #16]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d113      	bne.n	8006c82 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c62:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	685b      	ldr	r3, [r3, #4]
 8006c6a:	b29b      	uxth	r3, r3
 8006c6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c70:	b29a      	uxth	r2, r3
 8006c72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c74:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c7a:	1c9a      	adds	r2, r3, #2
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	629a      	str	r2, [r3, #40]	@ 0x28
 8006c80:	e026      	b.n	8006cd0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c86:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8006c88:	2300      	movs	r3, #0
 8006c8a:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	689b      	ldr	r3, [r3, #8]
 8006c90:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006c94:	d007      	beq.n	8006ca6 <UART_Receive_IT+0x74>
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	689b      	ldr	r3, [r3, #8]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d10a      	bne.n	8006cb4 <UART_Receive_IT+0x82>
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	691b      	ldr	r3, [r3, #16]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d106      	bne.n	8006cb4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	685b      	ldr	r3, [r3, #4]
 8006cac:	b2da      	uxtb	r2, r3
 8006cae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cb0:	701a      	strb	r2, [r3, #0]
 8006cb2:	e008      	b.n	8006cc6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	685b      	ldr	r3, [r3, #4]
 8006cba:	b2db      	uxtb	r3, r3
 8006cbc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006cc0:	b2da      	uxtb	r2, r3
 8006cc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cc4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cca:	1c5a      	adds	r2, r3, #1
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006cd4:	b29b      	uxth	r3, r3
 8006cd6:	3b01      	subs	r3, #1
 8006cd8:	b29b      	uxth	r3, r3
 8006cda:	687a      	ldr	r2, [r7, #4]
 8006cdc:	4619      	mov	r1, r3
 8006cde:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d15d      	bne.n	8006da0 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	68da      	ldr	r2, [r3, #12]
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f022 0220 	bic.w	r2, r2, #32
 8006cf2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	68da      	ldr	r2, [r3, #12]
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006d02:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	695a      	ldr	r2, [r3, #20]
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f022 0201 	bic.w	r2, r2, #1
 8006d12:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2220      	movs	r2, #32
 8006d18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2200      	movs	r2, #0
 8006d20:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d26:	2b01      	cmp	r3, #1
 8006d28:	d135      	bne.n	8006d96 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	330c      	adds	r3, #12
 8006d36:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d38:	697b      	ldr	r3, [r7, #20]
 8006d3a:	e853 3f00 	ldrex	r3, [r3]
 8006d3e:	613b      	str	r3, [r7, #16]
   return(result);
 8006d40:	693b      	ldr	r3, [r7, #16]
 8006d42:	f023 0310 	bic.w	r3, r3, #16
 8006d46:	627b      	str	r3, [r7, #36]	@ 0x24
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	330c      	adds	r3, #12
 8006d4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006d50:	623a      	str	r2, [r7, #32]
 8006d52:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d54:	69f9      	ldr	r1, [r7, #28]
 8006d56:	6a3a      	ldr	r2, [r7, #32]
 8006d58:	e841 2300 	strex	r3, r2, [r1]
 8006d5c:	61bb      	str	r3, [r7, #24]
   return(result);
 8006d5e:	69bb      	ldr	r3, [r7, #24]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d1e5      	bne.n	8006d30 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f003 0310 	and.w	r3, r3, #16
 8006d6e:	2b10      	cmp	r3, #16
 8006d70:	d10a      	bne.n	8006d88 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006d72:	2300      	movs	r3, #0
 8006d74:	60fb      	str	r3, [r7, #12]
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	60fb      	str	r3, [r7, #12]
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	685b      	ldr	r3, [r3, #4]
 8006d84:	60fb      	str	r3, [r7, #12]
 8006d86:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006d8c:	4619      	mov	r1, r3
 8006d8e:	6878      	ldr	r0, [r7, #4]
 8006d90:	f7ff fe64 	bl	8006a5c <HAL_UARTEx_RxEventCallback>
 8006d94:	e002      	b.n	8006d9c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006d96:	6878      	ldr	r0, [r7, #4]
 8006d98:	f7ff fe4c 	bl	8006a34 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	e002      	b.n	8006da6 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006da0:	2300      	movs	r3, #0
 8006da2:	e000      	b.n	8006da6 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006da4:	2302      	movs	r3, #2
  }
}
 8006da6:	4618      	mov	r0, r3
 8006da8:	3730      	adds	r7, #48	@ 0x30
 8006daa:	46bd      	mov	sp, r7
 8006dac:	bd80      	pop	{r7, pc}
	...

08006db0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006db0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006db4:	b0c0      	sub	sp, #256	@ 0x100
 8006db6:	af00      	add	r7, sp, #0
 8006db8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006dbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	691b      	ldr	r3, [r3, #16]
 8006dc4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006dc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006dcc:	68d9      	ldr	r1, [r3, #12]
 8006dce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006dd2:	681a      	ldr	r2, [r3, #0]
 8006dd4:	ea40 0301 	orr.w	r3, r0, r1
 8006dd8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006dda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006dde:	689a      	ldr	r2, [r3, #8]
 8006de0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006de4:	691b      	ldr	r3, [r3, #16]
 8006de6:	431a      	orrs	r2, r3
 8006de8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006dec:	695b      	ldr	r3, [r3, #20]
 8006dee:	431a      	orrs	r2, r3
 8006df0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006df4:	69db      	ldr	r3, [r3, #28]
 8006df6:	4313      	orrs	r3, r2
 8006df8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006dfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	68db      	ldr	r3, [r3, #12]
 8006e04:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006e08:	f021 010c 	bic.w	r1, r1, #12
 8006e0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e10:	681a      	ldr	r2, [r3, #0]
 8006e12:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006e16:	430b      	orrs	r3, r1
 8006e18:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006e1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	695b      	ldr	r3, [r3, #20]
 8006e22:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006e26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e2a:	6999      	ldr	r1, [r3, #24]
 8006e2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e30:	681a      	ldr	r2, [r3, #0]
 8006e32:	ea40 0301 	orr.w	r3, r0, r1
 8006e36:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006e38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e3c:	681a      	ldr	r2, [r3, #0]
 8006e3e:	4b8f      	ldr	r3, [pc, #572]	@ (800707c <UART_SetConfig+0x2cc>)
 8006e40:	429a      	cmp	r2, r3
 8006e42:	d005      	beq.n	8006e50 <UART_SetConfig+0xa0>
 8006e44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e48:	681a      	ldr	r2, [r3, #0]
 8006e4a:	4b8d      	ldr	r3, [pc, #564]	@ (8007080 <UART_SetConfig+0x2d0>)
 8006e4c:	429a      	cmp	r2, r3
 8006e4e:	d104      	bne.n	8006e5a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006e50:	f7fe fd68 	bl	8005924 <HAL_RCC_GetPCLK2Freq>
 8006e54:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006e58:	e003      	b.n	8006e62 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006e5a:	f7fe fd4f 	bl	80058fc <HAL_RCC_GetPCLK1Freq>
 8006e5e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006e62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e66:	69db      	ldr	r3, [r3, #28]
 8006e68:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006e6c:	f040 810c 	bne.w	8007088 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006e70:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006e74:	2200      	movs	r2, #0
 8006e76:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006e7a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006e7e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006e82:	4622      	mov	r2, r4
 8006e84:	462b      	mov	r3, r5
 8006e86:	1891      	adds	r1, r2, r2
 8006e88:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006e8a:	415b      	adcs	r3, r3
 8006e8c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006e8e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006e92:	4621      	mov	r1, r4
 8006e94:	eb12 0801 	adds.w	r8, r2, r1
 8006e98:	4629      	mov	r1, r5
 8006e9a:	eb43 0901 	adc.w	r9, r3, r1
 8006e9e:	f04f 0200 	mov.w	r2, #0
 8006ea2:	f04f 0300 	mov.w	r3, #0
 8006ea6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006eaa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006eae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006eb2:	4690      	mov	r8, r2
 8006eb4:	4699      	mov	r9, r3
 8006eb6:	4623      	mov	r3, r4
 8006eb8:	eb18 0303 	adds.w	r3, r8, r3
 8006ebc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006ec0:	462b      	mov	r3, r5
 8006ec2:	eb49 0303 	adc.w	r3, r9, r3
 8006ec6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006eca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ece:	685b      	ldr	r3, [r3, #4]
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006ed6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006eda:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006ede:	460b      	mov	r3, r1
 8006ee0:	18db      	adds	r3, r3, r3
 8006ee2:	653b      	str	r3, [r7, #80]	@ 0x50
 8006ee4:	4613      	mov	r3, r2
 8006ee6:	eb42 0303 	adc.w	r3, r2, r3
 8006eea:	657b      	str	r3, [r7, #84]	@ 0x54
 8006eec:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006ef0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006ef4:	f7f9 f96c 	bl	80001d0 <__aeabi_uldivmod>
 8006ef8:	4602      	mov	r2, r0
 8006efa:	460b      	mov	r3, r1
 8006efc:	4b61      	ldr	r3, [pc, #388]	@ (8007084 <UART_SetConfig+0x2d4>)
 8006efe:	fba3 2302 	umull	r2, r3, r3, r2
 8006f02:	095b      	lsrs	r3, r3, #5
 8006f04:	011c      	lsls	r4, r3, #4
 8006f06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006f10:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006f14:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006f18:	4642      	mov	r2, r8
 8006f1a:	464b      	mov	r3, r9
 8006f1c:	1891      	adds	r1, r2, r2
 8006f1e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006f20:	415b      	adcs	r3, r3
 8006f22:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006f24:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006f28:	4641      	mov	r1, r8
 8006f2a:	eb12 0a01 	adds.w	sl, r2, r1
 8006f2e:	4649      	mov	r1, r9
 8006f30:	eb43 0b01 	adc.w	fp, r3, r1
 8006f34:	f04f 0200 	mov.w	r2, #0
 8006f38:	f04f 0300 	mov.w	r3, #0
 8006f3c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006f40:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006f44:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006f48:	4692      	mov	sl, r2
 8006f4a:	469b      	mov	fp, r3
 8006f4c:	4643      	mov	r3, r8
 8006f4e:	eb1a 0303 	adds.w	r3, sl, r3
 8006f52:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006f56:	464b      	mov	r3, r9
 8006f58:	eb4b 0303 	adc.w	r3, fp, r3
 8006f5c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006f60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f64:	685b      	ldr	r3, [r3, #4]
 8006f66:	2200      	movs	r2, #0
 8006f68:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006f6c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006f70:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006f74:	460b      	mov	r3, r1
 8006f76:	18db      	adds	r3, r3, r3
 8006f78:	643b      	str	r3, [r7, #64]	@ 0x40
 8006f7a:	4613      	mov	r3, r2
 8006f7c:	eb42 0303 	adc.w	r3, r2, r3
 8006f80:	647b      	str	r3, [r7, #68]	@ 0x44
 8006f82:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006f86:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006f8a:	f7f9 f921 	bl	80001d0 <__aeabi_uldivmod>
 8006f8e:	4602      	mov	r2, r0
 8006f90:	460b      	mov	r3, r1
 8006f92:	4611      	mov	r1, r2
 8006f94:	4b3b      	ldr	r3, [pc, #236]	@ (8007084 <UART_SetConfig+0x2d4>)
 8006f96:	fba3 2301 	umull	r2, r3, r3, r1
 8006f9a:	095b      	lsrs	r3, r3, #5
 8006f9c:	2264      	movs	r2, #100	@ 0x64
 8006f9e:	fb02 f303 	mul.w	r3, r2, r3
 8006fa2:	1acb      	subs	r3, r1, r3
 8006fa4:	00db      	lsls	r3, r3, #3
 8006fa6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006faa:	4b36      	ldr	r3, [pc, #216]	@ (8007084 <UART_SetConfig+0x2d4>)
 8006fac:	fba3 2302 	umull	r2, r3, r3, r2
 8006fb0:	095b      	lsrs	r3, r3, #5
 8006fb2:	005b      	lsls	r3, r3, #1
 8006fb4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006fb8:	441c      	add	r4, r3
 8006fba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006fc4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006fc8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006fcc:	4642      	mov	r2, r8
 8006fce:	464b      	mov	r3, r9
 8006fd0:	1891      	adds	r1, r2, r2
 8006fd2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006fd4:	415b      	adcs	r3, r3
 8006fd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006fd8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006fdc:	4641      	mov	r1, r8
 8006fde:	1851      	adds	r1, r2, r1
 8006fe0:	6339      	str	r1, [r7, #48]	@ 0x30
 8006fe2:	4649      	mov	r1, r9
 8006fe4:	414b      	adcs	r3, r1
 8006fe6:	637b      	str	r3, [r7, #52]	@ 0x34
 8006fe8:	f04f 0200 	mov.w	r2, #0
 8006fec:	f04f 0300 	mov.w	r3, #0
 8006ff0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006ff4:	4659      	mov	r1, fp
 8006ff6:	00cb      	lsls	r3, r1, #3
 8006ff8:	4651      	mov	r1, sl
 8006ffa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006ffe:	4651      	mov	r1, sl
 8007000:	00ca      	lsls	r2, r1, #3
 8007002:	4610      	mov	r0, r2
 8007004:	4619      	mov	r1, r3
 8007006:	4603      	mov	r3, r0
 8007008:	4642      	mov	r2, r8
 800700a:	189b      	adds	r3, r3, r2
 800700c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007010:	464b      	mov	r3, r9
 8007012:	460a      	mov	r2, r1
 8007014:	eb42 0303 	adc.w	r3, r2, r3
 8007018:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800701c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007020:	685b      	ldr	r3, [r3, #4]
 8007022:	2200      	movs	r2, #0
 8007024:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007028:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800702c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007030:	460b      	mov	r3, r1
 8007032:	18db      	adds	r3, r3, r3
 8007034:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007036:	4613      	mov	r3, r2
 8007038:	eb42 0303 	adc.w	r3, r2, r3
 800703c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800703e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007042:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8007046:	f7f9 f8c3 	bl	80001d0 <__aeabi_uldivmod>
 800704a:	4602      	mov	r2, r0
 800704c:	460b      	mov	r3, r1
 800704e:	4b0d      	ldr	r3, [pc, #52]	@ (8007084 <UART_SetConfig+0x2d4>)
 8007050:	fba3 1302 	umull	r1, r3, r3, r2
 8007054:	095b      	lsrs	r3, r3, #5
 8007056:	2164      	movs	r1, #100	@ 0x64
 8007058:	fb01 f303 	mul.w	r3, r1, r3
 800705c:	1ad3      	subs	r3, r2, r3
 800705e:	00db      	lsls	r3, r3, #3
 8007060:	3332      	adds	r3, #50	@ 0x32
 8007062:	4a08      	ldr	r2, [pc, #32]	@ (8007084 <UART_SetConfig+0x2d4>)
 8007064:	fba2 2303 	umull	r2, r3, r2, r3
 8007068:	095b      	lsrs	r3, r3, #5
 800706a:	f003 0207 	and.w	r2, r3, #7
 800706e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	4422      	add	r2, r4
 8007076:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007078:	e106      	b.n	8007288 <UART_SetConfig+0x4d8>
 800707a:	bf00      	nop
 800707c:	40011000 	.word	0x40011000
 8007080:	40011400 	.word	0x40011400
 8007084:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007088:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800708c:	2200      	movs	r2, #0
 800708e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007092:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007096:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800709a:	4642      	mov	r2, r8
 800709c:	464b      	mov	r3, r9
 800709e:	1891      	adds	r1, r2, r2
 80070a0:	6239      	str	r1, [r7, #32]
 80070a2:	415b      	adcs	r3, r3
 80070a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80070a6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80070aa:	4641      	mov	r1, r8
 80070ac:	1854      	adds	r4, r2, r1
 80070ae:	4649      	mov	r1, r9
 80070b0:	eb43 0501 	adc.w	r5, r3, r1
 80070b4:	f04f 0200 	mov.w	r2, #0
 80070b8:	f04f 0300 	mov.w	r3, #0
 80070bc:	00eb      	lsls	r3, r5, #3
 80070be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80070c2:	00e2      	lsls	r2, r4, #3
 80070c4:	4614      	mov	r4, r2
 80070c6:	461d      	mov	r5, r3
 80070c8:	4643      	mov	r3, r8
 80070ca:	18e3      	adds	r3, r4, r3
 80070cc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80070d0:	464b      	mov	r3, r9
 80070d2:	eb45 0303 	adc.w	r3, r5, r3
 80070d6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80070da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80070de:	685b      	ldr	r3, [r3, #4]
 80070e0:	2200      	movs	r2, #0
 80070e2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80070e6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80070ea:	f04f 0200 	mov.w	r2, #0
 80070ee:	f04f 0300 	mov.w	r3, #0
 80070f2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80070f6:	4629      	mov	r1, r5
 80070f8:	008b      	lsls	r3, r1, #2
 80070fa:	4621      	mov	r1, r4
 80070fc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007100:	4621      	mov	r1, r4
 8007102:	008a      	lsls	r2, r1, #2
 8007104:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007108:	f7f9 f862 	bl	80001d0 <__aeabi_uldivmod>
 800710c:	4602      	mov	r2, r0
 800710e:	460b      	mov	r3, r1
 8007110:	4b60      	ldr	r3, [pc, #384]	@ (8007294 <UART_SetConfig+0x4e4>)
 8007112:	fba3 2302 	umull	r2, r3, r3, r2
 8007116:	095b      	lsrs	r3, r3, #5
 8007118:	011c      	lsls	r4, r3, #4
 800711a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800711e:	2200      	movs	r2, #0
 8007120:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007124:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007128:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800712c:	4642      	mov	r2, r8
 800712e:	464b      	mov	r3, r9
 8007130:	1891      	adds	r1, r2, r2
 8007132:	61b9      	str	r1, [r7, #24]
 8007134:	415b      	adcs	r3, r3
 8007136:	61fb      	str	r3, [r7, #28]
 8007138:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800713c:	4641      	mov	r1, r8
 800713e:	1851      	adds	r1, r2, r1
 8007140:	6139      	str	r1, [r7, #16]
 8007142:	4649      	mov	r1, r9
 8007144:	414b      	adcs	r3, r1
 8007146:	617b      	str	r3, [r7, #20]
 8007148:	f04f 0200 	mov.w	r2, #0
 800714c:	f04f 0300 	mov.w	r3, #0
 8007150:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007154:	4659      	mov	r1, fp
 8007156:	00cb      	lsls	r3, r1, #3
 8007158:	4651      	mov	r1, sl
 800715a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800715e:	4651      	mov	r1, sl
 8007160:	00ca      	lsls	r2, r1, #3
 8007162:	4610      	mov	r0, r2
 8007164:	4619      	mov	r1, r3
 8007166:	4603      	mov	r3, r0
 8007168:	4642      	mov	r2, r8
 800716a:	189b      	adds	r3, r3, r2
 800716c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007170:	464b      	mov	r3, r9
 8007172:	460a      	mov	r2, r1
 8007174:	eb42 0303 	adc.w	r3, r2, r3
 8007178:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800717c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007180:	685b      	ldr	r3, [r3, #4]
 8007182:	2200      	movs	r2, #0
 8007184:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007186:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007188:	f04f 0200 	mov.w	r2, #0
 800718c:	f04f 0300 	mov.w	r3, #0
 8007190:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007194:	4649      	mov	r1, r9
 8007196:	008b      	lsls	r3, r1, #2
 8007198:	4641      	mov	r1, r8
 800719a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800719e:	4641      	mov	r1, r8
 80071a0:	008a      	lsls	r2, r1, #2
 80071a2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80071a6:	f7f9 f813 	bl	80001d0 <__aeabi_uldivmod>
 80071aa:	4602      	mov	r2, r0
 80071ac:	460b      	mov	r3, r1
 80071ae:	4611      	mov	r1, r2
 80071b0:	4b38      	ldr	r3, [pc, #224]	@ (8007294 <UART_SetConfig+0x4e4>)
 80071b2:	fba3 2301 	umull	r2, r3, r3, r1
 80071b6:	095b      	lsrs	r3, r3, #5
 80071b8:	2264      	movs	r2, #100	@ 0x64
 80071ba:	fb02 f303 	mul.w	r3, r2, r3
 80071be:	1acb      	subs	r3, r1, r3
 80071c0:	011b      	lsls	r3, r3, #4
 80071c2:	3332      	adds	r3, #50	@ 0x32
 80071c4:	4a33      	ldr	r2, [pc, #204]	@ (8007294 <UART_SetConfig+0x4e4>)
 80071c6:	fba2 2303 	umull	r2, r3, r2, r3
 80071ca:	095b      	lsrs	r3, r3, #5
 80071cc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80071d0:	441c      	add	r4, r3
 80071d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80071d6:	2200      	movs	r2, #0
 80071d8:	673b      	str	r3, [r7, #112]	@ 0x70
 80071da:	677a      	str	r2, [r7, #116]	@ 0x74
 80071dc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80071e0:	4642      	mov	r2, r8
 80071e2:	464b      	mov	r3, r9
 80071e4:	1891      	adds	r1, r2, r2
 80071e6:	60b9      	str	r1, [r7, #8]
 80071e8:	415b      	adcs	r3, r3
 80071ea:	60fb      	str	r3, [r7, #12]
 80071ec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80071f0:	4641      	mov	r1, r8
 80071f2:	1851      	adds	r1, r2, r1
 80071f4:	6039      	str	r1, [r7, #0]
 80071f6:	4649      	mov	r1, r9
 80071f8:	414b      	adcs	r3, r1
 80071fa:	607b      	str	r3, [r7, #4]
 80071fc:	f04f 0200 	mov.w	r2, #0
 8007200:	f04f 0300 	mov.w	r3, #0
 8007204:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007208:	4659      	mov	r1, fp
 800720a:	00cb      	lsls	r3, r1, #3
 800720c:	4651      	mov	r1, sl
 800720e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007212:	4651      	mov	r1, sl
 8007214:	00ca      	lsls	r2, r1, #3
 8007216:	4610      	mov	r0, r2
 8007218:	4619      	mov	r1, r3
 800721a:	4603      	mov	r3, r0
 800721c:	4642      	mov	r2, r8
 800721e:	189b      	adds	r3, r3, r2
 8007220:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007222:	464b      	mov	r3, r9
 8007224:	460a      	mov	r2, r1
 8007226:	eb42 0303 	adc.w	r3, r2, r3
 800722a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800722c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007230:	685b      	ldr	r3, [r3, #4]
 8007232:	2200      	movs	r2, #0
 8007234:	663b      	str	r3, [r7, #96]	@ 0x60
 8007236:	667a      	str	r2, [r7, #100]	@ 0x64
 8007238:	f04f 0200 	mov.w	r2, #0
 800723c:	f04f 0300 	mov.w	r3, #0
 8007240:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007244:	4649      	mov	r1, r9
 8007246:	008b      	lsls	r3, r1, #2
 8007248:	4641      	mov	r1, r8
 800724a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800724e:	4641      	mov	r1, r8
 8007250:	008a      	lsls	r2, r1, #2
 8007252:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007256:	f7f8 ffbb 	bl	80001d0 <__aeabi_uldivmod>
 800725a:	4602      	mov	r2, r0
 800725c:	460b      	mov	r3, r1
 800725e:	4b0d      	ldr	r3, [pc, #52]	@ (8007294 <UART_SetConfig+0x4e4>)
 8007260:	fba3 1302 	umull	r1, r3, r3, r2
 8007264:	095b      	lsrs	r3, r3, #5
 8007266:	2164      	movs	r1, #100	@ 0x64
 8007268:	fb01 f303 	mul.w	r3, r1, r3
 800726c:	1ad3      	subs	r3, r2, r3
 800726e:	011b      	lsls	r3, r3, #4
 8007270:	3332      	adds	r3, #50	@ 0x32
 8007272:	4a08      	ldr	r2, [pc, #32]	@ (8007294 <UART_SetConfig+0x4e4>)
 8007274:	fba2 2303 	umull	r2, r3, r2, r3
 8007278:	095b      	lsrs	r3, r3, #5
 800727a:	f003 020f 	and.w	r2, r3, #15
 800727e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	4422      	add	r2, r4
 8007286:	609a      	str	r2, [r3, #8]
}
 8007288:	bf00      	nop
 800728a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800728e:	46bd      	mov	sp, r7
 8007290:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007294:	51eb851f 	.word	0x51eb851f

08007298 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007298:	b084      	sub	sp, #16
 800729a:	b580      	push	{r7, lr}
 800729c:	b084      	sub	sp, #16
 800729e:	af00      	add	r7, sp, #0
 80072a0:	6078      	str	r0, [r7, #4]
 80072a2:	f107 001c 	add.w	r0, r7, #28
 80072a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80072aa:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80072ae:	2b01      	cmp	r3, #1
 80072b0:	d123      	bne.n	80072fa <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072b6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	68db      	ldr	r3, [r3, #12]
 80072c2:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80072c6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80072ca:	687a      	ldr	r2, [r7, #4]
 80072cc:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	68db      	ldr	r3, [r3, #12]
 80072d2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80072da:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80072de:	2b01      	cmp	r3, #1
 80072e0:	d105      	bne.n	80072ee <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	68db      	ldr	r3, [r3, #12]
 80072e6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80072ee:	6878      	ldr	r0, [r7, #4]
 80072f0:	f001 fae2 	bl	80088b8 <USB_CoreReset>
 80072f4:	4603      	mov	r3, r0
 80072f6:	73fb      	strb	r3, [r7, #15]
 80072f8:	e01b      	b.n	8007332 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	68db      	ldr	r3, [r3, #12]
 80072fe:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007306:	6878      	ldr	r0, [r7, #4]
 8007308:	f001 fad6 	bl	80088b8 <USB_CoreReset>
 800730c:	4603      	mov	r3, r0
 800730e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007310:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007314:	2b00      	cmp	r3, #0
 8007316:	d106      	bne.n	8007326 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800731c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	639a      	str	r2, [r3, #56]	@ 0x38
 8007324:	e005      	b.n	8007332 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800732a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007332:	7fbb      	ldrb	r3, [r7, #30]
 8007334:	2b01      	cmp	r3, #1
 8007336:	d10b      	bne.n	8007350 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	689b      	ldr	r3, [r3, #8]
 800733c:	f043 0206 	orr.w	r2, r3, #6
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	689b      	ldr	r3, [r3, #8]
 8007348:	f043 0220 	orr.w	r2, r3, #32
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007350:	7bfb      	ldrb	r3, [r7, #15]
}
 8007352:	4618      	mov	r0, r3
 8007354:	3710      	adds	r7, #16
 8007356:	46bd      	mov	sp, r7
 8007358:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800735c:	b004      	add	sp, #16
 800735e:	4770      	bx	lr

08007360 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8007360:	b480      	push	{r7}
 8007362:	b087      	sub	sp, #28
 8007364:	af00      	add	r7, sp, #0
 8007366:	60f8      	str	r0, [r7, #12]
 8007368:	60b9      	str	r1, [r7, #8]
 800736a:	4613      	mov	r3, r2
 800736c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800736e:	79fb      	ldrb	r3, [r7, #7]
 8007370:	2b02      	cmp	r3, #2
 8007372:	d165      	bne.n	8007440 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007374:	68bb      	ldr	r3, [r7, #8]
 8007376:	4a41      	ldr	r2, [pc, #260]	@ (800747c <USB_SetTurnaroundTime+0x11c>)
 8007378:	4293      	cmp	r3, r2
 800737a:	d906      	bls.n	800738a <USB_SetTurnaroundTime+0x2a>
 800737c:	68bb      	ldr	r3, [r7, #8]
 800737e:	4a40      	ldr	r2, [pc, #256]	@ (8007480 <USB_SetTurnaroundTime+0x120>)
 8007380:	4293      	cmp	r3, r2
 8007382:	d202      	bcs.n	800738a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8007384:	230f      	movs	r3, #15
 8007386:	617b      	str	r3, [r7, #20]
 8007388:	e062      	b.n	8007450 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800738a:	68bb      	ldr	r3, [r7, #8]
 800738c:	4a3c      	ldr	r2, [pc, #240]	@ (8007480 <USB_SetTurnaroundTime+0x120>)
 800738e:	4293      	cmp	r3, r2
 8007390:	d306      	bcc.n	80073a0 <USB_SetTurnaroundTime+0x40>
 8007392:	68bb      	ldr	r3, [r7, #8]
 8007394:	4a3b      	ldr	r2, [pc, #236]	@ (8007484 <USB_SetTurnaroundTime+0x124>)
 8007396:	4293      	cmp	r3, r2
 8007398:	d202      	bcs.n	80073a0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800739a:	230e      	movs	r3, #14
 800739c:	617b      	str	r3, [r7, #20]
 800739e:	e057      	b.n	8007450 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80073a0:	68bb      	ldr	r3, [r7, #8]
 80073a2:	4a38      	ldr	r2, [pc, #224]	@ (8007484 <USB_SetTurnaroundTime+0x124>)
 80073a4:	4293      	cmp	r3, r2
 80073a6:	d306      	bcc.n	80073b6 <USB_SetTurnaroundTime+0x56>
 80073a8:	68bb      	ldr	r3, [r7, #8]
 80073aa:	4a37      	ldr	r2, [pc, #220]	@ (8007488 <USB_SetTurnaroundTime+0x128>)
 80073ac:	4293      	cmp	r3, r2
 80073ae:	d202      	bcs.n	80073b6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80073b0:	230d      	movs	r3, #13
 80073b2:	617b      	str	r3, [r7, #20]
 80073b4:	e04c      	b.n	8007450 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80073b6:	68bb      	ldr	r3, [r7, #8]
 80073b8:	4a33      	ldr	r2, [pc, #204]	@ (8007488 <USB_SetTurnaroundTime+0x128>)
 80073ba:	4293      	cmp	r3, r2
 80073bc:	d306      	bcc.n	80073cc <USB_SetTurnaroundTime+0x6c>
 80073be:	68bb      	ldr	r3, [r7, #8]
 80073c0:	4a32      	ldr	r2, [pc, #200]	@ (800748c <USB_SetTurnaroundTime+0x12c>)
 80073c2:	4293      	cmp	r3, r2
 80073c4:	d802      	bhi.n	80073cc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80073c6:	230c      	movs	r3, #12
 80073c8:	617b      	str	r3, [r7, #20]
 80073ca:	e041      	b.n	8007450 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80073cc:	68bb      	ldr	r3, [r7, #8]
 80073ce:	4a2f      	ldr	r2, [pc, #188]	@ (800748c <USB_SetTurnaroundTime+0x12c>)
 80073d0:	4293      	cmp	r3, r2
 80073d2:	d906      	bls.n	80073e2 <USB_SetTurnaroundTime+0x82>
 80073d4:	68bb      	ldr	r3, [r7, #8]
 80073d6:	4a2e      	ldr	r2, [pc, #184]	@ (8007490 <USB_SetTurnaroundTime+0x130>)
 80073d8:	4293      	cmp	r3, r2
 80073da:	d802      	bhi.n	80073e2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80073dc:	230b      	movs	r3, #11
 80073de:	617b      	str	r3, [r7, #20]
 80073e0:	e036      	b.n	8007450 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80073e2:	68bb      	ldr	r3, [r7, #8]
 80073e4:	4a2a      	ldr	r2, [pc, #168]	@ (8007490 <USB_SetTurnaroundTime+0x130>)
 80073e6:	4293      	cmp	r3, r2
 80073e8:	d906      	bls.n	80073f8 <USB_SetTurnaroundTime+0x98>
 80073ea:	68bb      	ldr	r3, [r7, #8]
 80073ec:	4a29      	ldr	r2, [pc, #164]	@ (8007494 <USB_SetTurnaroundTime+0x134>)
 80073ee:	4293      	cmp	r3, r2
 80073f0:	d802      	bhi.n	80073f8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80073f2:	230a      	movs	r3, #10
 80073f4:	617b      	str	r3, [r7, #20]
 80073f6:	e02b      	b.n	8007450 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80073f8:	68bb      	ldr	r3, [r7, #8]
 80073fa:	4a26      	ldr	r2, [pc, #152]	@ (8007494 <USB_SetTurnaroundTime+0x134>)
 80073fc:	4293      	cmp	r3, r2
 80073fe:	d906      	bls.n	800740e <USB_SetTurnaroundTime+0xae>
 8007400:	68bb      	ldr	r3, [r7, #8]
 8007402:	4a25      	ldr	r2, [pc, #148]	@ (8007498 <USB_SetTurnaroundTime+0x138>)
 8007404:	4293      	cmp	r3, r2
 8007406:	d202      	bcs.n	800740e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007408:	2309      	movs	r3, #9
 800740a:	617b      	str	r3, [r7, #20]
 800740c:	e020      	b.n	8007450 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800740e:	68bb      	ldr	r3, [r7, #8]
 8007410:	4a21      	ldr	r2, [pc, #132]	@ (8007498 <USB_SetTurnaroundTime+0x138>)
 8007412:	4293      	cmp	r3, r2
 8007414:	d306      	bcc.n	8007424 <USB_SetTurnaroundTime+0xc4>
 8007416:	68bb      	ldr	r3, [r7, #8]
 8007418:	4a20      	ldr	r2, [pc, #128]	@ (800749c <USB_SetTurnaroundTime+0x13c>)
 800741a:	4293      	cmp	r3, r2
 800741c:	d802      	bhi.n	8007424 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800741e:	2308      	movs	r3, #8
 8007420:	617b      	str	r3, [r7, #20]
 8007422:	e015      	b.n	8007450 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007424:	68bb      	ldr	r3, [r7, #8]
 8007426:	4a1d      	ldr	r2, [pc, #116]	@ (800749c <USB_SetTurnaroundTime+0x13c>)
 8007428:	4293      	cmp	r3, r2
 800742a:	d906      	bls.n	800743a <USB_SetTurnaroundTime+0xda>
 800742c:	68bb      	ldr	r3, [r7, #8]
 800742e:	4a1c      	ldr	r2, [pc, #112]	@ (80074a0 <USB_SetTurnaroundTime+0x140>)
 8007430:	4293      	cmp	r3, r2
 8007432:	d202      	bcs.n	800743a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007434:	2307      	movs	r3, #7
 8007436:	617b      	str	r3, [r7, #20]
 8007438:	e00a      	b.n	8007450 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800743a:	2306      	movs	r3, #6
 800743c:	617b      	str	r3, [r7, #20]
 800743e:	e007      	b.n	8007450 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8007440:	79fb      	ldrb	r3, [r7, #7]
 8007442:	2b00      	cmp	r3, #0
 8007444:	d102      	bne.n	800744c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8007446:	2309      	movs	r3, #9
 8007448:	617b      	str	r3, [r7, #20]
 800744a:	e001      	b.n	8007450 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800744c:	2309      	movs	r3, #9
 800744e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	68db      	ldr	r3, [r3, #12]
 8007454:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	68da      	ldr	r2, [r3, #12]
 8007460:	697b      	ldr	r3, [r7, #20]
 8007462:	029b      	lsls	r3, r3, #10
 8007464:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8007468:	431a      	orrs	r2, r3
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800746e:	2300      	movs	r3, #0
}
 8007470:	4618      	mov	r0, r3
 8007472:	371c      	adds	r7, #28
 8007474:	46bd      	mov	sp, r7
 8007476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747a:	4770      	bx	lr
 800747c:	00d8acbf 	.word	0x00d8acbf
 8007480:	00e4e1c0 	.word	0x00e4e1c0
 8007484:	00f42400 	.word	0x00f42400
 8007488:	01067380 	.word	0x01067380
 800748c:	011a499f 	.word	0x011a499f
 8007490:	01312cff 	.word	0x01312cff
 8007494:	014ca43f 	.word	0x014ca43f
 8007498:	016e3600 	.word	0x016e3600
 800749c:	01a6ab1f 	.word	0x01a6ab1f
 80074a0:	01e84800 	.word	0x01e84800

080074a4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80074a4:	b480      	push	{r7}
 80074a6:	b083      	sub	sp, #12
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	689b      	ldr	r3, [r3, #8]
 80074b0:	f043 0201 	orr.w	r2, r3, #1
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80074b8:	2300      	movs	r3, #0
}
 80074ba:	4618      	mov	r0, r3
 80074bc:	370c      	adds	r7, #12
 80074be:	46bd      	mov	sp, r7
 80074c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c4:	4770      	bx	lr

080074c6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80074c6:	b480      	push	{r7}
 80074c8:	b083      	sub	sp, #12
 80074ca:	af00      	add	r7, sp, #0
 80074cc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	689b      	ldr	r3, [r3, #8]
 80074d2:	f023 0201 	bic.w	r2, r3, #1
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80074da:	2300      	movs	r3, #0
}
 80074dc:	4618      	mov	r0, r3
 80074de:	370c      	adds	r7, #12
 80074e0:	46bd      	mov	sp, r7
 80074e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e6:	4770      	bx	lr

080074e8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b084      	sub	sp, #16
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
 80074f0:	460b      	mov	r3, r1
 80074f2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80074f4:	2300      	movs	r3, #0
 80074f6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	68db      	ldr	r3, [r3, #12]
 80074fc:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007504:	78fb      	ldrb	r3, [r7, #3]
 8007506:	2b01      	cmp	r3, #1
 8007508:	d115      	bne.n	8007536 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	68db      	ldr	r3, [r3, #12]
 800750e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007516:	200a      	movs	r0, #10
 8007518:	f7fa fce6 	bl	8001ee8 <HAL_Delay>
      ms += 10U;
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	330a      	adds	r3, #10
 8007520:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007522:	6878      	ldr	r0, [r7, #4]
 8007524:	f001 f939 	bl	800879a <USB_GetMode>
 8007528:	4603      	mov	r3, r0
 800752a:	2b01      	cmp	r3, #1
 800752c:	d01e      	beq.n	800756c <USB_SetCurrentMode+0x84>
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	2bc7      	cmp	r3, #199	@ 0xc7
 8007532:	d9f0      	bls.n	8007516 <USB_SetCurrentMode+0x2e>
 8007534:	e01a      	b.n	800756c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007536:	78fb      	ldrb	r3, [r7, #3]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d115      	bne.n	8007568 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	68db      	ldr	r3, [r3, #12]
 8007540:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007548:	200a      	movs	r0, #10
 800754a:	f7fa fccd 	bl	8001ee8 <HAL_Delay>
      ms += 10U;
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	330a      	adds	r3, #10
 8007552:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007554:	6878      	ldr	r0, [r7, #4]
 8007556:	f001 f920 	bl	800879a <USB_GetMode>
 800755a:	4603      	mov	r3, r0
 800755c:	2b00      	cmp	r3, #0
 800755e:	d005      	beq.n	800756c <USB_SetCurrentMode+0x84>
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	2bc7      	cmp	r3, #199	@ 0xc7
 8007564:	d9f0      	bls.n	8007548 <USB_SetCurrentMode+0x60>
 8007566:	e001      	b.n	800756c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007568:	2301      	movs	r3, #1
 800756a:	e005      	b.n	8007578 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	2bc8      	cmp	r3, #200	@ 0xc8
 8007570:	d101      	bne.n	8007576 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007572:	2301      	movs	r3, #1
 8007574:	e000      	b.n	8007578 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007576:	2300      	movs	r3, #0
}
 8007578:	4618      	mov	r0, r3
 800757a:	3710      	adds	r7, #16
 800757c:	46bd      	mov	sp, r7
 800757e:	bd80      	pop	{r7, pc}

08007580 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007580:	b084      	sub	sp, #16
 8007582:	b580      	push	{r7, lr}
 8007584:	b086      	sub	sp, #24
 8007586:	af00      	add	r7, sp, #0
 8007588:	6078      	str	r0, [r7, #4]
 800758a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800758e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007592:	2300      	movs	r3, #0
 8007594:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800759a:	2300      	movs	r3, #0
 800759c:	613b      	str	r3, [r7, #16]
 800759e:	e009      	b.n	80075b4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80075a0:	687a      	ldr	r2, [r7, #4]
 80075a2:	693b      	ldr	r3, [r7, #16]
 80075a4:	3340      	adds	r3, #64	@ 0x40
 80075a6:	009b      	lsls	r3, r3, #2
 80075a8:	4413      	add	r3, r2
 80075aa:	2200      	movs	r2, #0
 80075ac:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80075ae:	693b      	ldr	r3, [r7, #16]
 80075b0:	3301      	adds	r3, #1
 80075b2:	613b      	str	r3, [r7, #16]
 80075b4:	693b      	ldr	r3, [r7, #16]
 80075b6:	2b0e      	cmp	r3, #14
 80075b8:	d9f2      	bls.n	80075a0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80075ba:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d11c      	bne.n	80075fc <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80075c8:	685b      	ldr	r3, [r3, #4]
 80075ca:	68fa      	ldr	r2, [r7, #12]
 80075cc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80075d0:	f043 0302 	orr.w	r3, r3, #2
 80075d4:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075da:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075e6:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075f2:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	639a      	str	r2, [r3, #56]	@ 0x38
 80075fa:	e00b      	b.n	8007614 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007600:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800760c:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800761a:	461a      	mov	r2, r3
 800761c:	2300      	movs	r3, #0
 800761e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007620:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8007624:	2b01      	cmp	r3, #1
 8007626:	d10d      	bne.n	8007644 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007628:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800762c:	2b00      	cmp	r3, #0
 800762e:	d104      	bne.n	800763a <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007630:	2100      	movs	r1, #0
 8007632:	6878      	ldr	r0, [r7, #4]
 8007634:	f000 f968 	bl	8007908 <USB_SetDevSpeed>
 8007638:	e008      	b.n	800764c <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800763a:	2101      	movs	r1, #1
 800763c:	6878      	ldr	r0, [r7, #4]
 800763e:	f000 f963 	bl	8007908 <USB_SetDevSpeed>
 8007642:	e003      	b.n	800764c <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007644:	2103      	movs	r1, #3
 8007646:	6878      	ldr	r0, [r7, #4]
 8007648:	f000 f95e 	bl	8007908 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800764c:	2110      	movs	r1, #16
 800764e:	6878      	ldr	r0, [r7, #4]
 8007650:	f000 f8fa 	bl	8007848 <USB_FlushTxFifo>
 8007654:	4603      	mov	r3, r0
 8007656:	2b00      	cmp	r3, #0
 8007658:	d001      	beq.n	800765e <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800765a:	2301      	movs	r3, #1
 800765c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800765e:	6878      	ldr	r0, [r7, #4]
 8007660:	f000 f924 	bl	80078ac <USB_FlushRxFifo>
 8007664:	4603      	mov	r3, r0
 8007666:	2b00      	cmp	r3, #0
 8007668:	d001      	beq.n	800766e <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800766a:	2301      	movs	r3, #1
 800766c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007674:	461a      	mov	r2, r3
 8007676:	2300      	movs	r3, #0
 8007678:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007680:	461a      	mov	r2, r3
 8007682:	2300      	movs	r3, #0
 8007684:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800768c:	461a      	mov	r2, r3
 800768e:	2300      	movs	r3, #0
 8007690:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007692:	2300      	movs	r3, #0
 8007694:	613b      	str	r3, [r7, #16]
 8007696:	e043      	b.n	8007720 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007698:	693b      	ldr	r3, [r7, #16]
 800769a:	015a      	lsls	r2, r3, #5
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	4413      	add	r3, r2
 80076a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80076aa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80076ae:	d118      	bne.n	80076e2 <USB_DevInit+0x162>
    {
      if (i == 0U)
 80076b0:	693b      	ldr	r3, [r7, #16]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d10a      	bne.n	80076cc <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80076b6:	693b      	ldr	r3, [r7, #16]
 80076b8:	015a      	lsls	r2, r3, #5
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	4413      	add	r3, r2
 80076be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80076c2:	461a      	mov	r2, r3
 80076c4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80076c8:	6013      	str	r3, [r2, #0]
 80076ca:	e013      	b.n	80076f4 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80076cc:	693b      	ldr	r3, [r7, #16]
 80076ce:	015a      	lsls	r2, r3, #5
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	4413      	add	r3, r2
 80076d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80076d8:	461a      	mov	r2, r3
 80076da:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80076de:	6013      	str	r3, [r2, #0]
 80076e0:	e008      	b.n	80076f4 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80076e2:	693b      	ldr	r3, [r7, #16]
 80076e4:	015a      	lsls	r2, r3, #5
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	4413      	add	r3, r2
 80076ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80076ee:	461a      	mov	r2, r3
 80076f0:	2300      	movs	r3, #0
 80076f2:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80076f4:	693b      	ldr	r3, [r7, #16]
 80076f6:	015a      	lsls	r2, r3, #5
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	4413      	add	r3, r2
 80076fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007700:	461a      	mov	r2, r3
 8007702:	2300      	movs	r3, #0
 8007704:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007706:	693b      	ldr	r3, [r7, #16]
 8007708:	015a      	lsls	r2, r3, #5
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	4413      	add	r3, r2
 800770e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007712:	461a      	mov	r2, r3
 8007714:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007718:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800771a:	693b      	ldr	r3, [r7, #16]
 800771c:	3301      	adds	r3, #1
 800771e:	613b      	str	r3, [r7, #16]
 8007720:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007724:	461a      	mov	r2, r3
 8007726:	693b      	ldr	r3, [r7, #16]
 8007728:	4293      	cmp	r3, r2
 800772a:	d3b5      	bcc.n	8007698 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800772c:	2300      	movs	r3, #0
 800772e:	613b      	str	r3, [r7, #16]
 8007730:	e043      	b.n	80077ba <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007732:	693b      	ldr	r3, [r7, #16]
 8007734:	015a      	lsls	r2, r3, #5
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	4413      	add	r3, r2
 800773a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007744:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007748:	d118      	bne.n	800777c <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800774a:	693b      	ldr	r3, [r7, #16]
 800774c:	2b00      	cmp	r3, #0
 800774e:	d10a      	bne.n	8007766 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007750:	693b      	ldr	r3, [r7, #16]
 8007752:	015a      	lsls	r2, r3, #5
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	4413      	add	r3, r2
 8007758:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800775c:	461a      	mov	r2, r3
 800775e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007762:	6013      	str	r3, [r2, #0]
 8007764:	e013      	b.n	800778e <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007766:	693b      	ldr	r3, [r7, #16]
 8007768:	015a      	lsls	r2, r3, #5
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	4413      	add	r3, r2
 800776e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007772:	461a      	mov	r2, r3
 8007774:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007778:	6013      	str	r3, [r2, #0]
 800777a:	e008      	b.n	800778e <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800777c:	693b      	ldr	r3, [r7, #16]
 800777e:	015a      	lsls	r2, r3, #5
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	4413      	add	r3, r2
 8007784:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007788:	461a      	mov	r2, r3
 800778a:	2300      	movs	r3, #0
 800778c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800778e:	693b      	ldr	r3, [r7, #16]
 8007790:	015a      	lsls	r2, r3, #5
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	4413      	add	r3, r2
 8007796:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800779a:	461a      	mov	r2, r3
 800779c:	2300      	movs	r3, #0
 800779e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80077a0:	693b      	ldr	r3, [r7, #16]
 80077a2:	015a      	lsls	r2, r3, #5
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	4413      	add	r3, r2
 80077a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80077ac:	461a      	mov	r2, r3
 80077ae:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80077b2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80077b4:	693b      	ldr	r3, [r7, #16]
 80077b6:	3301      	adds	r3, #1
 80077b8:	613b      	str	r3, [r7, #16]
 80077ba:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80077be:	461a      	mov	r2, r3
 80077c0:	693b      	ldr	r3, [r7, #16]
 80077c2:	4293      	cmp	r3, r2
 80077c4:	d3b5      	bcc.n	8007732 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80077cc:	691b      	ldr	r3, [r3, #16]
 80077ce:	68fa      	ldr	r2, [r7, #12]
 80077d0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80077d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80077d8:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	2200      	movs	r2, #0
 80077de:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80077e6:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80077e8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d105      	bne.n	80077fc <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	699b      	ldr	r3, [r3, #24]
 80077f4:	f043 0210 	orr.w	r2, r3, #16
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	699a      	ldr	r2, [r3, #24]
 8007800:	4b10      	ldr	r3, [pc, #64]	@ (8007844 <USB_DevInit+0x2c4>)
 8007802:	4313      	orrs	r3, r2
 8007804:	687a      	ldr	r2, [r7, #4]
 8007806:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007808:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800780c:	2b00      	cmp	r3, #0
 800780e:	d005      	beq.n	800781c <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	699b      	ldr	r3, [r3, #24]
 8007814:	f043 0208 	orr.w	r2, r3, #8
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800781c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007820:	2b01      	cmp	r3, #1
 8007822:	d107      	bne.n	8007834 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	699b      	ldr	r3, [r3, #24]
 8007828:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800782c:	f043 0304 	orr.w	r3, r3, #4
 8007830:	687a      	ldr	r2, [r7, #4]
 8007832:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007834:	7dfb      	ldrb	r3, [r7, #23]
}
 8007836:	4618      	mov	r0, r3
 8007838:	3718      	adds	r7, #24
 800783a:	46bd      	mov	sp, r7
 800783c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007840:	b004      	add	sp, #16
 8007842:	4770      	bx	lr
 8007844:	803c3800 	.word	0x803c3800

08007848 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007848:	b480      	push	{r7}
 800784a:	b085      	sub	sp, #20
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]
 8007850:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007852:	2300      	movs	r3, #0
 8007854:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	3301      	adds	r3, #1
 800785a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007862:	d901      	bls.n	8007868 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007864:	2303      	movs	r3, #3
 8007866:	e01b      	b.n	80078a0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	691b      	ldr	r3, [r3, #16]
 800786c:	2b00      	cmp	r3, #0
 800786e:	daf2      	bge.n	8007856 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007870:	2300      	movs	r3, #0
 8007872:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007874:	683b      	ldr	r3, [r7, #0]
 8007876:	019b      	lsls	r3, r3, #6
 8007878:	f043 0220 	orr.w	r2, r3, #32
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	3301      	adds	r3, #1
 8007884:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800788c:	d901      	bls.n	8007892 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800788e:	2303      	movs	r3, #3
 8007890:	e006      	b.n	80078a0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	691b      	ldr	r3, [r3, #16]
 8007896:	f003 0320 	and.w	r3, r3, #32
 800789a:	2b20      	cmp	r3, #32
 800789c:	d0f0      	beq.n	8007880 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800789e:	2300      	movs	r3, #0
}
 80078a0:	4618      	mov	r0, r3
 80078a2:	3714      	adds	r7, #20
 80078a4:	46bd      	mov	sp, r7
 80078a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078aa:	4770      	bx	lr

080078ac <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80078ac:	b480      	push	{r7}
 80078ae:	b085      	sub	sp, #20
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80078b4:	2300      	movs	r3, #0
 80078b6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	3301      	adds	r3, #1
 80078bc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80078c4:	d901      	bls.n	80078ca <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80078c6:	2303      	movs	r3, #3
 80078c8:	e018      	b.n	80078fc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	691b      	ldr	r3, [r3, #16]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	daf2      	bge.n	80078b8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80078d2:	2300      	movs	r3, #0
 80078d4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	2210      	movs	r2, #16
 80078da:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	3301      	adds	r3, #1
 80078e0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80078e8:	d901      	bls.n	80078ee <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80078ea:	2303      	movs	r3, #3
 80078ec:	e006      	b.n	80078fc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	691b      	ldr	r3, [r3, #16]
 80078f2:	f003 0310 	and.w	r3, r3, #16
 80078f6:	2b10      	cmp	r3, #16
 80078f8:	d0f0      	beq.n	80078dc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80078fa:	2300      	movs	r3, #0
}
 80078fc:	4618      	mov	r0, r3
 80078fe:	3714      	adds	r7, #20
 8007900:	46bd      	mov	sp, r7
 8007902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007906:	4770      	bx	lr

08007908 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007908:	b480      	push	{r7}
 800790a:	b085      	sub	sp, #20
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
 8007910:	460b      	mov	r3, r1
 8007912:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800791e:	681a      	ldr	r2, [r3, #0]
 8007920:	78fb      	ldrb	r3, [r7, #3]
 8007922:	68f9      	ldr	r1, [r7, #12]
 8007924:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007928:	4313      	orrs	r3, r2
 800792a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800792c:	2300      	movs	r3, #0
}
 800792e:	4618      	mov	r0, r3
 8007930:	3714      	adds	r7, #20
 8007932:	46bd      	mov	sp, r7
 8007934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007938:	4770      	bx	lr

0800793a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800793a:	b480      	push	{r7}
 800793c:	b087      	sub	sp, #28
 800793e:	af00      	add	r7, sp, #0
 8007940:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8007946:	693b      	ldr	r3, [r7, #16]
 8007948:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800794c:	689b      	ldr	r3, [r3, #8]
 800794e:	f003 0306 	and.w	r3, r3, #6
 8007952:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	2b00      	cmp	r3, #0
 8007958:	d102      	bne.n	8007960 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800795a:	2300      	movs	r3, #0
 800795c:	75fb      	strb	r3, [r7, #23]
 800795e:	e00a      	b.n	8007976 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	2b02      	cmp	r3, #2
 8007964:	d002      	beq.n	800796c <USB_GetDevSpeed+0x32>
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	2b06      	cmp	r3, #6
 800796a:	d102      	bne.n	8007972 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800796c:	2302      	movs	r3, #2
 800796e:	75fb      	strb	r3, [r7, #23]
 8007970:	e001      	b.n	8007976 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8007972:	230f      	movs	r3, #15
 8007974:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8007976:	7dfb      	ldrb	r3, [r7, #23]
}
 8007978:	4618      	mov	r0, r3
 800797a:	371c      	adds	r7, #28
 800797c:	46bd      	mov	sp, r7
 800797e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007982:	4770      	bx	lr

08007984 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007984:	b480      	push	{r7}
 8007986:	b085      	sub	sp, #20
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
 800798c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007992:	683b      	ldr	r3, [r7, #0]
 8007994:	781b      	ldrb	r3, [r3, #0]
 8007996:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	785b      	ldrb	r3, [r3, #1]
 800799c:	2b01      	cmp	r3, #1
 800799e:	d13a      	bne.n	8007a16 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80079a6:	69da      	ldr	r2, [r3, #28]
 80079a8:	683b      	ldr	r3, [r7, #0]
 80079aa:	781b      	ldrb	r3, [r3, #0]
 80079ac:	f003 030f 	and.w	r3, r3, #15
 80079b0:	2101      	movs	r1, #1
 80079b2:	fa01 f303 	lsl.w	r3, r1, r3
 80079b6:	b29b      	uxth	r3, r3
 80079b8:	68f9      	ldr	r1, [r7, #12]
 80079ba:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80079be:	4313      	orrs	r3, r2
 80079c0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80079c2:	68bb      	ldr	r3, [r7, #8]
 80079c4:	015a      	lsls	r2, r3, #5
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	4413      	add	r3, r2
 80079ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d155      	bne.n	8007a84 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80079d8:	68bb      	ldr	r3, [r7, #8]
 80079da:	015a      	lsls	r2, r3, #5
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	4413      	add	r3, r2
 80079e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80079e4:	681a      	ldr	r2, [r3, #0]
 80079e6:	683b      	ldr	r3, [r7, #0]
 80079e8:	689b      	ldr	r3, [r3, #8]
 80079ea:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80079ee:	683b      	ldr	r3, [r7, #0]
 80079f0:	791b      	ldrb	r3, [r3, #4]
 80079f2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80079f4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80079f6:	68bb      	ldr	r3, [r7, #8]
 80079f8:	059b      	lsls	r3, r3, #22
 80079fa:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80079fc:	4313      	orrs	r3, r2
 80079fe:	68ba      	ldr	r2, [r7, #8]
 8007a00:	0151      	lsls	r1, r2, #5
 8007a02:	68fa      	ldr	r2, [r7, #12]
 8007a04:	440a      	add	r2, r1
 8007a06:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007a0a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007a0e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007a12:	6013      	str	r3, [r2, #0]
 8007a14:	e036      	b.n	8007a84 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007a1c:	69da      	ldr	r2, [r3, #28]
 8007a1e:	683b      	ldr	r3, [r7, #0]
 8007a20:	781b      	ldrb	r3, [r3, #0]
 8007a22:	f003 030f 	and.w	r3, r3, #15
 8007a26:	2101      	movs	r1, #1
 8007a28:	fa01 f303 	lsl.w	r3, r1, r3
 8007a2c:	041b      	lsls	r3, r3, #16
 8007a2e:	68f9      	ldr	r1, [r7, #12]
 8007a30:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007a34:	4313      	orrs	r3, r2
 8007a36:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007a38:	68bb      	ldr	r3, [r7, #8]
 8007a3a:	015a      	lsls	r2, r3, #5
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	4413      	add	r3, r2
 8007a40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d11a      	bne.n	8007a84 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007a4e:	68bb      	ldr	r3, [r7, #8]
 8007a50:	015a      	lsls	r2, r3, #5
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	4413      	add	r3, r2
 8007a56:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a5a:	681a      	ldr	r2, [r3, #0]
 8007a5c:	683b      	ldr	r3, [r7, #0]
 8007a5e:	689b      	ldr	r3, [r3, #8]
 8007a60:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007a64:	683b      	ldr	r3, [r7, #0]
 8007a66:	791b      	ldrb	r3, [r3, #4]
 8007a68:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007a6a:	430b      	orrs	r3, r1
 8007a6c:	4313      	orrs	r3, r2
 8007a6e:	68ba      	ldr	r2, [r7, #8]
 8007a70:	0151      	lsls	r1, r2, #5
 8007a72:	68fa      	ldr	r2, [r7, #12]
 8007a74:	440a      	add	r2, r1
 8007a76:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007a7a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007a7e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007a82:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007a84:	2300      	movs	r3, #0
}
 8007a86:	4618      	mov	r0, r3
 8007a88:	3714      	adds	r7, #20
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a90:	4770      	bx	lr
	...

08007a94 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007a94:	b480      	push	{r7}
 8007a96:	b085      	sub	sp, #20
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
 8007a9c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007aa2:	683b      	ldr	r3, [r7, #0]
 8007aa4:	781b      	ldrb	r3, [r3, #0]
 8007aa6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007aa8:	683b      	ldr	r3, [r7, #0]
 8007aaa:	785b      	ldrb	r3, [r3, #1]
 8007aac:	2b01      	cmp	r3, #1
 8007aae:	d161      	bne.n	8007b74 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007ab0:	68bb      	ldr	r3, [r7, #8]
 8007ab2:	015a      	lsls	r2, r3, #5
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	4413      	add	r3, r2
 8007ab8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007ac2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007ac6:	d11f      	bne.n	8007b08 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007ac8:	68bb      	ldr	r3, [r7, #8]
 8007aca:	015a      	lsls	r2, r3, #5
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	4413      	add	r3, r2
 8007ad0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	68ba      	ldr	r2, [r7, #8]
 8007ad8:	0151      	lsls	r1, r2, #5
 8007ada:	68fa      	ldr	r2, [r7, #12]
 8007adc:	440a      	add	r2, r1
 8007ade:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007ae2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007ae6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007ae8:	68bb      	ldr	r3, [r7, #8]
 8007aea:	015a      	lsls	r2, r3, #5
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	4413      	add	r3, r2
 8007af0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	68ba      	ldr	r2, [r7, #8]
 8007af8:	0151      	lsls	r1, r2, #5
 8007afa:	68fa      	ldr	r2, [r7, #12]
 8007afc:	440a      	add	r2, r1
 8007afe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007b02:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007b06:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007b0e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007b10:	683b      	ldr	r3, [r7, #0]
 8007b12:	781b      	ldrb	r3, [r3, #0]
 8007b14:	f003 030f 	and.w	r3, r3, #15
 8007b18:	2101      	movs	r1, #1
 8007b1a:	fa01 f303 	lsl.w	r3, r1, r3
 8007b1e:	b29b      	uxth	r3, r3
 8007b20:	43db      	mvns	r3, r3
 8007b22:	68f9      	ldr	r1, [r7, #12]
 8007b24:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007b28:	4013      	ands	r3, r2
 8007b2a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007b32:	69da      	ldr	r2, [r3, #28]
 8007b34:	683b      	ldr	r3, [r7, #0]
 8007b36:	781b      	ldrb	r3, [r3, #0]
 8007b38:	f003 030f 	and.w	r3, r3, #15
 8007b3c:	2101      	movs	r1, #1
 8007b3e:	fa01 f303 	lsl.w	r3, r1, r3
 8007b42:	b29b      	uxth	r3, r3
 8007b44:	43db      	mvns	r3, r3
 8007b46:	68f9      	ldr	r1, [r7, #12]
 8007b48:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007b4c:	4013      	ands	r3, r2
 8007b4e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007b50:	68bb      	ldr	r3, [r7, #8]
 8007b52:	015a      	lsls	r2, r3, #5
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	4413      	add	r3, r2
 8007b58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b5c:	681a      	ldr	r2, [r3, #0]
 8007b5e:	68bb      	ldr	r3, [r7, #8]
 8007b60:	0159      	lsls	r1, r3, #5
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	440b      	add	r3, r1
 8007b66:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b6a:	4619      	mov	r1, r3
 8007b6c:	4b35      	ldr	r3, [pc, #212]	@ (8007c44 <USB_DeactivateEndpoint+0x1b0>)
 8007b6e:	4013      	ands	r3, r2
 8007b70:	600b      	str	r3, [r1, #0]
 8007b72:	e060      	b.n	8007c36 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007b74:	68bb      	ldr	r3, [r7, #8]
 8007b76:	015a      	lsls	r2, r3, #5
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	4413      	add	r3, r2
 8007b7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007b86:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007b8a:	d11f      	bne.n	8007bcc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007b8c:	68bb      	ldr	r3, [r7, #8]
 8007b8e:	015a      	lsls	r2, r3, #5
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	4413      	add	r3, r2
 8007b94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	68ba      	ldr	r2, [r7, #8]
 8007b9c:	0151      	lsls	r1, r2, #5
 8007b9e:	68fa      	ldr	r2, [r7, #12]
 8007ba0:	440a      	add	r2, r1
 8007ba2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007ba6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007baa:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007bac:	68bb      	ldr	r3, [r7, #8]
 8007bae:	015a      	lsls	r2, r3, #5
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	4413      	add	r3, r2
 8007bb4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	68ba      	ldr	r2, [r7, #8]
 8007bbc:	0151      	lsls	r1, r2, #5
 8007bbe:	68fa      	ldr	r2, [r7, #12]
 8007bc0:	440a      	add	r2, r1
 8007bc2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007bc6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007bca:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007bd2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007bd4:	683b      	ldr	r3, [r7, #0]
 8007bd6:	781b      	ldrb	r3, [r3, #0]
 8007bd8:	f003 030f 	and.w	r3, r3, #15
 8007bdc:	2101      	movs	r1, #1
 8007bde:	fa01 f303 	lsl.w	r3, r1, r3
 8007be2:	041b      	lsls	r3, r3, #16
 8007be4:	43db      	mvns	r3, r3
 8007be6:	68f9      	ldr	r1, [r7, #12]
 8007be8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007bec:	4013      	ands	r3, r2
 8007bee:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007bf6:	69da      	ldr	r2, [r3, #28]
 8007bf8:	683b      	ldr	r3, [r7, #0]
 8007bfa:	781b      	ldrb	r3, [r3, #0]
 8007bfc:	f003 030f 	and.w	r3, r3, #15
 8007c00:	2101      	movs	r1, #1
 8007c02:	fa01 f303 	lsl.w	r3, r1, r3
 8007c06:	041b      	lsls	r3, r3, #16
 8007c08:	43db      	mvns	r3, r3
 8007c0a:	68f9      	ldr	r1, [r7, #12]
 8007c0c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007c10:	4013      	ands	r3, r2
 8007c12:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007c14:	68bb      	ldr	r3, [r7, #8]
 8007c16:	015a      	lsls	r2, r3, #5
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	4413      	add	r3, r2
 8007c1c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c20:	681a      	ldr	r2, [r3, #0]
 8007c22:	68bb      	ldr	r3, [r7, #8]
 8007c24:	0159      	lsls	r1, r3, #5
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	440b      	add	r3, r1
 8007c2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c2e:	4619      	mov	r1, r3
 8007c30:	4b05      	ldr	r3, [pc, #20]	@ (8007c48 <USB_DeactivateEndpoint+0x1b4>)
 8007c32:	4013      	ands	r3, r2
 8007c34:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8007c36:	2300      	movs	r3, #0
}
 8007c38:	4618      	mov	r0, r3
 8007c3a:	3714      	adds	r7, #20
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c42:	4770      	bx	lr
 8007c44:	ec337800 	.word	0xec337800
 8007c48:	eff37800 	.word	0xeff37800

08007c4c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007c4c:	b580      	push	{r7, lr}
 8007c4e:	b08a      	sub	sp, #40	@ 0x28
 8007c50:	af02      	add	r7, sp, #8
 8007c52:	60f8      	str	r0, [r7, #12]
 8007c54:	60b9      	str	r1, [r7, #8]
 8007c56:	4613      	mov	r3, r2
 8007c58:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8007c5e:	68bb      	ldr	r3, [r7, #8]
 8007c60:	781b      	ldrb	r3, [r3, #0]
 8007c62:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007c64:	68bb      	ldr	r3, [r7, #8]
 8007c66:	785b      	ldrb	r3, [r3, #1]
 8007c68:	2b01      	cmp	r3, #1
 8007c6a:	f040 817a 	bne.w	8007f62 <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007c6e:	68bb      	ldr	r3, [r7, #8]
 8007c70:	691b      	ldr	r3, [r3, #16]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d132      	bne.n	8007cdc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007c76:	69bb      	ldr	r3, [r7, #24]
 8007c78:	015a      	lsls	r2, r3, #5
 8007c7a:	69fb      	ldr	r3, [r7, #28]
 8007c7c:	4413      	add	r3, r2
 8007c7e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c82:	691b      	ldr	r3, [r3, #16]
 8007c84:	69ba      	ldr	r2, [r7, #24]
 8007c86:	0151      	lsls	r1, r2, #5
 8007c88:	69fa      	ldr	r2, [r7, #28]
 8007c8a:	440a      	add	r2, r1
 8007c8c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007c90:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8007c94:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8007c98:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007c9a:	69bb      	ldr	r3, [r7, #24]
 8007c9c:	015a      	lsls	r2, r3, #5
 8007c9e:	69fb      	ldr	r3, [r7, #28]
 8007ca0:	4413      	add	r3, r2
 8007ca2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ca6:	691b      	ldr	r3, [r3, #16]
 8007ca8:	69ba      	ldr	r2, [r7, #24]
 8007caa:	0151      	lsls	r1, r2, #5
 8007cac:	69fa      	ldr	r2, [r7, #28]
 8007cae:	440a      	add	r2, r1
 8007cb0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007cb4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007cb8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007cba:	69bb      	ldr	r3, [r7, #24]
 8007cbc:	015a      	lsls	r2, r3, #5
 8007cbe:	69fb      	ldr	r3, [r7, #28]
 8007cc0:	4413      	add	r3, r2
 8007cc2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007cc6:	691b      	ldr	r3, [r3, #16]
 8007cc8:	69ba      	ldr	r2, [r7, #24]
 8007cca:	0151      	lsls	r1, r2, #5
 8007ccc:	69fa      	ldr	r2, [r7, #28]
 8007cce:	440a      	add	r2, r1
 8007cd0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007cd4:	0cdb      	lsrs	r3, r3, #19
 8007cd6:	04db      	lsls	r3, r3, #19
 8007cd8:	6113      	str	r3, [r2, #16]
 8007cda:	e092      	b.n	8007e02 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007cdc:	69bb      	ldr	r3, [r7, #24]
 8007cde:	015a      	lsls	r2, r3, #5
 8007ce0:	69fb      	ldr	r3, [r7, #28]
 8007ce2:	4413      	add	r3, r2
 8007ce4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ce8:	691b      	ldr	r3, [r3, #16]
 8007cea:	69ba      	ldr	r2, [r7, #24]
 8007cec:	0151      	lsls	r1, r2, #5
 8007cee:	69fa      	ldr	r2, [r7, #28]
 8007cf0:	440a      	add	r2, r1
 8007cf2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007cf6:	0cdb      	lsrs	r3, r3, #19
 8007cf8:	04db      	lsls	r3, r3, #19
 8007cfa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007cfc:	69bb      	ldr	r3, [r7, #24]
 8007cfe:	015a      	lsls	r2, r3, #5
 8007d00:	69fb      	ldr	r3, [r7, #28]
 8007d02:	4413      	add	r3, r2
 8007d04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d08:	691b      	ldr	r3, [r3, #16]
 8007d0a:	69ba      	ldr	r2, [r7, #24]
 8007d0c:	0151      	lsls	r1, r2, #5
 8007d0e:	69fa      	ldr	r2, [r7, #28]
 8007d10:	440a      	add	r2, r1
 8007d12:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007d16:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8007d1a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8007d1e:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8007d20:	69bb      	ldr	r3, [r7, #24]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d11a      	bne.n	8007d5c <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8007d26:	68bb      	ldr	r3, [r7, #8]
 8007d28:	691a      	ldr	r2, [r3, #16]
 8007d2a:	68bb      	ldr	r3, [r7, #8]
 8007d2c:	689b      	ldr	r3, [r3, #8]
 8007d2e:	429a      	cmp	r2, r3
 8007d30:	d903      	bls.n	8007d3a <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8007d32:	68bb      	ldr	r3, [r7, #8]
 8007d34:	689a      	ldr	r2, [r3, #8]
 8007d36:	68bb      	ldr	r3, [r7, #8]
 8007d38:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007d3a:	69bb      	ldr	r3, [r7, #24]
 8007d3c:	015a      	lsls	r2, r3, #5
 8007d3e:	69fb      	ldr	r3, [r7, #28]
 8007d40:	4413      	add	r3, r2
 8007d42:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d46:	691b      	ldr	r3, [r3, #16]
 8007d48:	69ba      	ldr	r2, [r7, #24]
 8007d4a:	0151      	lsls	r1, r2, #5
 8007d4c:	69fa      	ldr	r2, [r7, #28]
 8007d4e:	440a      	add	r2, r1
 8007d50:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007d54:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007d58:	6113      	str	r3, [r2, #16]
 8007d5a:	e01b      	b.n	8007d94 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007d5c:	69bb      	ldr	r3, [r7, #24]
 8007d5e:	015a      	lsls	r2, r3, #5
 8007d60:	69fb      	ldr	r3, [r7, #28]
 8007d62:	4413      	add	r3, r2
 8007d64:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d68:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8007d6a:	68bb      	ldr	r3, [r7, #8]
 8007d6c:	6919      	ldr	r1, [r3, #16]
 8007d6e:	68bb      	ldr	r3, [r7, #8]
 8007d70:	689b      	ldr	r3, [r3, #8]
 8007d72:	440b      	add	r3, r1
 8007d74:	1e59      	subs	r1, r3, #1
 8007d76:	68bb      	ldr	r3, [r7, #8]
 8007d78:	689b      	ldr	r3, [r3, #8]
 8007d7a:	fbb1 f3f3 	udiv	r3, r1, r3
 8007d7e:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007d80:	4ba2      	ldr	r3, [pc, #648]	@ (800800c <USB_EPStartXfer+0x3c0>)
 8007d82:	400b      	ands	r3, r1
 8007d84:	69b9      	ldr	r1, [r7, #24]
 8007d86:	0148      	lsls	r0, r1, #5
 8007d88:	69f9      	ldr	r1, [r7, #28]
 8007d8a:	4401      	add	r1, r0
 8007d8c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8007d90:	4313      	orrs	r3, r2
 8007d92:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007d94:	69bb      	ldr	r3, [r7, #24]
 8007d96:	015a      	lsls	r2, r3, #5
 8007d98:	69fb      	ldr	r3, [r7, #28]
 8007d9a:	4413      	add	r3, r2
 8007d9c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007da0:	691a      	ldr	r2, [r3, #16]
 8007da2:	68bb      	ldr	r3, [r7, #8]
 8007da4:	691b      	ldr	r3, [r3, #16]
 8007da6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007daa:	69b9      	ldr	r1, [r7, #24]
 8007dac:	0148      	lsls	r0, r1, #5
 8007dae:	69f9      	ldr	r1, [r7, #28]
 8007db0:	4401      	add	r1, r0
 8007db2:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8007db6:	4313      	orrs	r3, r2
 8007db8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8007dba:	68bb      	ldr	r3, [r7, #8]
 8007dbc:	791b      	ldrb	r3, [r3, #4]
 8007dbe:	2b01      	cmp	r3, #1
 8007dc0:	d11f      	bne.n	8007e02 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007dc2:	69bb      	ldr	r3, [r7, #24]
 8007dc4:	015a      	lsls	r2, r3, #5
 8007dc6:	69fb      	ldr	r3, [r7, #28]
 8007dc8:	4413      	add	r3, r2
 8007dca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007dce:	691b      	ldr	r3, [r3, #16]
 8007dd0:	69ba      	ldr	r2, [r7, #24]
 8007dd2:	0151      	lsls	r1, r2, #5
 8007dd4:	69fa      	ldr	r2, [r7, #28]
 8007dd6:	440a      	add	r2, r1
 8007dd8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007ddc:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8007de0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8007de2:	69bb      	ldr	r3, [r7, #24]
 8007de4:	015a      	lsls	r2, r3, #5
 8007de6:	69fb      	ldr	r3, [r7, #28]
 8007de8:	4413      	add	r3, r2
 8007dea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007dee:	691b      	ldr	r3, [r3, #16]
 8007df0:	69ba      	ldr	r2, [r7, #24]
 8007df2:	0151      	lsls	r1, r2, #5
 8007df4:	69fa      	ldr	r2, [r7, #28]
 8007df6:	440a      	add	r2, r1
 8007df8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007dfc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007e00:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8007e02:	79fb      	ldrb	r3, [r7, #7]
 8007e04:	2b01      	cmp	r3, #1
 8007e06:	d14b      	bne.n	8007ea0 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007e08:	68bb      	ldr	r3, [r7, #8]
 8007e0a:	69db      	ldr	r3, [r3, #28]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d009      	beq.n	8007e24 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007e10:	69bb      	ldr	r3, [r7, #24]
 8007e12:	015a      	lsls	r2, r3, #5
 8007e14:	69fb      	ldr	r3, [r7, #28]
 8007e16:	4413      	add	r3, r2
 8007e18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e1c:	461a      	mov	r2, r3
 8007e1e:	68bb      	ldr	r3, [r7, #8]
 8007e20:	69db      	ldr	r3, [r3, #28]
 8007e22:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007e24:	68bb      	ldr	r3, [r7, #8]
 8007e26:	791b      	ldrb	r3, [r3, #4]
 8007e28:	2b01      	cmp	r3, #1
 8007e2a:	d128      	bne.n	8007e7e <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007e2c:	69fb      	ldr	r3, [r7, #28]
 8007e2e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007e32:	689b      	ldr	r3, [r3, #8]
 8007e34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d110      	bne.n	8007e5e <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007e3c:	69bb      	ldr	r3, [r7, #24]
 8007e3e:	015a      	lsls	r2, r3, #5
 8007e40:	69fb      	ldr	r3, [r7, #28]
 8007e42:	4413      	add	r3, r2
 8007e44:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	69ba      	ldr	r2, [r7, #24]
 8007e4c:	0151      	lsls	r1, r2, #5
 8007e4e:	69fa      	ldr	r2, [r7, #28]
 8007e50:	440a      	add	r2, r1
 8007e52:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007e56:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007e5a:	6013      	str	r3, [r2, #0]
 8007e5c:	e00f      	b.n	8007e7e <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007e5e:	69bb      	ldr	r3, [r7, #24]
 8007e60:	015a      	lsls	r2, r3, #5
 8007e62:	69fb      	ldr	r3, [r7, #28]
 8007e64:	4413      	add	r3, r2
 8007e66:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	69ba      	ldr	r2, [r7, #24]
 8007e6e:	0151      	lsls	r1, r2, #5
 8007e70:	69fa      	ldr	r2, [r7, #28]
 8007e72:	440a      	add	r2, r1
 8007e74:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007e78:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007e7c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007e7e:	69bb      	ldr	r3, [r7, #24]
 8007e80:	015a      	lsls	r2, r3, #5
 8007e82:	69fb      	ldr	r3, [r7, #28]
 8007e84:	4413      	add	r3, r2
 8007e86:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	69ba      	ldr	r2, [r7, #24]
 8007e8e:	0151      	lsls	r1, r2, #5
 8007e90:	69fa      	ldr	r2, [r7, #28]
 8007e92:	440a      	add	r2, r1
 8007e94:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007e98:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007e9c:	6013      	str	r3, [r2, #0]
 8007e9e:	e165      	b.n	800816c <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007ea0:	69bb      	ldr	r3, [r7, #24]
 8007ea2:	015a      	lsls	r2, r3, #5
 8007ea4:	69fb      	ldr	r3, [r7, #28]
 8007ea6:	4413      	add	r3, r2
 8007ea8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	69ba      	ldr	r2, [r7, #24]
 8007eb0:	0151      	lsls	r1, r2, #5
 8007eb2:	69fa      	ldr	r2, [r7, #28]
 8007eb4:	440a      	add	r2, r1
 8007eb6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007eba:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007ebe:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007ec0:	68bb      	ldr	r3, [r7, #8]
 8007ec2:	791b      	ldrb	r3, [r3, #4]
 8007ec4:	2b01      	cmp	r3, #1
 8007ec6:	d015      	beq.n	8007ef4 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007ec8:	68bb      	ldr	r3, [r7, #8]
 8007eca:	691b      	ldr	r3, [r3, #16]
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	f000 814d 	beq.w	800816c <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007ed2:	69fb      	ldr	r3, [r7, #28]
 8007ed4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007ed8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007eda:	68bb      	ldr	r3, [r7, #8]
 8007edc:	781b      	ldrb	r3, [r3, #0]
 8007ede:	f003 030f 	and.w	r3, r3, #15
 8007ee2:	2101      	movs	r1, #1
 8007ee4:	fa01 f303 	lsl.w	r3, r1, r3
 8007ee8:	69f9      	ldr	r1, [r7, #28]
 8007eea:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007eee:	4313      	orrs	r3, r2
 8007ef0:	634b      	str	r3, [r1, #52]	@ 0x34
 8007ef2:	e13b      	b.n	800816c <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007ef4:	69fb      	ldr	r3, [r7, #28]
 8007ef6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007efa:	689b      	ldr	r3, [r3, #8]
 8007efc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d110      	bne.n	8007f26 <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007f04:	69bb      	ldr	r3, [r7, #24]
 8007f06:	015a      	lsls	r2, r3, #5
 8007f08:	69fb      	ldr	r3, [r7, #28]
 8007f0a:	4413      	add	r3, r2
 8007f0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	69ba      	ldr	r2, [r7, #24]
 8007f14:	0151      	lsls	r1, r2, #5
 8007f16:	69fa      	ldr	r2, [r7, #28]
 8007f18:	440a      	add	r2, r1
 8007f1a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007f1e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007f22:	6013      	str	r3, [r2, #0]
 8007f24:	e00f      	b.n	8007f46 <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007f26:	69bb      	ldr	r3, [r7, #24]
 8007f28:	015a      	lsls	r2, r3, #5
 8007f2a:	69fb      	ldr	r3, [r7, #28]
 8007f2c:	4413      	add	r3, r2
 8007f2e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	69ba      	ldr	r2, [r7, #24]
 8007f36:	0151      	lsls	r1, r2, #5
 8007f38:	69fa      	ldr	r2, [r7, #28]
 8007f3a:	440a      	add	r2, r1
 8007f3c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007f40:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007f44:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007f46:	68bb      	ldr	r3, [r7, #8]
 8007f48:	68d9      	ldr	r1, [r3, #12]
 8007f4a:	68bb      	ldr	r3, [r7, #8]
 8007f4c:	781a      	ldrb	r2, [r3, #0]
 8007f4e:	68bb      	ldr	r3, [r7, #8]
 8007f50:	691b      	ldr	r3, [r3, #16]
 8007f52:	b298      	uxth	r0, r3
 8007f54:	79fb      	ldrb	r3, [r7, #7]
 8007f56:	9300      	str	r3, [sp, #0]
 8007f58:	4603      	mov	r3, r0
 8007f5a:	68f8      	ldr	r0, [r7, #12]
 8007f5c:	f000 f9b8 	bl	80082d0 <USB_WritePacket>
 8007f60:	e104      	b.n	800816c <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007f62:	69bb      	ldr	r3, [r7, #24]
 8007f64:	015a      	lsls	r2, r3, #5
 8007f66:	69fb      	ldr	r3, [r7, #28]
 8007f68:	4413      	add	r3, r2
 8007f6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f6e:	691b      	ldr	r3, [r3, #16]
 8007f70:	69ba      	ldr	r2, [r7, #24]
 8007f72:	0151      	lsls	r1, r2, #5
 8007f74:	69fa      	ldr	r2, [r7, #28]
 8007f76:	440a      	add	r2, r1
 8007f78:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007f7c:	0cdb      	lsrs	r3, r3, #19
 8007f7e:	04db      	lsls	r3, r3, #19
 8007f80:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007f82:	69bb      	ldr	r3, [r7, #24]
 8007f84:	015a      	lsls	r2, r3, #5
 8007f86:	69fb      	ldr	r3, [r7, #28]
 8007f88:	4413      	add	r3, r2
 8007f8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f8e:	691b      	ldr	r3, [r3, #16]
 8007f90:	69ba      	ldr	r2, [r7, #24]
 8007f92:	0151      	lsls	r1, r2, #5
 8007f94:	69fa      	ldr	r2, [r7, #28]
 8007f96:	440a      	add	r2, r1
 8007f98:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007f9c:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8007fa0:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8007fa4:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8007fa6:	69bb      	ldr	r3, [r7, #24]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d131      	bne.n	8008010 <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 8007fac:	68bb      	ldr	r3, [r7, #8]
 8007fae:	691b      	ldr	r3, [r3, #16]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d003      	beq.n	8007fbc <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 8007fb4:	68bb      	ldr	r3, [r7, #8]
 8007fb6:	689a      	ldr	r2, [r3, #8]
 8007fb8:	68bb      	ldr	r3, [r7, #8]
 8007fba:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8007fbc:	68bb      	ldr	r3, [r7, #8]
 8007fbe:	689a      	ldr	r2, [r3, #8]
 8007fc0:	68bb      	ldr	r3, [r7, #8]
 8007fc2:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8007fc4:	69bb      	ldr	r3, [r7, #24]
 8007fc6:	015a      	lsls	r2, r3, #5
 8007fc8:	69fb      	ldr	r3, [r7, #28]
 8007fca:	4413      	add	r3, r2
 8007fcc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007fd0:	691a      	ldr	r2, [r3, #16]
 8007fd2:	68bb      	ldr	r3, [r7, #8]
 8007fd4:	6a1b      	ldr	r3, [r3, #32]
 8007fd6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007fda:	69b9      	ldr	r1, [r7, #24]
 8007fdc:	0148      	lsls	r0, r1, #5
 8007fde:	69f9      	ldr	r1, [r7, #28]
 8007fe0:	4401      	add	r1, r0
 8007fe2:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007fe6:	4313      	orrs	r3, r2
 8007fe8:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007fea:	69bb      	ldr	r3, [r7, #24]
 8007fec:	015a      	lsls	r2, r3, #5
 8007fee:	69fb      	ldr	r3, [r7, #28]
 8007ff0:	4413      	add	r3, r2
 8007ff2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ff6:	691b      	ldr	r3, [r3, #16]
 8007ff8:	69ba      	ldr	r2, [r7, #24]
 8007ffa:	0151      	lsls	r1, r2, #5
 8007ffc:	69fa      	ldr	r2, [r7, #28]
 8007ffe:	440a      	add	r2, r1
 8008000:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008004:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008008:	6113      	str	r3, [r2, #16]
 800800a:	e061      	b.n	80080d0 <USB_EPStartXfer+0x484>
 800800c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8008010:	68bb      	ldr	r3, [r7, #8]
 8008012:	691b      	ldr	r3, [r3, #16]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d123      	bne.n	8008060 <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8008018:	69bb      	ldr	r3, [r7, #24]
 800801a:	015a      	lsls	r2, r3, #5
 800801c:	69fb      	ldr	r3, [r7, #28]
 800801e:	4413      	add	r3, r2
 8008020:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008024:	691a      	ldr	r2, [r3, #16]
 8008026:	68bb      	ldr	r3, [r7, #8]
 8008028:	689b      	ldr	r3, [r3, #8]
 800802a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800802e:	69b9      	ldr	r1, [r7, #24]
 8008030:	0148      	lsls	r0, r1, #5
 8008032:	69f9      	ldr	r1, [r7, #28]
 8008034:	4401      	add	r1, r0
 8008036:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800803a:	4313      	orrs	r3, r2
 800803c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800803e:	69bb      	ldr	r3, [r7, #24]
 8008040:	015a      	lsls	r2, r3, #5
 8008042:	69fb      	ldr	r3, [r7, #28]
 8008044:	4413      	add	r3, r2
 8008046:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800804a:	691b      	ldr	r3, [r3, #16]
 800804c:	69ba      	ldr	r2, [r7, #24]
 800804e:	0151      	lsls	r1, r2, #5
 8008050:	69fa      	ldr	r2, [r7, #28]
 8008052:	440a      	add	r2, r1
 8008054:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008058:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800805c:	6113      	str	r3, [r2, #16]
 800805e:	e037      	b.n	80080d0 <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008060:	68bb      	ldr	r3, [r7, #8]
 8008062:	691a      	ldr	r2, [r3, #16]
 8008064:	68bb      	ldr	r3, [r7, #8]
 8008066:	689b      	ldr	r3, [r3, #8]
 8008068:	4413      	add	r3, r2
 800806a:	1e5a      	subs	r2, r3, #1
 800806c:	68bb      	ldr	r3, [r7, #8]
 800806e:	689b      	ldr	r3, [r3, #8]
 8008070:	fbb2 f3f3 	udiv	r3, r2, r3
 8008074:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8008076:	68bb      	ldr	r3, [r7, #8]
 8008078:	689b      	ldr	r3, [r3, #8]
 800807a:	8afa      	ldrh	r2, [r7, #22]
 800807c:	fb03 f202 	mul.w	r2, r3, r2
 8008080:	68bb      	ldr	r3, [r7, #8]
 8008082:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8008084:	69bb      	ldr	r3, [r7, #24]
 8008086:	015a      	lsls	r2, r3, #5
 8008088:	69fb      	ldr	r3, [r7, #28]
 800808a:	4413      	add	r3, r2
 800808c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008090:	691a      	ldr	r2, [r3, #16]
 8008092:	8afb      	ldrh	r3, [r7, #22]
 8008094:	04d9      	lsls	r1, r3, #19
 8008096:	4b38      	ldr	r3, [pc, #224]	@ (8008178 <USB_EPStartXfer+0x52c>)
 8008098:	400b      	ands	r3, r1
 800809a:	69b9      	ldr	r1, [r7, #24]
 800809c:	0148      	lsls	r0, r1, #5
 800809e:	69f9      	ldr	r1, [r7, #28]
 80080a0:	4401      	add	r1, r0
 80080a2:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80080a6:	4313      	orrs	r3, r2
 80080a8:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80080aa:	69bb      	ldr	r3, [r7, #24]
 80080ac:	015a      	lsls	r2, r3, #5
 80080ae:	69fb      	ldr	r3, [r7, #28]
 80080b0:	4413      	add	r3, r2
 80080b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80080b6:	691a      	ldr	r2, [r3, #16]
 80080b8:	68bb      	ldr	r3, [r7, #8]
 80080ba:	6a1b      	ldr	r3, [r3, #32]
 80080bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80080c0:	69b9      	ldr	r1, [r7, #24]
 80080c2:	0148      	lsls	r0, r1, #5
 80080c4:	69f9      	ldr	r1, [r7, #28]
 80080c6:	4401      	add	r1, r0
 80080c8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80080cc:	4313      	orrs	r3, r2
 80080ce:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80080d0:	79fb      	ldrb	r3, [r7, #7]
 80080d2:	2b01      	cmp	r3, #1
 80080d4:	d10d      	bne.n	80080f2 <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80080d6:	68bb      	ldr	r3, [r7, #8]
 80080d8:	68db      	ldr	r3, [r3, #12]
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d009      	beq.n	80080f2 <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80080de:	68bb      	ldr	r3, [r7, #8]
 80080e0:	68d9      	ldr	r1, [r3, #12]
 80080e2:	69bb      	ldr	r3, [r7, #24]
 80080e4:	015a      	lsls	r2, r3, #5
 80080e6:	69fb      	ldr	r3, [r7, #28]
 80080e8:	4413      	add	r3, r2
 80080ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80080ee:	460a      	mov	r2, r1
 80080f0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80080f2:	68bb      	ldr	r3, [r7, #8]
 80080f4:	791b      	ldrb	r3, [r3, #4]
 80080f6:	2b01      	cmp	r3, #1
 80080f8:	d128      	bne.n	800814c <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80080fa:	69fb      	ldr	r3, [r7, #28]
 80080fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008100:	689b      	ldr	r3, [r3, #8]
 8008102:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008106:	2b00      	cmp	r3, #0
 8008108:	d110      	bne.n	800812c <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800810a:	69bb      	ldr	r3, [r7, #24]
 800810c:	015a      	lsls	r2, r3, #5
 800810e:	69fb      	ldr	r3, [r7, #28]
 8008110:	4413      	add	r3, r2
 8008112:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	69ba      	ldr	r2, [r7, #24]
 800811a:	0151      	lsls	r1, r2, #5
 800811c:	69fa      	ldr	r2, [r7, #28]
 800811e:	440a      	add	r2, r1
 8008120:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008124:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008128:	6013      	str	r3, [r2, #0]
 800812a:	e00f      	b.n	800814c <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800812c:	69bb      	ldr	r3, [r7, #24]
 800812e:	015a      	lsls	r2, r3, #5
 8008130:	69fb      	ldr	r3, [r7, #28]
 8008132:	4413      	add	r3, r2
 8008134:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	69ba      	ldr	r2, [r7, #24]
 800813c:	0151      	lsls	r1, r2, #5
 800813e:	69fa      	ldr	r2, [r7, #28]
 8008140:	440a      	add	r2, r1
 8008142:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008146:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800814a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800814c:	69bb      	ldr	r3, [r7, #24]
 800814e:	015a      	lsls	r2, r3, #5
 8008150:	69fb      	ldr	r3, [r7, #28]
 8008152:	4413      	add	r3, r2
 8008154:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	69ba      	ldr	r2, [r7, #24]
 800815c:	0151      	lsls	r1, r2, #5
 800815e:	69fa      	ldr	r2, [r7, #28]
 8008160:	440a      	add	r2, r1
 8008162:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008166:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800816a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800816c:	2300      	movs	r3, #0
}
 800816e:	4618      	mov	r0, r3
 8008170:	3720      	adds	r7, #32
 8008172:	46bd      	mov	sp, r7
 8008174:	bd80      	pop	{r7, pc}
 8008176:	bf00      	nop
 8008178:	1ff80000 	.word	0x1ff80000

0800817c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800817c:	b480      	push	{r7}
 800817e:	b087      	sub	sp, #28
 8008180:	af00      	add	r7, sp, #0
 8008182:	6078      	str	r0, [r7, #4]
 8008184:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008186:	2300      	movs	r3, #0
 8008188:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800818a:	2300      	movs	r3, #0
 800818c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008192:	683b      	ldr	r3, [r7, #0]
 8008194:	785b      	ldrb	r3, [r3, #1]
 8008196:	2b01      	cmp	r3, #1
 8008198:	d14a      	bne.n	8008230 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800819a:	683b      	ldr	r3, [r7, #0]
 800819c:	781b      	ldrb	r3, [r3, #0]
 800819e:	015a      	lsls	r2, r3, #5
 80081a0:	693b      	ldr	r3, [r7, #16]
 80081a2:	4413      	add	r3, r2
 80081a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80081ae:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80081b2:	f040 8086 	bne.w	80082c2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80081b6:	683b      	ldr	r3, [r7, #0]
 80081b8:	781b      	ldrb	r3, [r3, #0]
 80081ba:	015a      	lsls	r2, r3, #5
 80081bc:	693b      	ldr	r3, [r7, #16]
 80081be:	4413      	add	r3, r2
 80081c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	683a      	ldr	r2, [r7, #0]
 80081c8:	7812      	ldrb	r2, [r2, #0]
 80081ca:	0151      	lsls	r1, r2, #5
 80081cc:	693a      	ldr	r2, [r7, #16]
 80081ce:	440a      	add	r2, r1
 80081d0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80081d4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80081d8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80081da:	683b      	ldr	r3, [r7, #0]
 80081dc:	781b      	ldrb	r3, [r3, #0]
 80081de:	015a      	lsls	r2, r3, #5
 80081e0:	693b      	ldr	r3, [r7, #16]
 80081e2:	4413      	add	r3, r2
 80081e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	683a      	ldr	r2, [r7, #0]
 80081ec:	7812      	ldrb	r2, [r2, #0]
 80081ee:	0151      	lsls	r1, r2, #5
 80081f0:	693a      	ldr	r2, [r7, #16]
 80081f2:	440a      	add	r2, r1
 80081f4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80081f8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80081fc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	3301      	adds	r3, #1
 8008202:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	f242 7210 	movw	r2, #10000	@ 0x2710
 800820a:	4293      	cmp	r3, r2
 800820c:	d902      	bls.n	8008214 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800820e:	2301      	movs	r3, #1
 8008210:	75fb      	strb	r3, [r7, #23]
          break;
 8008212:	e056      	b.n	80082c2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8008214:	683b      	ldr	r3, [r7, #0]
 8008216:	781b      	ldrb	r3, [r3, #0]
 8008218:	015a      	lsls	r2, r3, #5
 800821a:	693b      	ldr	r3, [r7, #16]
 800821c:	4413      	add	r3, r2
 800821e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008228:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800822c:	d0e7      	beq.n	80081fe <USB_EPStopXfer+0x82>
 800822e:	e048      	b.n	80082c2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008230:	683b      	ldr	r3, [r7, #0]
 8008232:	781b      	ldrb	r3, [r3, #0]
 8008234:	015a      	lsls	r2, r3, #5
 8008236:	693b      	ldr	r3, [r7, #16]
 8008238:	4413      	add	r3, r2
 800823a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008244:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008248:	d13b      	bne.n	80082c2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800824a:	683b      	ldr	r3, [r7, #0]
 800824c:	781b      	ldrb	r3, [r3, #0]
 800824e:	015a      	lsls	r2, r3, #5
 8008250:	693b      	ldr	r3, [r7, #16]
 8008252:	4413      	add	r3, r2
 8008254:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	683a      	ldr	r2, [r7, #0]
 800825c:	7812      	ldrb	r2, [r2, #0]
 800825e:	0151      	lsls	r1, r2, #5
 8008260:	693a      	ldr	r2, [r7, #16]
 8008262:	440a      	add	r2, r1
 8008264:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008268:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800826c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800826e:	683b      	ldr	r3, [r7, #0]
 8008270:	781b      	ldrb	r3, [r3, #0]
 8008272:	015a      	lsls	r2, r3, #5
 8008274:	693b      	ldr	r3, [r7, #16]
 8008276:	4413      	add	r3, r2
 8008278:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	683a      	ldr	r2, [r7, #0]
 8008280:	7812      	ldrb	r2, [r2, #0]
 8008282:	0151      	lsls	r1, r2, #5
 8008284:	693a      	ldr	r2, [r7, #16]
 8008286:	440a      	add	r2, r1
 8008288:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800828c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008290:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	3301      	adds	r3, #1
 8008296:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800829e:	4293      	cmp	r3, r2
 80082a0:	d902      	bls.n	80082a8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80082a2:	2301      	movs	r3, #1
 80082a4:	75fb      	strb	r3, [r7, #23]
          break;
 80082a6:	e00c      	b.n	80082c2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80082a8:	683b      	ldr	r3, [r7, #0]
 80082aa:	781b      	ldrb	r3, [r3, #0]
 80082ac:	015a      	lsls	r2, r3, #5
 80082ae:	693b      	ldr	r3, [r7, #16]
 80082b0:	4413      	add	r3, r2
 80082b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80082bc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80082c0:	d0e7      	beq.n	8008292 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80082c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80082c4:	4618      	mov	r0, r3
 80082c6:	371c      	adds	r7, #28
 80082c8:	46bd      	mov	sp, r7
 80082ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ce:	4770      	bx	lr

080082d0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80082d0:	b480      	push	{r7}
 80082d2:	b089      	sub	sp, #36	@ 0x24
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	60f8      	str	r0, [r7, #12]
 80082d8:	60b9      	str	r1, [r7, #8]
 80082da:	4611      	mov	r1, r2
 80082dc:	461a      	mov	r2, r3
 80082de:	460b      	mov	r3, r1
 80082e0:	71fb      	strb	r3, [r7, #7]
 80082e2:	4613      	mov	r3, r2
 80082e4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80082ea:	68bb      	ldr	r3, [r7, #8]
 80082ec:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80082ee:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d123      	bne.n	800833e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80082f6:	88bb      	ldrh	r3, [r7, #4]
 80082f8:	3303      	adds	r3, #3
 80082fa:	089b      	lsrs	r3, r3, #2
 80082fc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80082fe:	2300      	movs	r3, #0
 8008300:	61bb      	str	r3, [r7, #24]
 8008302:	e018      	b.n	8008336 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008304:	79fb      	ldrb	r3, [r7, #7]
 8008306:	031a      	lsls	r2, r3, #12
 8008308:	697b      	ldr	r3, [r7, #20]
 800830a:	4413      	add	r3, r2
 800830c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008310:	461a      	mov	r2, r3
 8008312:	69fb      	ldr	r3, [r7, #28]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008318:	69fb      	ldr	r3, [r7, #28]
 800831a:	3301      	adds	r3, #1
 800831c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800831e:	69fb      	ldr	r3, [r7, #28]
 8008320:	3301      	adds	r3, #1
 8008322:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008324:	69fb      	ldr	r3, [r7, #28]
 8008326:	3301      	adds	r3, #1
 8008328:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800832a:	69fb      	ldr	r3, [r7, #28]
 800832c:	3301      	adds	r3, #1
 800832e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008330:	69bb      	ldr	r3, [r7, #24]
 8008332:	3301      	adds	r3, #1
 8008334:	61bb      	str	r3, [r7, #24]
 8008336:	69ba      	ldr	r2, [r7, #24]
 8008338:	693b      	ldr	r3, [r7, #16]
 800833a:	429a      	cmp	r2, r3
 800833c:	d3e2      	bcc.n	8008304 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800833e:	2300      	movs	r3, #0
}
 8008340:	4618      	mov	r0, r3
 8008342:	3724      	adds	r7, #36	@ 0x24
 8008344:	46bd      	mov	sp, r7
 8008346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834a:	4770      	bx	lr

0800834c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800834c:	b480      	push	{r7}
 800834e:	b08b      	sub	sp, #44	@ 0x2c
 8008350:	af00      	add	r7, sp, #0
 8008352:	60f8      	str	r0, [r7, #12]
 8008354:	60b9      	str	r1, [r7, #8]
 8008356:	4613      	mov	r3, r2
 8008358:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800835e:	68bb      	ldr	r3, [r7, #8]
 8008360:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008362:	88fb      	ldrh	r3, [r7, #6]
 8008364:	089b      	lsrs	r3, r3, #2
 8008366:	b29b      	uxth	r3, r3
 8008368:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800836a:	88fb      	ldrh	r3, [r7, #6]
 800836c:	f003 0303 	and.w	r3, r3, #3
 8008370:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008372:	2300      	movs	r3, #0
 8008374:	623b      	str	r3, [r7, #32]
 8008376:	e014      	b.n	80083a2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008378:	69bb      	ldr	r3, [r7, #24]
 800837a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800837e:	681a      	ldr	r2, [r3, #0]
 8008380:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008382:	601a      	str	r2, [r3, #0]
    pDest++;
 8008384:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008386:	3301      	adds	r3, #1
 8008388:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800838a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800838c:	3301      	adds	r3, #1
 800838e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008390:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008392:	3301      	adds	r3, #1
 8008394:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008398:	3301      	adds	r3, #1
 800839a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800839c:	6a3b      	ldr	r3, [r7, #32]
 800839e:	3301      	adds	r3, #1
 80083a0:	623b      	str	r3, [r7, #32]
 80083a2:	6a3a      	ldr	r2, [r7, #32]
 80083a4:	697b      	ldr	r3, [r7, #20]
 80083a6:	429a      	cmp	r2, r3
 80083a8:	d3e6      	bcc.n	8008378 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80083aa:	8bfb      	ldrh	r3, [r7, #30]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d01e      	beq.n	80083ee <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80083b0:	2300      	movs	r3, #0
 80083b2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80083b4:	69bb      	ldr	r3, [r7, #24]
 80083b6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80083ba:	461a      	mov	r2, r3
 80083bc:	f107 0310 	add.w	r3, r7, #16
 80083c0:	6812      	ldr	r2, [r2, #0]
 80083c2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80083c4:	693a      	ldr	r2, [r7, #16]
 80083c6:	6a3b      	ldr	r3, [r7, #32]
 80083c8:	b2db      	uxtb	r3, r3
 80083ca:	00db      	lsls	r3, r3, #3
 80083cc:	fa22 f303 	lsr.w	r3, r2, r3
 80083d0:	b2da      	uxtb	r2, r3
 80083d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083d4:	701a      	strb	r2, [r3, #0]
      i++;
 80083d6:	6a3b      	ldr	r3, [r7, #32]
 80083d8:	3301      	adds	r3, #1
 80083da:	623b      	str	r3, [r7, #32]
      pDest++;
 80083dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083de:	3301      	adds	r3, #1
 80083e0:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80083e2:	8bfb      	ldrh	r3, [r7, #30]
 80083e4:	3b01      	subs	r3, #1
 80083e6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80083e8:	8bfb      	ldrh	r3, [r7, #30]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d1ea      	bne.n	80083c4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80083ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80083f0:	4618      	mov	r0, r3
 80083f2:	372c      	adds	r7, #44	@ 0x2c
 80083f4:	46bd      	mov	sp, r7
 80083f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fa:	4770      	bx	lr

080083fc <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80083fc:	b480      	push	{r7}
 80083fe:	b085      	sub	sp, #20
 8008400:	af00      	add	r7, sp, #0
 8008402:	6078      	str	r0, [r7, #4]
 8008404:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800840a:	683b      	ldr	r3, [r7, #0]
 800840c:	781b      	ldrb	r3, [r3, #0]
 800840e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008410:	683b      	ldr	r3, [r7, #0]
 8008412:	785b      	ldrb	r3, [r3, #1]
 8008414:	2b01      	cmp	r3, #1
 8008416:	d12c      	bne.n	8008472 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008418:	68bb      	ldr	r3, [r7, #8]
 800841a:	015a      	lsls	r2, r3, #5
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	4413      	add	r3, r2
 8008420:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	2b00      	cmp	r3, #0
 8008428:	db12      	blt.n	8008450 <USB_EPSetStall+0x54>
 800842a:	68bb      	ldr	r3, [r7, #8]
 800842c:	2b00      	cmp	r3, #0
 800842e:	d00f      	beq.n	8008450 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008430:	68bb      	ldr	r3, [r7, #8]
 8008432:	015a      	lsls	r2, r3, #5
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	4413      	add	r3, r2
 8008438:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	68ba      	ldr	r2, [r7, #8]
 8008440:	0151      	lsls	r1, r2, #5
 8008442:	68fa      	ldr	r2, [r7, #12]
 8008444:	440a      	add	r2, r1
 8008446:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800844a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800844e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008450:	68bb      	ldr	r3, [r7, #8]
 8008452:	015a      	lsls	r2, r3, #5
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	4413      	add	r3, r2
 8008458:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	68ba      	ldr	r2, [r7, #8]
 8008460:	0151      	lsls	r1, r2, #5
 8008462:	68fa      	ldr	r2, [r7, #12]
 8008464:	440a      	add	r2, r1
 8008466:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800846a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800846e:	6013      	str	r3, [r2, #0]
 8008470:	e02b      	b.n	80084ca <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008472:	68bb      	ldr	r3, [r7, #8]
 8008474:	015a      	lsls	r2, r3, #5
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	4413      	add	r3, r2
 800847a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	2b00      	cmp	r3, #0
 8008482:	db12      	blt.n	80084aa <USB_EPSetStall+0xae>
 8008484:	68bb      	ldr	r3, [r7, #8]
 8008486:	2b00      	cmp	r3, #0
 8008488:	d00f      	beq.n	80084aa <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800848a:	68bb      	ldr	r3, [r7, #8]
 800848c:	015a      	lsls	r2, r3, #5
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	4413      	add	r3, r2
 8008492:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	68ba      	ldr	r2, [r7, #8]
 800849a:	0151      	lsls	r1, r2, #5
 800849c:	68fa      	ldr	r2, [r7, #12]
 800849e:	440a      	add	r2, r1
 80084a0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80084a4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80084a8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80084aa:	68bb      	ldr	r3, [r7, #8]
 80084ac:	015a      	lsls	r2, r3, #5
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	4413      	add	r3, r2
 80084b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	68ba      	ldr	r2, [r7, #8]
 80084ba:	0151      	lsls	r1, r2, #5
 80084bc:	68fa      	ldr	r2, [r7, #12]
 80084be:	440a      	add	r2, r1
 80084c0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80084c4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80084c8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80084ca:	2300      	movs	r3, #0
}
 80084cc:	4618      	mov	r0, r3
 80084ce:	3714      	adds	r7, #20
 80084d0:	46bd      	mov	sp, r7
 80084d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d6:	4770      	bx	lr

080084d8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80084d8:	b480      	push	{r7}
 80084da:	b085      	sub	sp, #20
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]
 80084e0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80084e6:	683b      	ldr	r3, [r7, #0]
 80084e8:	781b      	ldrb	r3, [r3, #0]
 80084ea:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80084ec:	683b      	ldr	r3, [r7, #0]
 80084ee:	785b      	ldrb	r3, [r3, #1]
 80084f0:	2b01      	cmp	r3, #1
 80084f2:	d128      	bne.n	8008546 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80084f4:	68bb      	ldr	r3, [r7, #8]
 80084f6:	015a      	lsls	r2, r3, #5
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	4413      	add	r3, r2
 80084fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	68ba      	ldr	r2, [r7, #8]
 8008504:	0151      	lsls	r1, r2, #5
 8008506:	68fa      	ldr	r2, [r7, #12]
 8008508:	440a      	add	r2, r1
 800850a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800850e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008512:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008514:	683b      	ldr	r3, [r7, #0]
 8008516:	791b      	ldrb	r3, [r3, #4]
 8008518:	2b03      	cmp	r3, #3
 800851a:	d003      	beq.n	8008524 <USB_EPClearStall+0x4c>
 800851c:	683b      	ldr	r3, [r7, #0]
 800851e:	791b      	ldrb	r3, [r3, #4]
 8008520:	2b02      	cmp	r3, #2
 8008522:	d138      	bne.n	8008596 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008524:	68bb      	ldr	r3, [r7, #8]
 8008526:	015a      	lsls	r2, r3, #5
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	4413      	add	r3, r2
 800852c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	68ba      	ldr	r2, [r7, #8]
 8008534:	0151      	lsls	r1, r2, #5
 8008536:	68fa      	ldr	r2, [r7, #12]
 8008538:	440a      	add	r2, r1
 800853a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800853e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008542:	6013      	str	r3, [r2, #0]
 8008544:	e027      	b.n	8008596 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008546:	68bb      	ldr	r3, [r7, #8]
 8008548:	015a      	lsls	r2, r3, #5
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	4413      	add	r3, r2
 800854e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	68ba      	ldr	r2, [r7, #8]
 8008556:	0151      	lsls	r1, r2, #5
 8008558:	68fa      	ldr	r2, [r7, #12]
 800855a:	440a      	add	r2, r1
 800855c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008560:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008564:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008566:	683b      	ldr	r3, [r7, #0]
 8008568:	791b      	ldrb	r3, [r3, #4]
 800856a:	2b03      	cmp	r3, #3
 800856c:	d003      	beq.n	8008576 <USB_EPClearStall+0x9e>
 800856e:	683b      	ldr	r3, [r7, #0]
 8008570:	791b      	ldrb	r3, [r3, #4]
 8008572:	2b02      	cmp	r3, #2
 8008574:	d10f      	bne.n	8008596 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008576:	68bb      	ldr	r3, [r7, #8]
 8008578:	015a      	lsls	r2, r3, #5
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	4413      	add	r3, r2
 800857e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	68ba      	ldr	r2, [r7, #8]
 8008586:	0151      	lsls	r1, r2, #5
 8008588:	68fa      	ldr	r2, [r7, #12]
 800858a:	440a      	add	r2, r1
 800858c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008590:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008594:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8008596:	2300      	movs	r3, #0
}
 8008598:	4618      	mov	r0, r3
 800859a:	3714      	adds	r7, #20
 800859c:	46bd      	mov	sp, r7
 800859e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a2:	4770      	bx	lr

080085a4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80085a4:	b480      	push	{r7}
 80085a6:	b085      	sub	sp, #20
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	6078      	str	r0, [r7, #4]
 80085ac:	460b      	mov	r3, r1
 80085ae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	68fa      	ldr	r2, [r7, #12]
 80085be:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80085c2:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80085c6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80085ce:	681a      	ldr	r2, [r3, #0]
 80085d0:	78fb      	ldrb	r3, [r7, #3]
 80085d2:	011b      	lsls	r3, r3, #4
 80085d4:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 80085d8:	68f9      	ldr	r1, [r7, #12]
 80085da:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80085de:	4313      	orrs	r3, r2
 80085e0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80085e2:	2300      	movs	r3, #0
}
 80085e4:	4618      	mov	r0, r3
 80085e6:	3714      	adds	r7, #20
 80085e8:	46bd      	mov	sp, r7
 80085ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ee:	4770      	bx	lr

080085f0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80085f0:	b480      	push	{r7}
 80085f2:	b085      	sub	sp, #20
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	68fa      	ldr	r2, [r7, #12]
 8008606:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800860a:	f023 0303 	bic.w	r3, r3, #3
 800860e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008616:	685b      	ldr	r3, [r3, #4]
 8008618:	68fa      	ldr	r2, [r7, #12]
 800861a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800861e:	f023 0302 	bic.w	r3, r3, #2
 8008622:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008624:	2300      	movs	r3, #0
}
 8008626:	4618      	mov	r0, r3
 8008628:	3714      	adds	r7, #20
 800862a:	46bd      	mov	sp, r7
 800862c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008630:	4770      	bx	lr

08008632 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8008632:	b480      	push	{r7}
 8008634:	b085      	sub	sp, #20
 8008636:	af00      	add	r7, sp, #0
 8008638:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	68fa      	ldr	r2, [r7, #12]
 8008648:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800864c:	f023 0303 	bic.w	r3, r3, #3
 8008650:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008658:	685b      	ldr	r3, [r3, #4]
 800865a:	68fa      	ldr	r2, [r7, #12]
 800865c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008660:	f043 0302 	orr.w	r3, r3, #2
 8008664:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008666:	2300      	movs	r3, #0
}
 8008668:	4618      	mov	r0, r3
 800866a:	3714      	adds	r7, #20
 800866c:	46bd      	mov	sp, r7
 800866e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008672:	4770      	bx	lr

08008674 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8008674:	b480      	push	{r7}
 8008676:	b085      	sub	sp, #20
 8008678:	af00      	add	r7, sp, #0
 800867a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	695b      	ldr	r3, [r3, #20]
 8008680:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	699b      	ldr	r3, [r3, #24]
 8008686:	68fa      	ldr	r2, [r7, #12]
 8008688:	4013      	ands	r3, r2
 800868a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800868c:	68fb      	ldr	r3, [r7, #12]
}
 800868e:	4618      	mov	r0, r3
 8008690:	3714      	adds	r7, #20
 8008692:	46bd      	mov	sp, r7
 8008694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008698:	4770      	bx	lr

0800869a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800869a:	b480      	push	{r7}
 800869c:	b085      	sub	sp, #20
 800869e:	af00      	add	r7, sp, #0
 80086a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80086ac:	699b      	ldr	r3, [r3, #24]
 80086ae:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80086b6:	69db      	ldr	r3, [r3, #28]
 80086b8:	68ba      	ldr	r2, [r7, #8]
 80086ba:	4013      	ands	r3, r2
 80086bc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80086be:	68bb      	ldr	r3, [r7, #8]
 80086c0:	0c1b      	lsrs	r3, r3, #16
}
 80086c2:	4618      	mov	r0, r3
 80086c4:	3714      	adds	r7, #20
 80086c6:	46bd      	mov	sp, r7
 80086c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086cc:	4770      	bx	lr

080086ce <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80086ce:	b480      	push	{r7}
 80086d0:	b085      	sub	sp, #20
 80086d2:	af00      	add	r7, sp, #0
 80086d4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80086e0:	699b      	ldr	r3, [r3, #24]
 80086e2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80086ea:	69db      	ldr	r3, [r3, #28]
 80086ec:	68ba      	ldr	r2, [r7, #8]
 80086ee:	4013      	ands	r3, r2
 80086f0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80086f2:	68bb      	ldr	r3, [r7, #8]
 80086f4:	b29b      	uxth	r3, r3
}
 80086f6:	4618      	mov	r0, r3
 80086f8:	3714      	adds	r7, #20
 80086fa:	46bd      	mov	sp, r7
 80086fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008700:	4770      	bx	lr

08008702 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008702:	b480      	push	{r7}
 8008704:	b085      	sub	sp, #20
 8008706:	af00      	add	r7, sp, #0
 8008708:	6078      	str	r0, [r7, #4]
 800870a:	460b      	mov	r3, r1
 800870c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8008712:	78fb      	ldrb	r3, [r7, #3]
 8008714:	015a      	lsls	r2, r3, #5
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	4413      	add	r3, r2
 800871a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800871e:	689b      	ldr	r3, [r3, #8]
 8008720:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008728:	695b      	ldr	r3, [r3, #20]
 800872a:	68ba      	ldr	r2, [r7, #8]
 800872c:	4013      	ands	r3, r2
 800872e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008730:	68bb      	ldr	r3, [r7, #8]
}
 8008732:	4618      	mov	r0, r3
 8008734:	3714      	adds	r7, #20
 8008736:	46bd      	mov	sp, r7
 8008738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873c:	4770      	bx	lr

0800873e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800873e:	b480      	push	{r7}
 8008740:	b087      	sub	sp, #28
 8008742:	af00      	add	r7, sp, #0
 8008744:	6078      	str	r0, [r7, #4]
 8008746:	460b      	mov	r3, r1
 8008748:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800874e:	697b      	ldr	r3, [r7, #20]
 8008750:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008754:	691b      	ldr	r3, [r3, #16]
 8008756:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008758:	697b      	ldr	r3, [r7, #20]
 800875a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800875e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008760:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008762:	78fb      	ldrb	r3, [r7, #3]
 8008764:	f003 030f 	and.w	r3, r3, #15
 8008768:	68fa      	ldr	r2, [r7, #12]
 800876a:	fa22 f303 	lsr.w	r3, r2, r3
 800876e:	01db      	lsls	r3, r3, #7
 8008770:	b2db      	uxtb	r3, r3
 8008772:	693a      	ldr	r2, [r7, #16]
 8008774:	4313      	orrs	r3, r2
 8008776:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008778:	78fb      	ldrb	r3, [r7, #3]
 800877a:	015a      	lsls	r2, r3, #5
 800877c:	697b      	ldr	r3, [r7, #20]
 800877e:	4413      	add	r3, r2
 8008780:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008784:	689b      	ldr	r3, [r3, #8]
 8008786:	693a      	ldr	r2, [r7, #16]
 8008788:	4013      	ands	r3, r2
 800878a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800878c:	68bb      	ldr	r3, [r7, #8]
}
 800878e:	4618      	mov	r0, r3
 8008790:	371c      	adds	r7, #28
 8008792:	46bd      	mov	sp, r7
 8008794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008798:	4770      	bx	lr

0800879a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800879a:	b480      	push	{r7}
 800879c:	b083      	sub	sp, #12
 800879e:	af00      	add	r7, sp, #0
 80087a0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	695b      	ldr	r3, [r3, #20]
 80087a6:	f003 0301 	and.w	r3, r3, #1
}
 80087aa:	4618      	mov	r0, r3
 80087ac:	370c      	adds	r7, #12
 80087ae:	46bd      	mov	sp, r7
 80087b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b4:	4770      	bx	lr

080087b6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80087b6:	b480      	push	{r7}
 80087b8:	b085      	sub	sp, #20
 80087ba:	af00      	add	r7, sp, #0
 80087bc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	68fa      	ldr	r2, [r7, #12]
 80087cc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80087d0:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80087d4:	f023 0307 	bic.w	r3, r3, #7
 80087d8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80087e0:	685b      	ldr	r3, [r3, #4]
 80087e2:	68fa      	ldr	r2, [r7, #12]
 80087e4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80087e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80087ec:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80087ee:	2300      	movs	r3, #0
}
 80087f0:	4618      	mov	r0, r3
 80087f2:	3714      	adds	r7, #20
 80087f4:	46bd      	mov	sp, r7
 80087f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fa:	4770      	bx	lr

080087fc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80087fc:	b480      	push	{r7}
 80087fe:	b087      	sub	sp, #28
 8008800:	af00      	add	r7, sp, #0
 8008802:	60f8      	str	r0, [r7, #12]
 8008804:	460b      	mov	r3, r1
 8008806:	607a      	str	r2, [r7, #4]
 8008808:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	333c      	adds	r3, #60	@ 0x3c
 8008812:	3304      	adds	r3, #4
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008818:	693b      	ldr	r3, [r7, #16]
 800881a:	4a26      	ldr	r2, [pc, #152]	@ (80088b4 <USB_EP0_OutStart+0xb8>)
 800881c:	4293      	cmp	r3, r2
 800881e:	d90a      	bls.n	8008836 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008820:	697b      	ldr	r3, [r7, #20]
 8008822:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800882c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008830:	d101      	bne.n	8008836 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8008832:	2300      	movs	r3, #0
 8008834:	e037      	b.n	80088a6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8008836:	697b      	ldr	r3, [r7, #20]
 8008838:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800883c:	461a      	mov	r2, r3
 800883e:	2300      	movs	r3, #0
 8008840:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008842:	697b      	ldr	r3, [r7, #20]
 8008844:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008848:	691b      	ldr	r3, [r3, #16]
 800884a:	697a      	ldr	r2, [r7, #20]
 800884c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008850:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008854:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8008856:	697b      	ldr	r3, [r7, #20]
 8008858:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800885c:	691b      	ldr	r3, [r3, #16]
 800885e:	697a      	ldr	r2, [r7, #20]
 8008860:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008864:	f043 0318 	orr.w	r3, r3, #24
 8008868:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800886a:	697b      	ldr	r3, [r7, #20]
 800886c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008870:	691b      	ldr	r3, [r3, #16]
 8008872:	697a      	ldr	r2, [r7, #20]
 8008874:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008878:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800887c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800887e:	7afb      	ldrb	r3, [r7, #11]
 8008880:	2b01      	cmp	r3, #1
 8008882:	d10f      	bne.n	80088a4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008884:	697b      	ldr	r3, [r7, #20]
 8008886:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800888a:	461a      	mov	r2, r3
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008890:	697b      	ldr	r3, [r7, #20]
 8008892:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	697a      	ldr	r2, [r7, #20]
 800889a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800889e:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 80088a2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80088a4:	2300      	movs	r3, #0
}
 80088a6:	4618      	mov	r0, r3
 80088a8:	371c      	adds	r7, #28
 80088aa:	46bd      	mov	sp, r7
 80088ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b0:	4770      	bx	lr
 80088b2:	bf00      	nop
 80088b4:	4f54300a 	.word	0x4f54300a

080088b8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80088b8:	b480      	push	{r7}
 80088ba:	b085      	sub	sp, #20
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80088c0:	2300      	movs	r3, #0
 80088c2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	3301      	adds	r3, #1
 80088c8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80088d0:	d901      	bls.n	80088d6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80088d2:	2303      	movs	r3, #3
 80088d4:	e01b      	b.n	800890e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	691b      	ldr	r3, [r3, #16]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	daf2      	bge.n	80088c4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80088de:	2300      	movs	r3, #0
 80088e0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	691b      	ldr	r3, [r3, #16]
 80088e6:	f043 0201 	orr.w	r2, r3, #1
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	3301      	adds	r3, #1
 80088f2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80088fa:	d901      	bls.n	8008900 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80088fc:	2303      	movs	r3, #3
 80088fe:	e006      	b.n	800890e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	691b      	ldr	r3, [r3, #16]
 8008904:	f003 0301 	and.w	r3, r3, #1
 8008908:	2b01      	cmp	r3, #1
 800890a:	d0f0      	beq.n	80088ee <USB_CoreReset+0x36>

  return HAL_OK;
 800890c:	2300      	movs	r3, #0
}
 800890e:	4618      	mov	r0, r3
 8008910:	3714      	adds	r7, #20
 8008912:	46bd      	mov	sp, r7
 8008914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008918:	4770      	bx	lr
	...

0800891c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800891c:	b580      	push	{r7, lr}
 800891e:	b084      	sub	sp, #16
 8008920:	af00      	add	r7, sp, #0
 8008922:	6078      	str	r0, [r7, #4]
 8008924:	460b      	mov	r3, r1
 8008926:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008928:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800892c:	f005 f9e4 	bl	800dcf8 <USBD_static_malloc>
 8008930:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	2b00      	cmp	r3, #0
 8008936:	d109      	bne.n	800894c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	32b0      	adds	r2, #176	@ 0xb0
 8008942:	2100      	movs	r1, #0
 8008944:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8008948:	2302      	movs	r3, #2
 800894a:	e0d4      	b.n	8008af6 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800894c:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8008950:	2100      	movs	r1, #0
 8008952:	68f8      	ldr	r0, [r7, #12]
 8008954:	f005 fa14 	bl	800dd80 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	32b0      	adds	r2, #176	@ 0xb0
 8008962:	68f9      	ldr	r1, [r7, #12]
 8008964:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	32b0      	adds	r2, #176	@ 0xb0
 8008972:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	7c1b      	ldrb	r3, [r3, #16]
 8008980:	2b00      	cmp	r3, #0
 8008982:	d138      	bne.n	80089f6 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008984:	4b5e      	ldr	r3, [pc, #376]	@ (8008b00 <USBD_CDC_Init+0x1e4>)
 8008986:	7819      	ldrb	r1, [r3, #0]
 8008988:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800898c:	2202      	movs	r2, #2
 800898e:	6878      	ldr	r0, [r7, #4]
 8008990:	f005 f88f 	bl	800dab2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008994:	4b5a      	ldr	r3, [pc, #360]	@ (8008b00 <USBD_CDC_Init+0x1e4>)
 8008996:	781b      	ldrb	r3, [r3, #0]
 8008998:	f003 020f 	and.w	r2, r3, #15
 800899c:	6879      	ldr	r1, [r7, #4]
 800899e:	4613      	mov	r3, r2
 80089a0:	009b      	lsls	r3, r3, #2
 80089a2:	4413      	add	r3, r2
 80089a4:	009b      	lsls	r3, r3, #2
 80089a6:	440b      	add	r3, r1
 80089a8:	3324      	adds	r3, #36	@ 0x24
 80089aa:	2201      	movs	r2, #1
 80089ac:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80089ae:	4b55      	ldr	r3, [pc, #340]	@ (8008b04 <USBD_CDC_Init+0x1e8>)
 80089b0:	7819      	ldrb	r1, [r3, #0]
 80089b2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80089b6:	2202      	movs	r2, #2
 80089b8:	6878      	ldr	r0, [r7, #4]
 80089ba:	f005 f87a 	bl	800dab2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80089be:	4b51      	ldr	r3, [pc, #324]	@ (8008b04 <USBD_CDC_Init+0x1e8>)
 80089c0:	781b      	ldrb	r3, [r3, #0]
 80089c2:	f003 020f 	and.w	r2, r3, #15
 80089c6:	6879      	ldr	r1, [r7, #4]
 80089c8:	4613      	mov	r3, r2
 80089ca:	009b      	lsls	r3, r3, #2
 80089cc:	4413      	add	r3, r2
 80089ce:	009b      	lsls	r3, r3, #2
 80089d0:	440b      	add	r3, r1
 80089d2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80089d6:	2201      	movs	r2, #1
 80089d8:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80089da:	4b4b      	ldr	r3, [pc, #300]	@ (8008b08 <USBD_CDC_Init+0x1ec>)
 80089dc:	781b      	ldrb	r3, [r3, #0]
 80089de:	f003 020f 	and.w	r2, r3, #15
 80089e2:	6879      	ldr	r1, [r7, #4]
 80089e4:	4613      	mov	r3, r2
 80089e6:	009b      	lsls	r3, r3, #2
 80089e8:	4413      	add	r3, r2
 80089ea:	009b      	lsls	r3, r3, #2
 80089ec:	440b      	add	r3, r1
 80089ee:	3326      	adds	r3, #38	@ 0x26
 80089f0:	2210      	movs	r2, #16
 80089f2:	801a      	strh	r2, [r3, #0]
 80089f4:	e035      	b.n	8008a62 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80089f6:	4b42      	ldr	r3, [pc, #264]	@ (8008b00 <USBD_CDC_Init+0x1e4>)
 80089f8:	7819      	ldrb	r1, [r3, #0]
 80089fa:	2340      	movs	r3, #64	@ 0x40
 80089fc:	2202      	movs	r2, #2
 80089fe:	6878      	ldr	r0, [r7, #4]
 8008a00:	f005 f857 	bl	800dab2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008a04:	4b3e      	ldr	r3, [pc, #248]	@ (8008b00 <USBD_CDC_Init+0x1e4>)
 8008a06:	781b      	ldrb	r3, [r3, #0]
 8008a08:	f003 020f 	and.w	r2, r3, #15
 8008a0c:	6879      	ldr	r1, [r7, #4]
 8008a0e:	4613      	mov	r3, r2
 8008a10:	009b      	lsls	r3, r3, #2
 8008a12:	4413      	add	r3, r2
 8008a14:	009b      	lsls	r3, r3, #2
 8008a16:	440b      	add	r3, r1
 8008a18:	3324      	adds	r3, #36	@ 0x24
 8008a1a:	2201      	movs	r2, #1
 8008a1c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008a1e:	4b39      	ldr	r3, [pc, #228]	@ (8008b04 <USBD_CDC_Init+0x1e8>)
 8008a20:	7819      	ldrb	r1, [r3, #0]
 8008a22:	2340      	movs	r3, #64	@ 0x40
 8008a24:	2202      	movs	r2, #2
 8008a26:	6878      	ldr	r0, [r7, #4]
 8008a28:	f005 f843 	bl	800dab2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008a2c:	4b35      	ldr	r3, [pc, #212]	@ (8008b04 <USBD_CDC_Init+0x1e8>)
 8008a2e:	781b      	ldrb	r3, [r3, #0]
 8008a30:	f003 020f 	and.w	r2, r3, #15
 8008a34:	6879      	ldr	r1, [r7, #4]
 8008a36:	4613      	mov	r3, r2
 8008a38:	009b      	lsls	r3, r3, #2
 8008a3a:	4413      	add	r3, r2
 8008a3c:	009b      	lsls	r3, r3, #2
 8008a3e:	440b      	add	r3, r1
 8008a40:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008a44:	2201      	movs	r2, #1
 8008a46:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8008a48:	4b2f      	ldr	r3, [pc, #188]	@ (8008b08 <USBD_CDC_Init+0x1ec>)
 8008a4a:	781b      	ldrb	r3, [r3, #0]
 8008a4c:	f003 020f 	and.w	r2, r3, #15
 8008a50:	6879      	ldr	r1, [r7, #4]
 8008a52:	4613      	mov	r3, r2
 8008a54:	009b      	lsls	r3, r3, #2
 8008a56:	4413      	add	r3, r2
 8008a58:	009b      	lsls	r3, r3, #2
 8008a5a:	440b      	add	r3, r1
 8008a5c:	3326      	adds	r3, #38	@ 0x26
 8008a5e:	2210      	movs	r2, #16
 8008a60:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008a62:	4b29      	ldr	r3, [pc, #164]	@ (8008b08 <USBD_CDC_Init+0x1ec>)
 8008a64:	7819      	ldrb	r1, [r3, #0]
 8008a66:	2308      	movs	r3, #8
 8008a68:	2203      	movs	r2, #3
 8008a6a:	6878      	ldr	r0, [r7, #4]
 8008a6c:	f005 f821 	bl	800dab2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8008a70:	4b25      	ldr	r3, [pc, #148]	@ (8008b08 <USBD_CDC_Init+0x1ec>)
 8008a72:	781b      	ldrb	r3, [r3, #0]
 8008a74:	f003 020f 	and.w	r2, r3, #15
 8008a78:	6879      	ldr	r1, [r7, #4]
 8008a7a:	4613      	mov	r3, r2
 8008a7c:	009b      	lsls	r3, r3, #2
 8008a7e:	4413      	add	r3, r2
 8008a80:	009b      	lsls	r3, r3, #2
 8008a82:	440b      	add	r3, r1
 8008a84:	3324      	adds	r3, #36	@ 0x24
 8008a86:	2201      	movs	r2, #1
 8008a88:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	2200      	movs	r2, #0
 8008a8e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008a98:	687a      	ldr	r2, [r7, #4]
 8008a9a:	33b0      	adds	r3, #176	@ 0xb0
 8008a9c:	009b      	lsls	r3, r3, #2
 8008a9e:	4413      	add	r3, r2
 8008aa0:	685b      	ldr	r3, [r3, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	2200      	movs	r2, #0
 8008aaa:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	2200      	movs	r2, #0
 8008ab2:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d101      	bne.n	8008ac4 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8008ac0:	2302      	movs	r3, #2
 8008ac2:	e018      	b.n	8008af6 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	7c1b      	ldrb	r3, [r3, #16]
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d10a      	bne.n	8008ae2 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008acc:	4b0d      	ldr	r3, [pc, #52]	@ (8008b04 <USBD_CDC_Init+0x1e8>)
 8008ace:	7819      	ldrb	r1, [r3, #0]
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008ad6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008ada:	6878      	ldr	r0, [r7, #4]
 8008adc:	f005 f8d8 	bl	800dc90 <USBD_LL_PrepareReceive>
 8008ae0:	e008      	b.n	8008af4 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008ae2:	4b08      	ldr	r3, [pc, #32]	@ (8008b04 <USBD_CDC_Init+0x1e8>)
 8008ae4:	7819      	ldrb	r1, [r3, #0]
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008aec:	2340      	movs	r3, #64	@ 0x40
 8008aee:	6878      	ldr	r0, [r7, #4]
 8008af0:	f005 f8ce 	bl	800dc90 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008af4:	2300      	movs	r3, #0
}
 8008af6:	4618      	mov	r0, r3
 8008af8:	3710      	adds	r7, #16
 8008afa:	46bd      	mov	sp, r7
 8008afc:	bd80      	pop	{r7, pc}
 8008afe:	bf00      	nop
 8008b00:	20000093 	.word	0x20000093
 8008b04:	20000094 	.word	0x20000094
 8008b08:	20000095 	.word	0x20000095

08008b0c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008b0c:	b580      	push	{r7, lr}
 8008b0e:	b082      	sub	sp, #8
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	6078      	str	r0, [r7, #4]
 8008b14:	460b      	mov	r3, r1
 8008b16:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8008b18:	4b3a      	ldr	r3, [pc, #232]	@ (8008c04 <USBD_CDC_DeInit+0xf8>)
 8008b1a:	781b      	ldrb	r3, [r3, #0]
 8008b1c:	4619      	mov	r1, r3
 8008b1e:	6878      	ldr	r0, [r7, #4]
 8008b20:	f004 ffed 	bl	800dafe <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8008b24:	4b37      	ldr	r3, [pc, #220]	@ (8008c04 <USBD_CDC_DeInit+0xf8>)
 8008b26:	781b      	ldrb	r3, [r3, #0]
 8008b28:	f003 020f 	and.w	r2, r3, #15
 8008b2c:	6879      	ldr	r1, [r7, #4]
 8008b2e:	4613      	mov	r3, r2
 8008b30:	009b      	lsls	r3, r3, #2
 8008b32:	4413      	add	r3, r2
 8008b34:	009b      	lsls	r3, r3, #2
 8008b36:	440b      	add	r3, r1
 8008b38:	3324      	adds	r3, #36	@ 0x24
 8008b3a:	2200      	movs	r2, #0
 8008b3c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8008b3e:	4b32      	ldr	r3, [pc, #200]	@ (8008c08 <USBD_CDC_DeInit+0xfc>)
 8008b40:	781b      	ldrb	r3, [r3, #0]
 8008b42:	4619      	mov	r1, r3
 8008b44:	6878      	ldr	r0, [r7, #4]
 8008b46:	f004 ffda 	bl	800dafe <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8008b4a:	4b2f      	ldr	r3, [pc, #188]	@ (8008c08 <USBD_CDC_DeInit+0xfc>)
 8008b4c:	781b      	ldrb	r3, [r3, #0]
 8008b4e:	f003 020f 	and.w	r2, r3, #15
 8008b52:	6879      	ldr	r1, [r7, #4]
 8008b54:	4613      	mov	r3, r2
 8008b56:	009b      	lsls	r3, r3, #2
 8008b58:	4413      	add	r3, r2
 8008b5a:	009b      	lsls	r3, r3, #2
 8008b5c:	440b      	add	r3, r1
 8008b5e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008b62:	2200      	movs	r2, #0
 8008b64:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8008b66:	4b29      	ldr	r3, [pc, #164]	@ (8008c0c <USBD_CDC_DeInit+0x100>)
 8008b68:	781b      	ldrb	r3, [r3, #0]
 8008b6a:	4619      	mov	r1, r3
 8008b6c:	6878      	ldr	r0, [r7, #4]
 8008b6e:	f004 ffc6 	bl	800dafe <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8008b72:	4b26      	ldr	r3, [pc, #152]	@ (8008c0c <USBD_CDC_DeInit+0x100>)
 8008b74:	781b      	ldrb	r3, [r3, #0]
 8008b76:	f003 020f 	and.w	r2, r3, #15
 8008b7a:	6879      	ldr	r1, [r7, #4]
 8008b7c:	4613      	mov	r3, r2
 8008b7e:	009b      	lsls	r3, r3, #2
 8008b80:	4413      	add	r3, r2
 8008b82:	009b      	lsls	r3, r3, #2
 8008b84:	440b      	add	r3, r1
 8008b86:	3324      	adds	r3, #36	@ 0x24
 8008b88:	2200      	movs	r2, #0
 8008b8a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8008b8c:	4b1f      	ldr	r3, [pc, #124]	@ (8008c0c <USBD_CDC_DeInit+0x100>)
 8008b8e:	781b      	ldrb	r3, [r3, #0]
 8008b90:	f003 020f 	and.w	r2, r3, #15
 8008b94:	6879      	ldr	r1, [r7, #4]
 8008b96:	4613      	mov	r3, r2
 8008b98:	009b      	lsls	r3, r3, #2
 8008b9a:	4413      	add	r3, r2
 8008b9c:	009b      	lsls	r3, r3, #2
 8008b9e:	440b      	add	r3, r1
 8008ba0:	3326      	adds	r3, #38	@ 0x26
 8008ba2:	2200      	movs	r2, #0
 8008ba4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	32b0      	adds	r2, #176	@ 0xb0
 8008bb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d01f      	beq.n	8008bf8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008bbe:	687a      	ldr	r2, [r7, #4]
 8008bc0:	33b0      	adds	r3, #176	@ 0xb0
 8008bc2:	009b      	lsls	r3, r3, #2
 8008bc4:	4413      	add	r3, r2
 8008bc6:	685b      	ldr	r3, [r3, #4]
 8008bc8:	685b      	ldr	r3, [r3, #4]
 8008bca:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	32b0      	adds	r2, #176	@ 0xb0
 8008bd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bda:	4618      	mov	r0, r3
 8008bdc:	f005 f89a 	bl	800dd14 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	32b0      	adds	r2, #176	@ 0xb0
 8008bea:	2100      	movs	r1, #0
 8008bec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	2200      	movs	r2, #0
 8008bf4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008bf8:	2300      	movs	r3, #0
}
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	3708      	adds	r7, #8
 8008bfe:	46bd      	mov	sp, r7
 8008c00:	bd80      	pop	{r7, pc}
 8008c02:	bf00      	nop
 8008c04:	20000093 	.word	0x20000093
 8008c08:	20000094 	.word	0x20000094
 8008c0c:	20000095 	.word	0x20000095

08008c10 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8008c10:	b580      	push	{r7, lr}
 8008c12:	b086      	sub	sp, #24
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
 8008c18:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	32b0      	adds	r2, #176	@ 0xb0
 8008c24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c28:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8008c2a:	2300      	movs	r3, #0
 8008c2c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8008c2e:	2300      	movs	r3, #0
 8008c30:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8008c32:	2300      	movs	r3, #0
 8008c34:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8008c36:	693b      	ldr	r3, [r7, #16]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d101      	bne.n	8008c40 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8008c3c:	2303      	movs	r3, #3
 8008c3e:	e0bf      	b.n	8008dc0 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008c40:	683b      	ldr	r3, [r7, #0]
 8008c42:	781b      	ldrb	r3, [r3, #0]
 8008c44:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d050      	beq.n	8008cee <USBD_CDC_Setup+0xde>
 8008c4c:	2b20      	cmp	r3, #32
 8008c4e:	f040 80af 	bne.w	8008db0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8008c52:	683b      	ldr	r3, [r7, #0]
 8008c54:	88db      	ldrh	r3, [r3, #6]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d03a      	beq.n	8008cd0 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8008c5a:	683b      	ldr	r3, [r7, #0]
 8008c5c:	781b      	ldrb	r3, [r3, #0]
 8008c5e:	b25b      	sxtb	r3, r3
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	da1b      	bge.n	8008c9c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008c6a:	687a      	ldr	r2, [r7, #4]
 8008c6c:	33b0      	adds	r3, #176	@ 0xb0
 8008c6e:	009b      	lsls	r3, r3, #2
 8008c70:	4413      	add	r3, r2
 8008c72:	685b      	ldr	r3, [r3, #4]
 8008c74:	689b      	ldr	r3, [r3, #8]
 8008c76:	683a      	ldr	r2, [r7, #0]
 8008c78:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8008c7a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008c7c:	683a      	ldr	r2, [r7, #0]
 8008c7e:	88d2      	ldrh	r2, [r2, #6]
 8008c80:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8008c82:	683b      	ldr	r3, [r7, #0]
 8008c84:	88db      	ldrh	r3, [r3, #6]
 8008c86:	2b07      	cmp	r3, #7
 8008c88:	bf28      	it	cs
 8008c8a:	2307      	movcs	r3, #7
 8008c8c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8008c8e:	693b      	ldr	r3, [r7, #16]
 8008c90:	89fa      	ldrh	r2, [r7, #14]
 8008c92:	4619      	mov	r1, r3
 8008c94:	6878      	ldr	r0, [r7, #4]
 8008c96:	f001 fd47 	bl	800a728 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8008c9a:	e090      	b.n	8008dbe <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8008c9c:	683b      	ldr	r3, [r7, #0]
 8008c9e:	785a      	ldrb	r2, [r3, #1]
 8008ca0:	693b      	ldr	r3, [r7, #16]
 8008ca2:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8008ca6:	683b      	ldr	r3, [r7, #0]
 8008ca8:	88db      	ldrh	r3, [r3, #6]
 8008caa:	2b3f      	cmp	r3, #63	@ 0x3f
 8008cac:	d803      	bhi.n	8008cb6 <USBD_CDC_Setup+0xa6>
 8008cae:	683b      	ldr	r3, [r7, #0]
 8008cb0:	88db      	ldrh	r3, [r3, #6]
 8008cb2:	b2da      	uxtb	r2, r3
 8008cb4:	e000      	b.n	8008cb8 <USBD_CDC_Setup+0xa8>
 8008cb6:	2240      	movs	r2, #64	@ 0x40
 8008cb8:	693b      	ldr	r3, [r7, #16]
 8008cba:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8008cbe:	6939      	ldr	r1, [r7, #16]
 8008cc0:	693b      	ldr	r3, [r7, #16]
 8008cc2:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8008cc6:	461a      	mov	r2, r3
 8008cc8:	6878      	ldr	r0, [r7, #4]
 8008cca:	f001 fd59 	bl	800a780 <USBD_CtlPrepareRx>
      break;
 8008cce:	e076      	b.n	8008dbe <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008cd6:	687a      	ldr	r2, [r7, #4]
 8008cd8:	33b0      	adds	r3, #176	@ 0xb0
 8008cda:	009b      	lsls	r3, r3, #2
 8008cdc:	4413      	add	r3, r2
 8008cde:	685b      	ldr	r3, [r3, #4]
 8008ce0:	689b      	ldr	r3, [r3, #8]
 8008ce2:	683a      	ldr	r2, [r7, #0]
 8008ce4:	7850      	ldrb	r0, [r2, #1]
 8008ce6:	2200      	movs	r2, #0
 8008ce8:	6839      	ldr	r1, [r7, #0]
 8008cea:	4798      	blx	r3
      break;
 8008cec:	e067      	b.n	8008dbe <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008cee:	683b      	ldr	r3, [r7, #0]
 8008cf0:	785b      	ldrb	r3, [r3, #1]
 8008cf2:	2b0b      	cmp	r3, #11
 8008cf4:	d851      	bhi.n	8008d9a <USBD_CDC_Setup+0x18a>
 8008cf6:	a201      	add	r2, pc, #4	@ (adr r2, 8008cfc <USBD_CDC_Setup+0xec>)
 8008cf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cfc:	08008d2d 	.word	0x08008d2d
 8008d00:	08008da9 	.word	0x08008da9
 8008d04:	08008d9b 	.word	0x08008d9b
 8008d08:	08008d9b 	.word	0x08008d9b
 8008d0c:	08008d9b 	.word	0x08008d9b
 8008d10:	08008d9b 	.word	0x08008d9b
 8008d14:	08008d9b 	.word	0x08008d9b
 8008d18:	08008d9b 	.word	0x08008d9b
 8008d1c:	08008d9b 	.word	0x08008d9b
 8008d20:	08008d9b 	.word	0x08008d9b
 8008d24:	08008d57 	.word	0x08008d57
 8008d28:	08008d81 	.word	0x08008d81
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008d32:	b2db      	uxtb	r3, r3
 8008d34:	2b03      	cmp	r3, #3
 8008d36:	d107      	bne.n	8008d48 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008d38:	f107 030a 	add.w	r3, r7, #10
 8008d3c:	2202      	movs	r2, #2
 8008d3e:	4619      	mov	r1, r3
 8008d40:	6878      	ldr	r0, [r7, #4]
 8008d42:	f001 fcf1 	bl	800a728 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008d46:	e032      	b.n	8008dae <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008d48:	6839      	ldr	r1, [r7, #0]
 8008d4a:	6878      	ldr	r0, [r7, #4]
 8008d4c:	f001 fc7b 	bl	800a646 <USBD_CtlError>
            ret = USBD_FAIL;
 8008d50:	2303      	movs	r3, #3
 8008d52:	75fb      	strb	r3, [r7, #23]
          break;
 8008d54:	e02b      	b.n	8008dae <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008d5c:	b2db      	uxtb	r3, r3
 8008d5e:	2b03      	cmp	r3, #3
 8008d60:	d107      	bne.n	8008d72 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8008d62:	f107 030d 	add.w	r3, r7, #13
 8008d66:	2201      	movs	r2, #1
 8008d68:	4619      	mov	r1, r3
 8008d6a:	6878      	ldr	r0, [r7, #4]
 8008d6c:	f001 fcdc 	bl	800a728 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008d70:	e01d      	b.n	8008dae <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008d72:	6839      	ldr	r1, [r7, #0]
 8008d74:	6878      	ldr	r0, [r7, #4]
 8008d76:	f001 fc66 	bl	800a646 <USBD_CtlError>
            ret = USBD_FAIL;
 8008d7a:	2303      	movs	r3, #3
 8008d7c:	75fb      	strb	r3, [r7, #23]
          break;
 8008d7e:	e016      	b.n	8008dae <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008d86:	b2db      	uxtb	r3, r3
 8008d88:	2b03      	cmp	r3, #3
 8008d8a:	d00f      	beq.n	8008dac <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8008d8c:	6839      	ldr	r1, [r7, #0]
 8008d8e:	6878      	ldr	r0, [r7, #4]
 8008d90:	f001 fc59 	bl	800a646 <USBD_CtlError>
            ret = USBD_FAIL;
 8008d94:	2303      	movs	r3, #3
 8008d96:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008d98:	e008      	b.n	8008dac <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008d9a:	6839      	ldr	r1, [r7, #0]
 8008d9c:	6878      	ldr	r0, [r7, #4]
 8008d9e:	f001 fc52 	bl	800a646 <USBD_CtlError>
          ret = USBD_FAIL;
 8008da2:	2303      	movs	r3, #3
 8008da4:	75fb      	strb	r3, [r7, #23]
          break;
 8008da6:	e002      	b.n	8008dae <USBD_CDC_Setup+0x19e>
          break;
 8008da8:	bf00      	nop
 8008daa:	e008      	b.n	8008dbe <USBD_CDC_Setup+0x1ae>
          break;
 8008dac:	bf00      	nop
      }
      break;
 8008dae:	e006      	b.n	8008dbe <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8008db0:	6839      	ldr	r1, [r7, #0]
 8008db2:	6878      	ldr	r0, [r7, #4]
 8008db4:	f001 fc47 	bl	800a646 <USBD_CtlError>
      ret = USBD_FAIL;
 8008db8:	2303      	movs	r3, #3
 8008dba:	75fb      	strb	r3, [r7, #23]
      break;
 8008dbc:	bf00      	nop
  }

  return (uint8_t)ret;
 8008dbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	3718      	adds	r7, #24
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	bd80      	pop	{r7, pc}

08008dc8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008dc8:	b580      	push	{r7, lr}
 8008dca:	b084      	sub	sp, #16
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	6078      	str	r0, [r7, #4]
 8008dd0:	460b      	mov	r3, r1
 8008dd2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008dda:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	32b0      	adds	r2, #176	@ 0xb0
 8008de6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d101      	bne.n	8008df2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8008dee:	2303      	movs	r3, #3
 8008df0:	e065      	b.n	8008ebe <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	32b0      	adds	r2, #176	@ 0xb0
 8008dfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e00:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008e02:	78fb      	ldrb	r3, [r7, #3]
 8008e04:	f003 020f 	and.w	r2, r3, #15
 8008e08:	6879      	ldr	r1, [r7, #4]
 8008e0a:	4613      	mov	r3, r2
 8008e0c:	009b      	lsls	r3, r3, #2
 8008e0e:	4413      	add	r3, r2
 8008e10:	009b      	lsls	r3, r3, #2
 8008e12:	440b      	add	r3, r1
 8008e14:	3318      	adds	r3, #24
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d02f      	beq.n	8008e7c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8008e1c:	78fb      	ldrb	r3, [r7, #3]
 8008e1e:	f003 020f 	and.w	r2, r3, #15
 8008e22:	6879      	ldr	r1, [r7, #4]
 8008e24:	4613      	mov	r3, r2
 8008e26:	009b      	lsls	r3, r3, #2
 8008e28:	4413      	add	r3, r2
 8008e2a:	009b      	lsls	r3, r3, #2
 8008e2c:	440b      	add	r3, r1
 8008e2e:	3318      	adds	r3, #24
 8008e30:	681a      	ldr	r2, [r3, #0]
 8008e32:	78fb      	ldrb	r3, [r7, #3]
 8008e34:	f003 010f 	and.w	r1, r3, #15
 8008e38:	68f8      	ldr	r0, [r7, #12]
 8008e3a:	460b      	mov	r3, r1
 8008e3c:	00db      	lsls	r3, r3, #3
 8008e3e:	440b      	add	r3, r1
 8008e40:	009b      	lsls	r3, r3, #2
 8008e42:	4403      	add	r3, r0
 8008e44:	331c      	adds	r3, #28
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	fbb2 f1f3 	udiv	r1, r2, r3
 8008e4c:	fb01 f303 	mul.w	r3, r1, r3
 8008e50:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d112      	bne.n	8008e7c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8008e56:	78fb      	ldrb	r3, [r7, #3]
 8008e58:	f003 020f 	and.w	r2, r3, #15
 8008e5c:	6879      	ldr	r1, [r7, #4]
 8008e5e:	4613      	mov	r3, r2
 8008e60:	009b      	lsls	r3, r3, #2
 8008e62:	4413      	add	r3, r2
 8008e64:	009b      	lsls	r3, r3, #2
 8008e66:	440b      	add	r3, r1
 8008e68:	3318      	adds	r3, #24
 8008e6a:	2200      	movs	r2, #0
 8008e6c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008e6e:	78f9      	ldrb	r1, [r7, #3]
 8008e70:	2300      	movs	r3, #0
 8008e72:	2200      	movs	r2, #0
 8008e74:	6878      	ldr	r0, [r7, #4]
 8008e76:	f004 feea 	bl	800dc4e <USBD_LL_Transmit>
 8008e7a:	e01f      	b.n	8008ebc <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8008e7c:	68bb      	ldr	r3, [r7, #8]
 8008e7e:	2200      	movs	r2, #0
 8008e80:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008e8a:	687a      	ldr	r2, [r7, #4]
 8008e8c:	33b0      	adds	r3, #176	@ 0xb0
 8008e8e:	009b      	lsls	r3, r3, #2
 8008e90:	4413      	add	r3, r2
 8008e92:	685b      	ldr	r3, [r3, #4]
 8008e94:	691b      	ldr	r3, [r3, #16]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d010      	beq.n	8008ebc <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008ea0:	687a      	ldr	r2, [r7, #4]
 8008ea2:	33b0      	adds	r3, #176	@ 0xb0
 8008ea4:	009b      	lsls	r3, r3, #2
 8008ea6:	4413      	add	r3, r2
 8008ea8:	685b      	ldr	r3, [r3, #4]
 8008eaa:	691b      	ldr	r3, [r3, #16]
 8008eac:	68ba      	ldr	r2, [r7, #8]
 8008eae:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8008eb2:	68ba      	ldr	r2, [r7, #8]
 8008eb4:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8008eb8:	78fa      	ldrb	r2, [r7, #3]
 8008eba:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8008ebc:	2300      	movs	r3, #0
}
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	3710      	adds	r7, #16
 8008ec2:	46bd      	mov	sp, r7
 8008ec4:	bd80      	pop	{r7, pc}

08008ec6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008ec6:	b580      	push	{r7, lr}
 8008ec8:	b084      	sub	sp, #16
 8008eca:	af00      	add	r7, sp, #0
 8008ecc:	6078      	str	r0, [r7, #4]
 8008ece:	460b      	mov	r3, r1
 8008ed0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	32b0      	adds	r2, #176	@ 0xb0
 8008edc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ee0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	32b0      	adds	r2, #176	@ 0xb0
 8008eec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d101      	bne.n	8008ef8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8008ef4:	2303      	movs	r3, #3
 8008ef6:	e01a      	b.n	8008f2e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008ef8:	78fb      	ldrb	r3, [r7, #3]
 8008efa:	4619      	mov	r1, r3
 8008efc:	6878      	ldr	r0, [r7, #4]
 8008efe:	f004 fee8 	bl	800dcd2 <USBD_LL_GetRxDataSize>
 8008f02:	4602      	mov	r2, r0
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008f10:	687a      	ldr	r2, [r7, #4]
 8008f12:	33b0      	adds	r3, #176	@ 0xb0
 8008f14:	009b      	lsls	r3, r3, #2
 8008f16:	4413      	add	r3, r2
 8008f18:	685b      	ldr	r3, [r3, #4]
 8008f1a:	68db      	ldr	r3, [r3, #12]
 8008f1c:	68fa      	ldr	r2, [r7, #12]
 8008f1e:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8008f22:	68fa      	ldr	r2, [r7, #12]
 8008f24:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8008f28:	4611      	mov	r1, r2
 8008f2a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008f2c:	2300      	movs	r3, #0
}
 8008f2e:	4618      	mov	r0, r3
 8008f30:	3710      	adds	r7, #16
 8008f32:	46bd      	mov	sp, r7
 8008f34:	bd80      	pop	{r7, pc}

08008f36 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008f36:	b580      	push	{r7, lr}
 8008f38:	b084      	sub	sp, #16
 8008f3a:	af00      	add	r7, sp, #0
 8008f3c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	32b0      	adds	r2, #176	@ 0xb0
 8008f48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f4c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d101      	bne.n	8008f58 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008f54:	2303      	movs	r3, #3
 8008f56:	e024      	b.n	8008fa2 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008f5e:	687a      	ldr	r2, [r7, #4]
 8008f60:	33b0      	adds	r3, #176	@ 0xb0
 8008f62:	009b      	lsls	r3, r3, #2
 8008f64:	4413      	add	r3, r2
 8008f66:	685b      	ldr	r3, [r3, #4]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d019      	beq.n	8008fa0 <USBD_CDC_EP0_RxReady+0x6a>
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8008f72:	2bff      	cmp	r3, #255	@ 0xff
 8008f74:	d014      	beq.n	8008fa0 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008f7c:	687a      	ldr	r2, [r7, #4]
 8008f7e:	33b0      	adds	r3, #176	@ 0xb0
 8008f80:	009b      	lsls	r3, r3, #2
 8008f82:	4413      	add	r3, r2
 8008f84:	685b      	ldr	r3, [r3, #4]
 8008f86:	689b      	ldr	r3, [r3, #8]
 8008f88:	68fa      	ldr	r2, [r7, #12]
 8008f8a:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8008f8e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8008f90:	68fa      	ldr	r2, [r7, #12]
 8008f92:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008f96:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	22ff      	movs	r2, #255	@ 0xff
 8008f9c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8008fa0:	2300      	movs	r3, #0
}
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	3710      	adds	r7, #16
 8008fa6:	46bd      	mov	sp, r7
 8008fa8:	bd80      	pop	{r7, pc}
	...

08008fac <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008fac:	b580      	push	{r7, lr}
 8008fae:	b086      	sub	sp, #24
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008fb4:	2182      	movs	r1, #130	@ 0x82
 8008fb6:	4818      	ldr	r0, [pc, #96]	@ (8009018 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008fb8:	f000 fd0f 	bl	80099da <USBD_GetEpDesc>
 8008fbc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008fbe:	2101      	movs	r1, #1
 8008fc0:	4815      	ldr	r0, [pc, #84]	@ (8009018 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008fc2:	f000 fd0a 	bl	80099da <USBD_GetEpDesc>
 8008fc6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008fc8:	2181      	movs	r1, #129	@ 0x81
 8008fca:	4813      	ldr	r0, [pc, #76]	@ (8009018 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008fcc:	f000 fd05 	bl	80099da <USBD_GetEpDesc>
 8008fd0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008fd2:	697b      	ldr	r3, [r7, #20]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d002      	beq.n	8008fde <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008fd8:	697b      	ldr	r3, [r7, #20]
 8008fda:	2210      	movs	r2, #16
 8008fdc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008fde:	693b      	ldr	r3, [r7, #16]
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d006      	beq.n	8008ff2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008fe4:	693b      	ldr	r3, [r7, #16]
 8008fe6:	2200      	movs	r2, #0
 8008fe8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008fec:	711a      	strb	r2, [r3, #4]
 8008fee:	2200      	movs	r2, #0
 8008ff0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d006      	beq.n	8009006 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	2200      	movs	r2, #0
 8008ffc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009000:	711a      	strb	r2, [r3, #4]
 8009002:	2200      	movs	r2, #0
 8009004:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	2243      	movs	r2, #67	@ 0x43
 800900a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800900c:	4b02      	ldr	r3, [pc, #8]	@ (8009018 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800900e:	4618      	mov	r0, r3
 8009010:	3718      	adds	r7, #24
 8009012:	46bd      	mov	sp, r7
 8009014:	bd80      	pop	{r7, pc}
 8009016:	bf00      	nop
 8009018:	20000050 	.word	0x20000050

0800901c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800901c:	b580      	push	{r7, lr}
 800901e:	b086      	sub	sp, #24
 8009020:	af00      	add	r7, sp, #0
 8009022:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009024:	2182      	movs	r1, #130	@ 0x82
 8009026:	4818      	ldr	r0, [pc, #96]	@ (8009088 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009028:	f000 fcd7 	bl	80099da <USBD_GetEpDesc>
 800902c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800902e:	2101      	movs	r1, #1
 8009030:	4815      	ldr	r0, [pc, #84]	@ (8009088 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009032:	f000 fcd2 	bl	80099da <USBD_GetEpDesc>
 8009036:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009038:	2181      	movs	r1, #129	@ 0x81
 800903a:	4813      	ldr	r0, [pc, #76]	@ (8009088 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800903c:	f000 fccd 	bl	80099da <USBD_GetEpDesc>
 8009040:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009042:	697b      	ldr	r3, [r7, #20]
 8009044:	2b00      	cmp	r3, #0
 8009046:	d002      	beq.n	800904e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8009048:	697b      	ldr	r3, [r7, #20]
 800904a:	2210      	movs	r2, #16
 800904c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800904e:	693b      	ldr	r3, [r7, #16]
 8009050:	2b00      	cmp	r3, #0
 8009052:	d006      	beq.n	8009062 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009054:	693b      	ldr	r3, [r7, #16]
 8009056:	2200      	movs	r2, #0
 8009058:	711a      	strb	r2, [r3, #4]
 800905a:	2200      	movs	r2, #0
 800905c:	f042 0202 	orr.w	r2, r2, #2
 8009060:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	2b00      	cmp	r3, #0
 8009066:	d006      	beq.n	8009076 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	2200      	movs	r2, #0
 800906c:	711a      	strb	r2, [r3, #4]
 800906e:	2200      	movs	r2, #0
 8009070:	f042 0202 	orr.w	r2, r2, #2
 8009074:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	2243      	movs	r2, #67	@ 0x43
 800907a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800907c:	4b02      	ldr	r3, [pc, #8]	@ (8009088 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800907e:	4618      	mov	r0, r3
 8009080:	3718      	adds	r7, #24
 8009082:	46bd      	mov	sp, r7
 8009084:	bd80      	pop	{r7, pc}
 8009086:	bf00      	nop
 8009088:	20000050 	.word	0x20000050

0800908c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800908c:	b580      	push	{r7, lr}
 800908e:	b086      	sub	sp, #24
 8009090:	af00      	add	r7, sp, #0
 8009092:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009094:	2182      	movs	r1, #130	@ 0x82
 8009096:	4818      	ldr	r0, [pc, #96]	@ (80090f8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009098:	f000 fc9f 	bl	80099da <USBD_GetEpDesc>
 800909c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800909e:	2101      	movs	r1, #1
 80090a0:	4815      	ldr	r0, [pc, #84]	@ (80090f8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80090a2:	f000 fc9a 	bl	80099da <USBD_GetEpDesc>
 80090a6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80090a8:	2181      	movs	r1, #129	@ 0x81
 80090aa:	4813      	ldr	r0, [pc, #76]	@ (80090f8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80090ac:	f000 fc95 	bl	80099da <USBD_GetEpDesc>
 80090b0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80090b2:	697b      	ldr	r3, [r7, #20]
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d002      	beq.n	80090be <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80090b8:	697b      	ldr	r3, [r7, #20]
 80090ba:	2210      	movs	r2, #16
 80090bc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80090be:	693b      	ldr	r3, [r7, #16]
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d006      	beq.n	80090d2 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80090c4:	693b      	ldr	r3, [r7, #16]
 80090c6:	2200      	movs	r2, #0
 80090c8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80090cc:	711a      	strb	r2, [r3, #4]
 80090ce:	2200      	movs	r2, #0
 80090d0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d006      	beq.n	80090e6 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	2200      	movs	r2, #0
 80090dc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80090e0:	711a      	strb	r2, [r3, #4]
 80090e2:	2200      	movs	r2, #0
 80090e4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	2243      	movs	r2, #67	@ 0x43
 80090ea:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80090ec:	4b02      	ldr	r3, [pc, #8]	@ (80090f8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80090ee:	4618      	mov	r0, r3
 80090f0:	3718      	adds	r7, #24
 80090f2:	46bd      	mov	sp, r7
 80090f4:	bd80      	pop	{r7, pc}
 80090f6:	bf00      	nop
 80090f8:	20000050 	.word	0x20000050

080090fc <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80090fc:	b480      	push	{r7}
 80090fe:	b083      	sub	sp, #12
 8009100:	af00      	add	r7, sp, #0
 8009102:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	220a      	movs	r2, #10
 8009108:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800910a:	4b03      	ldr	r3, [pc, #12]	@ (8009118 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800910c:	4618      	mov	r0, r3
 800910e:	370c      	adds	r7, #12
 8009110:	46bd      	mov	sp, r7
 8009112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009116:	4770      	bx	lr
 8009118:	2000000c 	.word	0x2000000c

0800911c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800911c:	b480      	push	{r7}
 800911e:	b083      	sub	sp, #12
 8009120:	af00      	add	r7, sp, #0
 8009122:	6078      	str	r0, [r7, #4]
 8009124:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8009126:	683b      	ldr	r3, [r7, #0]
 8009128:	2b00      	cmp	r3, #0
 800912a:	d101      	bne.n	8009130 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800912c:	2303      	movs	r3, #3
 800912e:	e009      	b.n	8009144 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009136:	687a      	ldr	r2, [r7, #4]
 8009138:	33b0      	adds	r3, #176	@ 0xb0
 800913a:	009b      	lsls	r3, r3, #2
 800913c:	4413      	add	r3, r2
 800913e:	683a      	ldr	r2, [r7, #0]
 8009140:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8009142:	2300      	movs	r3, #0
}
 8009144:	4618      	mov	r0, r3
 8009146:	370c      	adds	r7, #12
 8009148:	46bd      	mov	sp, r7
 800914a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800914e:	4770      	bx	lr

08009150 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8009150:	b480      	push	{r7}
 8009152:	b087      	sub	sp, #28
 8009154:	af00      	add	r7, sp, #0
 8009156:	60f8      	str	r0, [r7, #12]
 8009158:	60b9      	str	r1, [r7, #8]
 800915a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	32b0      	adds	r2, #176	@ 0xb0
 8009166:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800916a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800916c:	697b      	ldr	r3, [r7, #20]
 800916e:	2b00      	cmp	r3, #0
 8009170:	d101      	bne.n	8009176 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8009172:	2303      	movs	r3, #3
 8009174:	e008      	b.n	8009188 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8009176:	697b      	ldr	r3, [r7, #20]
 8009178:	68ba      	ldr	r2, [r7, #8]
 800917a:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800917e:	697b      	ldr	r3, [r7, #20]
 8009180:	687a      	ldr	r2, [r7, #4]
 8009182:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8009186:	2300      	movs	r3, #0
}
 8009188:	4618      	mov	r0, r3
 800918a:	371c      	adds	r7, #28
 800918c:	46bd      	mov	sp, r7
 800918e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009192:	4770      	bx	lr

08009194 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8009194:	b480      	push	{r7}
 8009196:	b085      	sub	sp, #20
 8009198:	af00      	add	r7, sp, #0
 800919a:	6078      	str	r0, [r7, #4]
 800919c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	32b0      	adds	r2, #176	@ 0xb0
 80091a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091ac:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d101      	bne.n	80091b8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80091b4:	2303      	movs	r3, #3
 80091b6:	e004      	b.n	80091c2 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	683a      	ldr	r2, [r7, #0]
 80091bc:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 80091c0:	2300      	movs	r3, #0
}
 80091c2:	4618      	mov	r0, r3
 80091c4:	3714      	adds	r7, #20
 80091c6:	46bd      	mov	sp, r7
 80091c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091cc:	4770      	bx	lr
	...

080091d0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80091d0:	b580      	push	{r7, lr}
 80091d2:	b084      	sub	sp, #16
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	32b0      	adds	r2, #176	@ 0xb0
 80091e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091e6:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	32b0      	adds	r2, #176	@ 0xb0
 80091f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d101      	bne.n	80091fe <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80091fa:	2303      	movs	r3, #3
 80091fc:	e018      	b.n	8009230 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	7c1b      	ldrb	r3, [r3, #16]
 8009202:	2b00      	cmp	r3, #0
 8009204:	d10a      	bne.n	800921c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009206:	4b0c      	ldr	r3, [pc, #48]	@ (8009238 <USBD_CDC_ReceivePacket+0x68>)
 8009208:	7819      	ldrb	r1, [r3, #0]
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009210:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009214:	6878      	ldr	r0, [r7, #4]
 8009216:	f004 fd3b 	bl	800dc90 <USBD_LL_PrepareReceive>
 800921a:	e008      	b.n	800922e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800921c:	4b06      	ldr	r3, [pc, #24]	@ (8009238 <USBD_CDC_ReceivePacket+0x68>)
 800921e:	7819      	ldrb	r1, [r3, #0]
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009226:	2340      	movs	r3, #64	@ 0x40
 8009228:	6878      	ldr	r0, [r7, #4]
 800922a:	f004 fd31 	bl	800dc90 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800922e:	2300      	movs	r3, #0
}
 8009230:	4618      	mov	r0, r3
 8009232:	3710      	adds	r7, #16
 8009234:	46bd      	mov	sp, r7
 8009236:	bd80      	pop	{r7, pc}
 8009238:	20000094 	.word	0x20000094

0800923c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800923c:	b580      	push	{r7, lr}
 800923e:	b086      	sub	sp, #24
 8009240:	af00      	add	r7, sp, #0
 8009242:	60f8      	str	r0, [r7, #12]
 8009244:	60b9      	str	r1, [r7, #8]
 8009246:	4613      	mov	r3, r2
 8009248:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	2b00      	cmp	r3, #0
 800924e:	d101      	bne.n	8009254 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009250:	2303      	movs	r3, #3
 8009252:	e01f      	b.n	8009294 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	2200      	movs	r2, #0
 8009258:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	2200      	movs	r2, #0
 8009260:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	2200      	movs	r2, #0
 8009268:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800926c:	68bb      	ldr	r3, [r7, #8]
 800926e:	2b00      	cmp	r3, #0
 8009270:	d003      	beq.n	800927a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	68ba      	ldr	r2, [r7, #8]
 8009276:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	2201      	movs	r2, #1
 800927e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	79fa      	ldrb	r2, [r7, #7]
 8009286:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009288:	68f8      	ldr	r0, [r7, #12]
 800928a:	f004 fbab 	bl	800d9e4 <USBD_LL_Init>
 800928e:	4603      	mov	r3, r0
 8009290:	75fb      	strb	r3, [r7, #23]

  return ret;
 8009292:	7dfb      	ldrb	r3, [r7, #23]
}
 8009294:	4618      	mov	r0, r3
 8009296:	3718      	adds	r7, #24
 8009298:	46bd      	mov	sp, r7
 800929a:	bd80      	pop	{r7, pc}

0800929c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800929c:	b580      	push	{r7, lr}
 800929e:	b084      	sub	sp, #16
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	6078      	str	r0, [r7, #4]
 80092a4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80092a6:	2300      	movs	r3, #0
 80092a8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80092aa:	683b      	ldr	r3, [r7, #0]
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d101      	bne.n	80092b4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80092b0:	2303      	movs	r3, #3
 80092b2:	e025      	b.n	8009300 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	683a      	ldr	r2, [r7, #0]
 80092b8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	32ae      	adds	r2, #174	@ 0xae
 80092c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d00f      	beq.n	80092f0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	32ae      	adds	r2, #174	@ 0xae
 80092da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092e0:	f107 020e 	add.w	r2, r7, #14
 80092e4:	4610      	mov	r0, r2
 80092e6:	4798      	blx	r3
 80092e8:	4602      	mov	r2, r0
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80092f6:	1c5a      	adds	r2, r3, #1
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 80092fe:	2300      	movs	r3, #0
}
 8009300:	4618      	mov	r0, r3
 8009302:	3710      	adds	r7, #16
 8009304:	46bd      	mov	sp, r7
 8009306:	bd80      	pop	{r7, pc}

08009308 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009308:	b580      	push	{r7, lr}
 800930a:	b082      	sub	sp, #8
 800930c:	af00      	add	r7, sp, #0
 800930e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009310:	6878      	ldr	r0, [r7, #4]
 8009312:	f004 fbb3 	bl	800da7c <USBD_LL_Start>
 8009316:	4603      	mov	r3, r0
}
 8009318:	4618      	mov	r0, r3
 800931a:	3708      	adds	r7, #8
 800931c:	46bd      	mov	sp, r7
 800931e:	bd80      	pop	{r7, pc}

08009320 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8009320:	b480      	push	{r7}
 8009322:	b083      	sub	sp, #12
 8009324:	af00      	add	r7, sp, #0
 8009326:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009328:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800932a:	4618      	mov	r0, r3
 800932c:	370c      	adds	r7, #12
 800932e:	46bd      	mov	sp, r7
 8009330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009334:	4770      	bx	lr

08009336 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009336:	b580      	push	{r7, lr}
 8009338:	b084      	sub	sp, #16
 800933a:	af00      	add	r7, sp, #0
 800933c:	6078      	str	r0, [r7, #4]
 800933e:	460b      	mov	r3, r1
 8009340:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009342:	2300      	movs	r3, #0
 8009344:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800934c:	2b00      	cmp	r3, #0
 800934e:	d009      	beq.n	8009364 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	78fa      	ldrb	r2, [r7, #3]
 800935a:	4611      	mov	r1, r2
 800935c:	6878      	ldr	r0, [r7, #4]
 800935e:	4798      	blx	r3
 8009360:	4603      	mov	r3, r0
 8009362:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009364:	7bfb      	ldrb	r3, [r7, #15]
}
 8009366:	4618      	mov	r0, r3
 8009368:	3710      	adds	r7, #16
 800936a:	46bd      	mov	sp, r7
 800936c:	bd80      	pop	{r7, pc}

0800936e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800936e:	b580      	push	{r7, lr}
 8009370:	b084      	sub	sp, #16
 8009372:	af00      	add	r7, sp, #0
 8009374:	6078      	str	r0, [r7, #4]
 8009376:	460b      	mov	r3, r1
 8009378:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800937a:	2300      	movs	r3, #0
 800937c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009384:	685b      	ldr	r3, [r3, #4]
 8009386:	78fa      	ldrb	r2, [r7, #3]
 8009388:	4611      	mov	r1, r2
 800938a:	6878      	ldr	r0, [r7, #4]
 800938c:	4798      	blx	r3
 800938e:	4603      	mov	r3, r0
 8009390:	2b00      	cmp	r3, #0
 8009392:	d001      	beq.n	8009398 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8009394:	2303      	movs	r3, #3
 8009396:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009398:	7bfb      	ldrb	r3, [r7, #15]
}
 800939a:	4618      	mov	r0, r3
 800939c:	3710      	adds	r7, #16
 800939e:	46bd      	mov	sp, r7
 80093a0:	bd80      	pop	{r7, pc}

080093a2 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80093a2:	b580      	push	{r7, lr}
 80093a4:	b084      	sub	sp, #16
 80093a6:	af00      	add	r7, sp, #0
 80093a8:	6078      	str	r0, [r7, #4]
 80093aa:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80093b2:	6839      	ldr	r1, [r7, #0]
 80093b4:	4618      	mov	r0, r3
 80093b6:	f001 f90c 	bl	800a5d2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	2201      	movs	r2, #1
 80093be:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80093c8:	461a      	mov	r2, r3
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80093d6:	f003 031f 	and.w	r3, r3, #31
 80093da:	2b02      	cmp	r3, #2
 80093dc:	d01a      	beq.n	8009414 <USBD_LL_SetupStage+0x72>
 80093de:	2b02      	cmp	r3, #2
 80093e0:	d822      	bhi.n	8009428 <USBD_LL_SetupStage+0x86>
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d002      	beq.n	80093ec <USBD_LL_SetupStage+0x4a>
 80093e6:	2b01      	cmp	r3, #1
 80093e8:	d00a      	beq.n	8009400 <USBD_LL_SetupStage+0x5e>
 80093ea:	e01d      	b.n	8009428 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80093f2:	4619      	mov	r1, r3
 80093f4:	6878      	ldr	r0, [r7, #4]
 80093f6:	f000 fb63 	bl	8009ac0 <USBD_StdDevReq>
 80093fa:	4603      	mov	r3, r0
 80093fc:	73fb      	strb	r3, [r7, #15]
      break;
 80093fe:	e020      	b.n	8009442 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009406:	4619      	mov	r1, r3
 8009408:	6878      	ldr	r0, [r7, #4]
 800940a:	f000 fbcb 	bl	8009ba4 <USBD_StdItfReq>
 800940e:	4603      	mov	r3, r0
 8009410:	73fb      	strb	r3, [r7, #15]
      break;
 8009412:	e016      	b.n	8009442 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800941a:	4619      	mov	r1, r3
 800941c:	6878      	ldr	r0, [r7, #4]
 800941e:	f000 fc2d 	bl	8009c7c <USBD_StdEPReq>
 8009422:	4603      	mov	r3, r0
 8009424:	73fb      	strb	r3, [r7, #15]
      break;
 8009426:	e00c      	b.n	8009442 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800942e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8009432:	b2db      	uxtb	r3, r3
 8009434:	4619      	mov	r1, r3
 8009436:	6878      	ldr	r0, [r7, #4]
 8009438:	f004 fb80 	bl	800db3c <USBD_LL_StallEP>
 800943c:	4603      	mov	r3, r0
 800943e:	73fb      	strb	r3, [r7, #15]
      break;
 8009440:	bf00      	nop
  }

  return ret;
 8009442:	7bfb      	ldrb	r3, [r7, #15]
}
 8009444:	4618      	mov	r0, r3
 8009446:	3710      	adds	r7, #16
 8009448:	46bd      	mov	sp, r7
 800944a:	bd80      	pop	{r7, pc}

0800944c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800944c:	b580      	push	{r7, lr}
 800944e:	b086      	sub	sp, #24
 8009450:	af00      	add	r7, sp, #0
 8009452:	60f8      	str	r0, [r7, #12]
 8009454:	460b      	mov	r3, r1
 8009456:	607a      	str	r2, [r7, #4]
 8009458:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800945a:	2300      	movs	r3, #0
 800945c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800945e:	7afb      	ldrb	r3, [r7, #11]
 8009460:	2b00      	cmp	r3, #0
 8009462:	d16e      	bne.n	8009542 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800946a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009472:	2b03      	cmp	r3, #3
 8009474:	f040 8098 	bne.w	80095a8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8009478:	693b      	ldr	r3, [r7, #16]
 800947a:	689a      	ldr	r2, [r3, #8]
 800947c:	693b      	ldr	r3, [r7, #16]
 800947e:	68db      	ldr	r3, [r3, #12]
 8009480:	429a      	cmp	r2, r3
 8009482:	d913      	bls.n	80094ac <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8009484:	693b      	ldr	r3, [r7, #16]
 8009486:	689a      	ldr	r2, [r3, #8]
 8009488:	693b      	ldr	r3, [r7, #16]
 800948a:	68db      	ldr	r3, [r3, #12]
 800948c:	1ad2      	subs	r2, r2, r3
 800948e:	693b      	ldr	r3, [r7, #16]
 8009490:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8009492:	693b      	ldr	r3, [r7, #16]
 8009494:	68da      	ldr	r2, [r3, #12]
 8009496:	693b      	ldr	r3, [r7, #16]
 8009498:	689b      	ldr	r3, [r3, #8]
 800949a:	4293      	cmp	r3, r2
 800949c:	bf28      	it	cs
 800949e:	4613      	movcs	r3, r2
 80094a0:	461a      	mov	r2, r3
 80094a2:	6879      	ldr	r1, [r7, #4]
 80094a4:	68f8      	ldr	r0, [r7, #12]
 80094a6:	f001 f988 	bl	800a7ba <USBD_CtlContinueRx>
 80094aa:	e07d      	b.n	80095a8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80094b2:	f003 031f 	and.w	r3, r3, #31
 80094b6:	2b02      	cmp	r3, #2
 80094b8:	d014      	beq.n	80094e4 <USBD_LL_DataOutStage+0x98>
 80094ba:	2b02      	cmp	r3, #2
 80094bc:	d81d      	bhi.n	80094fa <USBD_LL_DataOutStage+0xae>
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d002      	beq.n	80094c8 <USBD_LL_DataOutStage+0x7c>
 80094c2:	2b01      	cmp	r3, #1
 80094c4:	d003      	beq.n	80094ce <USBD_LL_DataOutStage+0x82>
 80094c6:	e018      	b.n	80094fa <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80094c8:	2300      	movs	r3, #0
 80094ca:	75bb      	strb	r3, [r7, #22]
            break;
 80094cc:	e018      	b.n	8009500 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80094d4:	b2db      	uxtb	r3, r3
 80094d6:	4619      	mov	r1, r3
 80094d8:	68f8      	ldr	r0, [r7, #12]
 80094da:	f000 fa64 	bl	80099a6 <USBD_CoreFindIF>
 80094de:	4603      	mov	r3, r0
 80094e0:	75bb      	strb	r3, [r7, #22]
            break;
 80094e2:	e00d      	b.n	8009500 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80094ea:	b2db      	uxtb	r3, r3
 80094ec:	4619      	mov	r1, r3
 80094ee:	68f8      	ldr	r0, [r7, #12]
 80094f0:	f000 fa66 	bl	80099c0 <USBD_CoreFindEP>
 80094f4:	4603      	mov	r3, r0
 80094f6:	75bb      	strb	r3, [r7, #22]
            break;
 80094f8:	e002      	b.n	8009500 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80094fa:	2300      	movs	r3, #0
 80094fc:	75bb      	strb	r3, [r7, #22]
            break;
 80094fe:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8009500:	7dbb      	ldrb	r3, [r7, #22]
 8009502:	2b00      	cmp	r3, #0
 8009504:	d119      	bne.n	800953a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800950c:	b2db      	uxtb	r3, r3
 800950e:	2b03      	cmp	r3, #3
 8009510:	d113      	bne.n	800953a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8009512:	7dba      	ldrb	r2, [r7, #22]
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	32ae      	adds	r2, #174	@ 0xae
 8009518:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800951c:	691b      	ldr	r3, [r3, #16]
 800951e:	2b00      	cmp	r3, #0
 8009520:	d00b      	beq.n	800953a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8009522:	7dba      	ldrb	r2, [r7, #22]
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800952a:	7dba      	ldrb	r2, [r7, #22]
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	32ae      	adds	r2, #174	@ 0xae
 8009530:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009534:	691b      	ldr	r3, [r3, #16]
 8009536:	68f8      	ldr	r0, [r7, #12]
 8009538:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800953a:	68f8      	ldr	r0, [r7, #12]
 800953c:	f001 f94e 	bl	800a7dc <USBD_CtlSendStatus>
 8009540:	e032      	b.n	80095a8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8009542:	7afb      	ldrb	r3, [r7, #11]
 8009544:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009548:	b2db      	uxtb	r3, r3
 800954a:	4619      	mov	r1, r3
 800954c:	68f8      	ldr	r0, [r7, #12]
 800954e:	f000 fa37 	bl	80099c0 <USBD_CoreFindEP>
 8009552:	4603      	mov	r3, r0
 8009554:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009556:	7dbb      	ldrb	r3, [r7, #22]
 8009558:	2bff      	cmp	r3, #255	@ 0xff
 800955a:	d025      	beq.n	80095a8 <USBD_LL_DataOutStage+0x15c>
 800955c:	7dbb      	ldrb	r3, [r7, #22]
 800955e:	2b00      	cmp	r3, #0
 8009560:	d122      	bne.n	80095a8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009568:	b2db      	uxtb	r3, r3
 800956a:	2b03      	cmp	r3, #3
 800956c:	d117      	bne.n	800959e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800956e:	7dba      	ldrb	r2, [r7, #22]
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	32ae      	adds	r2, #174	@ 0xae
 8009574:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009578:	699b      	ldr	r3, [r3, #24]
 800957a:	2b00      	cmp	r3, #0
 800957c:	d00f      	beq.n	800959e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800957e:	7dba      	ldrb	r2, [r7, #22]
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8009586:	7dba      	ldrb	r2, [r7, #22]
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	32ae      	adds	r2, #174	@ 0xae
 800958c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009590:	699b      	ldr	r3, [r3, #24]
 8009592:	7afa      	ldrb	r2, [r7, #11]
 8009594:	4611      	mov	r1, r2
 8009596:	68f8      	ldr	r0, [r7, #12]
 8009598:	4798      	blx	r3
 800959a:	4603      	mov	r3, r0
 800959c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800959e:	7dfb      	ldrb	r3, [r7, #23]
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d001      	beq.n	80095a8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80095a4:	7dfb      	ldrb	r3, [r7, #23]
 80095a6:	e000      	b.n	80095aa <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80095a8:	2300      	movs	r3, #0
}
 80095aa:	4618      	mov	r0, r3
 80095ac:	3718      	adds	r7, #24
 80095ae:	46bd      	mov	sp, r7
 80095b0:	bd80      	pop	{r7, pc}

080095b2 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80095b2:	b580      	push	{r7, lr}
 80095b4:	b086      	sub	sp, #24
 80095b6:	af00      	add	r7, sp, #0
 80095b8:	60f8      	str	r0, [r7, #12]
 80095ba:	460b      	mov	r3, r1
 80095bc:	607a      	str	r2, [r7, #4]
 80095be:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80095c0:	7afb      	ldrb	r3, [r7, #11]
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d16f      	bne.n	80096a6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	3314      	adds	r3, #20
 80095ca:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80095d2:	2b02      	cmp	r3, #2
 80095d4:	d15a      	bne.n	800968c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80095d6:	693b      	ldr	r3, [r7, #16]
 80095d8:	689a      	ldr	r2, [r3, #8]
 80095da:	693b      	ldr	r3, [r7, #16]
 80095dc:	68db      	ldr	r3, [r3, #12]
 80095de:	429a      	cmp	r2, r3
 80095e0:	d914      	bls.n	800960c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80095e2:	693b      	ldr	r3, [r7, #16]
 80095e4:	689a      	ldr	r2, [r3, #8]
 80095e6:	693b      	ldr	r3, [r7, #16]
 80095e8:	68db      	ldr	r3, [r3, #12]
 80095ea:	1ad2      	subs	r2, r2, r3
 80095ec:	693b      	ldr	r3, [r7, #16]
 80095ee:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80095f0:	693b      	ldr	r3, [r7, #16]
 80095f2:	689b      	ldr	r3, [r3, #8]
 80095f4:	461a      	mov	r2, r3
 80095f6:	6879      	ldr	r1, [r7, #4]
 80095f8:	68f8      	ldr	r0, [r7, #12]
 80095fa:	f001 f8b0 	bl	800a75e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80095fe:	2300      	movs	r3, #0
 8009600:	2200      	movs	r2, #0
 8009602:	2100      	movs	r1, #0
 8009604:	68f8      	ldr	r0, [r7, #12]
 8009606:	f004 fb43 	bl	800dc90 <USBD_LL_PrepareReceive>
 800960a:	e03f      	b.n	800968c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800960c:	693b      	ldr	r3, [r7, #16]
 800960e:	68da      	ldr	r2, [r3, #12]
 8009610:	693b      	ldr	r3, [r7, #16]
 8009612:	689b      	ldr	r3, [r3, #8]
 8009614:	429a      	cmp	r2, r3
 8009616:	d11c      	bne.n	8009652 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8009618:	693b      	ldr	r3, [r7, #16]
 800961a:	685a      	ldr	r2, [r3, #4]
 800961c:	693b      	ldr	r3, [r7, #16]
 800961e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009620:	429a      	cmp	r2, r3
 8009622:	d316      	bcc.n	8009652 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009624:	693b      	ldr	r3, [r7, #16]
 8009626:	685a      	ldr	r2, [r3, #4]
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800962e:	429a      	cmp	r2, r3
 8009630:	d20f      	bcs.n	8009652 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009632:	2200      	movs	r2, #0
 8009634:	2100      	movs	r1, #0
 8009636:	68f8      	ldr	r0, [r7, #12]
 8009638:	f001 f891 	bl	800a75e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	2200      	movs	r2, #0
 8009640:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009644:	2300      	movs	r3, #0
 8009646:	2200      	movs	r2, #0
 8009648:	2100      	movs	r1, #0
 800964a:	68f8      	ldr	r0, [r7, #12]
 800964c:	f004 fb20 	bl	800dc90 <USBD_LL_PrepareReceive>
 8009650:	e01c      	b.n	800968c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009658:	b2db      	uxtb	r3, r3
 800965a:	2b03      	cmp	r3, #3
 800965c:	d10f      	bne.n	800967e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009664:	68db      	ldr	r3, [r3, #12]
 8009666:	2b00      	cmp	r3, #0
 8009668:	d009      	beq.n	800967e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	2200      	movs	r2, #0
 800966e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009678:	68db      	ldr	r3, [r3, #12]
 800967a:	68f8      	ldr	r0, [r7, #12]
 800967c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800967e:	2180      	movs	r1, #128	@ 0x80
 8009680:	68f8      	ldr	r0, [r7, #12]
 8009682:	f004 fa5b 	bl	800db3c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8009686:	68f8      	ldr	r0, [r7, #12]
 8009688:	f001 f8bb 	bl	800a802 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8009692:	2b00      	cmp	r3, #0
 8009694:	d03a      	beq.n	800970c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8009696:	68f8      	ldr	r0, [r7, #12]
 8009698:	f7ff fe42 	bl	8009320 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	2200      	movs	r2, #0
 80096a0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80096a4:	e032      	b.n	800970c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80096a6:	7afb      	ldrb	r3, [r7, #11]
 80096a8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80096ac:	b2db      	uxtb	r3, r3
 80096ae:	4619      	mov	r1, r3
 80096b0:	68f8      	ldr	r0, [r7, #12]
 80096b2:	f000 f985 	bl	80099c0 <USBD_CoreFindEP>
 80096b6:	4603      	mov	r3, r0
 80096b8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80096ba:	7dfb      	ldrb	r3, [r7, #23]
 80096bc:	2bff      	cmp	r3, #255	@ 0xff
 80096be:	d025      	beq.n	800970c <USBD_LL_DataInStage+0x15a>
 80096c0:	7dfb      	ldrb	r3, [r7, #23]
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d122      	bne.n	800970c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80096cc:	b2db      	uxtb	r3, r3
 80096ce:	2b03      	cmp	r3, #3
 80096d0:	d11c      	bne.n	800970c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80096d2:	7dfa      	ldrb	r2, [r7, #23]
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	32ae      	adds	r2, #174	@ 0xae
 80096d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096dc:	695b      	ldr	r3, [r3, #20]
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d014      	beq.n	800970c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80096e2:	7dfa      	ldrb	r2, [r7, #23]
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80096ea:	7dfa      	ldrb	r2, [r7, #23]
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	32ae      	adds	r2, #174	@ 0xae
 80096f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096f4:	695b      	ldr	r3, [r3, #20]
 80096f6:	7afa      	ldrb	r2, [r7, #11]
 80096f8:	4611      	mov	r1, r2
 80096fa:	68f8      	ldr	r0, [r7, #12]
 80096fc:	4798      	blx	r3
 80096fe:	4603      	mov	r3, r0
 8009700:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8009702:	7dbb      	ldrb	r3, [r7, #22]
 8009704:	2b00      	cmp	r3, #0
 8009706:	d001      	beq.n	800970c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8009708:	7dbb      	ldrb	r3, [r7, #22]
 800970a:	e000      	b.n	800970e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800970c:	2300      	movs	r3, #0
}
 800970e:	4618      	mov	r0, r3
 8009710:	3718      	adds	r7, #24
 8009712:	46bd      	mov	sp, r7
 8009714:	bd80      	pop	{r7, pc}

08009716 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009716:	b580      	push	{r7, lr}
 8009718:	b084      	sub	sp, #16
 800971a:	af00      	add	r7, sp, #0
 800971c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800971e:	2300      	movs	r3, #0
 8009720:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	2201      	movs	r2, #1
 8009726:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	2200      	movs	r2, #0
 800972e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	2200      	movs	r2, #0
 8009736:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	2200      	movs	r2, #0
 800973c:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	2200      	movs	r2, #0
 8009744:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800974e:	2b00      	cmp	r3, #0
 8009750:	d014      	beq.n	800977c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009758:	685b      	ldr	r3, [r3, #4]
 800975a:	2b00      	cmp	r3, #0
 800975c:	d00e      	beq.n	800977c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009764:	685b      	ldr	r3, [r3, #4]
 8009766:	687a      	ldr	r2, [r7, #4]
 8009768:	6852      	ldr	r2, [r2, #4]
 800976a:	b2d2      	uxtb	r2, r2
 800976c:	4611      	mov	r1, r2
 800976e:	6878      	ldr	r0, [r7, #4]
 8009770:	4798      	blx	r3
 8009772:	4603      	mov	r3, r0
 8009774:	2b00      	cmp	r3, #0
 8009776:	d001      	beq.n	800977c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8009778:	2303      	movs	r3, #3
 800977a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800977c:	2340      	movs	r3, #64	@ 0x40
 800977e:	2200      	movs	r2, #0
 8009780:	2100      	movs	r1, #0
 8009782:	6878      	ldr	r0, [r7, #4]
 8009784:	f004 f995 	bl	800dab2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	2201      	movs	r2, #1
 800978c:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	2240      	movs	r2, #64	@ 0x40
 8009794:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009798:	2340      	movs	r3, #64	@ 0x40
 800979a:	2200      	movs	r2, #0
 800979c:	2180      	movs	r1, #128	@ 0x80
 800979e:	6878      	ldr	r0, [r7, #4]
 80097a0:	f004 f987 	bl	800dab2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	2201      	movs	r2, #1
 80097a8:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	2240      	movs	r2, #64	@ 0x40
 80097ae:	621a      	str	r2, [r3, #32]

  return ret;
 80097b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80097b2:	4618      	mov	r0, r3
 80097b4:	3710      	adds	r7, #16
 80097b6:	46bd      	mov	sp, r7
 80097b8:	bd80      	pop	{r7, pc}

080097ba <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80097ba:	b480      	push	{r7}
 80097bc:	b083      	sub	sp, #12
 80097be:	af00      	add	r7, sp, #0
 80097c0:	6078      	str	r0, [r7, #4]
 80097c2:	460b      	mov	r3, r1
 80097c4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	78fa      	ldrb	r2, [r7, #3]
 80097ca:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80097cc:	2300      	movs	r3, #0
}
 80097ce:	4618      	mov	r0, r3
 80097d0:	370c      	adds	r7, #12
 80097d2:	46bd      	mov	sp, r7
 80097d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d8:	4770      	bx	lr

080097da <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80097da:	b480      	push	{r7}
 80097dc:	b083      	sub	sp, #12
 80097de:	af00      	add	r7, sp, #0
 80097e0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80097e8:	b2db      	uxtb	r3, r3
 80097ea:	2b04      	cmp	r3, #4
 80097ec:	d006      	beq.n	80097fc <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80097f4:	b2da      	uxtb	r2, r3
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	2204      	movs	r2, #4
 8009800:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8009804:	2300      	movs	r3, #0
}
 8009806:	4618      	mov	r0, r3
 8009808:	370c      	adds	r7, #12
 800980a:	46bd      	mov	sp, r7
 800980c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009810:	4770      	bx	lr

08009812 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009812:	b480      	push	{r7}
 8009814:	b083      	sub	sp, #12
 8009816:	af00      	add	r7, sp, #0
 8009818:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009820:	b2db      	uxtb	r3, r3
 8009822:	2b04      	cmp	r3, #4
 8009824:	d106      	bne.n	8009834 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800982c:	b2da      	uxtb	r2, r3
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8009834:	2300      	movs	r3, #0
}
 8009836:	4618      	mov	r0, r3
 8009838:	370c      	adds	r7, #12
 800983a:	46bd      	mov	sp, r7
 800983c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009840:	4770      	bx	lr

08009842 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009842:	b580      	push	{r7, lr}
 8009844:	b082      	sub	sp, #8
 8009846:	af00      	add	r7, sp, #0
 8009848:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009850:	b2db      	uxtb	r3, r3
 8009852:	2b03      	cmp	r3, #3
 8009854:	d110      	bne.n	8009878 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800985c:	2b00      	cmp	r3, #0
 800985e:	d00b      	beq.n	8009878 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009866:	69db      	ldr	r3, [r3, #28]
 8009868:	2b00      	cmp	r3, #0
 800986a:	d005      	beq.n	8009878 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009872:	69db      	ldr	r3, [r3, #28]
 8009874:	6878      	ldr	r0, [r7, #4]
 8009876:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8009878:	2300      	movs	r3, #0
}
 800987a:	4618      	mov	r0, r3
 800987c:	3708      	adds	r7, #8
 800987e:	46bd      	mov	sp, r7
 8009880:	bd80      	pop	{r7, pc}

08009882 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8009882:	b580      	push	{r7, lr}
 8009884:	b082      	sub	sp, #8
 8009886:	af00      	add	r7, sp, #0
 8009888:	6078      	str	r0, [r7, #4]
 800988a:	460b      	mov	r3, r1
 800988c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	32ae      	adds	r2, #174	@ 0xae
 8009898:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800989c:	2b00      	cmp	r3, #0
 800989e:	d101      	bne.n	80098a4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80098a0:	2303      	movs	r3, #3
 80098a2:	e01c      	b.n	80098de <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80098aa:	b2db      	uxtb	r3, r3
 80098ac:	2b03      	cmp	r3, #3
 80098ae:	d115      	bne.n	80098dc <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	32ae      	adds	r2, #174	@ 0xae
 80098ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098be:	6a1b      	ldr	r3, [r3, #32]
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d00b      	beq.n	80098dc <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	32ae      	adds	r2, #174	@ 0xae
 80098ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098d2:	6a1b      	ldr	r3, [r3, #32]
 80098d4:	78fa      	ldrb	r2, [r7, #3]
 80098d6:	4611      	mov	r1, r2
 80098d8:	6878      	ldr	r0, [r7, #4]
 80098da:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80098dc:	2300      	movs	r3, #0
}
 80098de:	4618      	mov	r0, r3
 80098e0:	3708      	adds	r7, #8
 80098e2:	46bd      	mov	sp, r7
 80098e4:	bd80      	pop	{r7, pc}

080098e6 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80098e6:	b580      	push	{r7, lr}
 80098e8:	b082      	sub	sp, #8
 80098ea:	af00      	add	r7, sp, #0
 80098ec:	6078      	str	r0, [r7, #4]
 80098ee:	460b      	mov	r3, r1
 80098f0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	32ae      	adds	r2, #174	@ 0xae
 80098fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009900:	2b00      	cmp	r3, #0
 8009902:	d101      	bne.n	8009908 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8009904:	2303      	movs	r3, #3
 8009906:	e01c      	b.n	8009942 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800990e:	b2db      	uxtb	r3, r3
 8009910:	2b03      	cmp	r3, #3
 8009912:	d115      	bne.n	8009940 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	32ae      	adds	r2, #174	@ 0xae
 800991e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009922:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009924:	2b00      	cmp	r3, #0
 8009926:	d00b      	beq.n	8009940 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	32ae      	adds	r2, #174	@ 0xae
 8009932:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009936:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009938:	78fa      	ldrb	r2, [r7, #3]
 800993a:	4611      	mov	r1, r2
 800993c:	6878      	ldr	r0, [r7, #4]
 800993e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009940:	2300      	movs	r3, #0
}
 8009942:	4618      	mov	r0, r3
 8009944:	3708      	adds	r7, #8
 8009946:	46bd      	mov	sp, r7
 8009948:	bd80      	pop	{r7, pc}

0800994a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800994a:	b480      	push	{r7}
 800994c:	b083      	sub	sp, #12
 800994e:	af00      	add	r7, sp, #0
 8009950:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009952:	2300      	movs	r3, #0
}
 8009954:	4618      	mov	r0, r3
 8009956:	370c      	adds	r7, #12
 8009958:	46bd      	mov	sp, r7
 800995a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800995e:	4770      	bx	lr

08009960 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8009960:	b580      	push	{r7, lr}
 8009962:	b084      	sub	sp, #16
 8009964:	af00      	add	r7, sp, #0
 8009966:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8009968:	2300      	movs	r3, #0
 800996a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	2201      	movs	r2, #1
 8009970:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800997a:	2b00      	cmp	r3, #0
 800997c:	d00e      	beq.n	800999c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009984:	685b      	ldr	r3, [r3, #4]
 8009986:	687a      	ldr	r2, [r7, #4]
 8009988:	6852      	ldr	r2, [r2, #4]
 800998a:	b2d2      	uxtb	r2, r2
 800998c:	4611      	mov	r1, r2
 800998e:	6878      	ldr	r0, [r7, #4]
 8009990:	4798      	blx	r3
 8009992:	4603      	mov	r3, r0
 8009994:	2b00      	cmp	r3, #0
 8009996:	d001      	beq.n	800999c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8009998:	2303      	movs	r3, #3
 800999a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800999c:	7bfb      	ldrb	r3, [r7, #15]
}
 800999e:	4618      	mov	r0, r3
 80099a0:	3710      	adds	r7, #16
 80099a2:	46bd      	mov	sp, r7
 80099a4:	bd80      	pop	{r7, pc}

080099a6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80099a6:	b480      	push	{r7}
 80099a8:	b083      	sub	sp, #12
 80099aa:	af00      	add	r7, sp, #0
 80099ac:	6078      	str	r0, [r7, #4]
 80099ae:	460b      	mov	r3, r1
 80099b0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80099b2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80099b4:	4618      	mov	r0, r3
 80099b6:	370c      	adds	r7, #12
 80099b8:	46bd      	mov	sp, r7
 80099ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099be:	4770      	bx	lr

080099c0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80099c0:	b480      	push	{r7}
 80099c2:	b083      	sub	sp, #12
 80099c4:	af00      	add	r7, sp, #0
 80099c6:	6078      	str	r0, [r7, #4]
 80099c8:	460b      	mov	r3, r1
 80099ca:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80099cc:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80099ce:	4618      	mov	r0, r3
 80099d0:	370c      	adds	r7, #12
 80099d2:	46bd      	mov	sp, r7
 80099d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d8:	4770      	bx	lr

080099da <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80099da:	b580      	push	{r7, lr}
 80099dc:	b086      	sub	sp, #24
 80099de:	af00      	add	r7, sp, #0
 80099e0:	6078      	str	r0, [r7, #4]
 80099e2:	460b      	mov	r3, r1
 80099e4:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80099ee:	2300      	movs	r3, #0
 80099f0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	885b      	ldrh	r3, [r3, #2]
 80099f6:	b29b      	uxth	r3, r3
 80099f8:	68fa      	ldr	r2, [r7, #12]
 80099fa:	7812      	ldrb	r2, [r2, #0]
 80099fc:	4293      	cmp	r3, r2
 80099fe:	d91f      	bls.n	8009a40 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	781b      	ldrb	r3, [r3, #0]
 8009a04:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8009a06:	e013      	b.n	8009a30 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8009a08:	f107 030a 	add.w	r3, r7, #10
 8009a0c:	4619      	mov	r1, r3
 8009a0e:	6978      	ldr	r0, [r7, #20]
 8009a10:	f000 f81b 	bl	8009a4a <USBD_GetNextDesc>
 8009a14:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8009a16:	697b      	ldr	r3, [r7, #20]
 8009a18:	785b      	ldrb	r3, [r3, #1]
 8009a1a:	2b05      	cmp	r3, #5
 8009a1c:	d108      	bne.n	8009a30 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8009a1e:	697b      	ldr	r3, [r7, #20]
 8009a20:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8009a22:	693b      	ldr	r3, [r7, #16]
 8009a24:	789b      	ldrb	r3, [r3, #2]
 8009a26:	78fa      	ldrb	r2, [r7, #3]
 8009a28:	429a      	cmp	r2, r3
 8009a2a:	d008      	beq.n	8009a3e <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8009a2c:	2300      	movs	r3, #0
 8009a2e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	885b      	ldrh	r3, [r3, #2]
 8009a34:	b29a      	uxth	r2, r3
 8009a36:	897b      	ldrh	r3, [r7, #10]
 8009a38:	429a      	cmp	r2, r3
 8009a3a:	d8e5      	bhi.n	8009a08 <USBD_GetEpDesc+0x2e>
 8009a3c:	e000      	b.n	8009a40 <USBD_GetEpDesc+0x66>
          break;
 8009a3e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8009a40:	693b      	ldr	r3, [r7, #16]
}
 8009a42:	4618      	mov	r0, r3
 8009a44:	3718      	adds	r7, #24
 8009a46:	46bd      	mov	sp, r7
 8009a48:	bd80      	pop	{r7, pc}

08009a4a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8009a4a:	b480      	push	{r7}
 8009a4c:	b085      	sub	sp, #20
 8009a4e:	af00      	add	r7, sp, #0
 8009a50:	6078      	str	r0, [r7, #4]
 8009a52:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8009a58:	683b      	ldr	r3, [r7, #0]
 8009a5a:	881b      	ldrh	r3, [r3, #0]
 8009a5c:	68fa      	ldr	r2, [r7, #12]
 8009a5e:	7812      	ldrb	r2, [r2, #0]
 8009a60:	4413      	add	r3, r2
 8009a62:	b29a      	uxth	r2, r3
 8009a64:	683b      	ldr	r3, [r7, #0]
 8009a66:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	781b      	ldrb	r3, [r3, #0]
 8009a6c:	461a      	mov	r2, r3
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	4413      	add	r3, r2
 8009a72:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009a74:	68fb      	ldr	r3, [r7, #12]
}
 8009a76:	4618      	mov	r0, r3
 8009a78:	3714      	adds	r7, #20
 8009a7a:	46bd      	mov	sp, r7
 8009a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a80:	4770      	bx	lr

08009a82 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009a82:	b480      	push	{r7}
 8009a84:	b087      	sub	sp, #28
 8009a86:	af00      	add	r7, sp, #0
 8009a88:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009a8e:	697b      	ldr	r3, [r7, #20]
 8009a90:	781b      	ldrb	r3, [r3, #0]
 8009a92:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009a94:	697b      	ldr	r3, [r7, #20]
 8009a96:	3301      	adds	r3, #1
 8009a98:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009a9a:	697b      	ldr	r3, [r7, #20]
 8009a9c:	781b      	ldrb	r3, [r3, #0]
 8009a9e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009aa0:	8a3b      	ldrh	r3, [r7, #16]
 8009aa2:	021b      	lsls	r3, r3, #8
 8009aa4:	b21a      	sxth	r2, r3
 8009aa6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009aaa:	4313      	orrs	r3, r2
 8009aac:	b21b      	sxth	r3, r3
 8009aae:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009ab0:	89fb      	ldrh	r3, [r7, #14]
}
 8009ab2:	4618      	mov	r0, r3
 8009ab4:	371c      	adds	r7, #28
 8009ab6:	46bd      	mov	sp, r7
 8009ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009abc:	4770      	bx	lr
	...

08009ac0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ac0:	b580      	push	{r7, lr}
 8009ac2:	b084      	sub	sp, #16
 8009ac4:	af00      	add	r7, sp, #0
 8009ac6:	6078      	str	r0, [r7, #4]
 8009ac8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009aca:	2300      	movs	r3, #0
 8009acc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009ace:	683b      	ldr	r3, [r7, #0]
 8009ad0:	781b      	ldrb	r3, [r3, #0]
 8009ad2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009ad6:	2b40      	cmp	r3, #64	@ 0x40
 8009ad8:	d005      	beq.n	8009ae6 <USBD_StdDevReq+0x26>
 8009ada:	2b40      	cmp	r3, #64	@ 0x40
 8009adc:	d857      	bhi.n	8009b8e <USBD_StdDevReq+0xce>
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d00f      	beq.n	8009b02 <USBD_StdDevReq+0x42>
 8009ae2:	2b20      	cmp	r3, #32
 8009ae4:	d153      	bne.n	8009b8e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	32ae      	adds	r2, #174	@ 0xae
 8009af0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009af4:	689b      	ldr	r3, [r3, #8]
 8009af6:	6839      	ldr	r1, [r7, #0]
 8009af8:	6878      	ldr	r0, [r7, #4]
 8009afa:	4798      	blx	r3
 8009afc:	4603      	mov	r3, r0
 8009afe:	73fb      	strb	r3, [r7, #15]
      break;
 8009b00:	e04a      	b.n	8009b98 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009b02:	683b      	ldr	r3, [r7, #0]
 8009b04:	785b      	ldrb	r3, [r3, #1]
 8009b06:	2b09      	cmp	r3, #9
 8009b08:	d83b      	bhi.n	8009b82 <USBD_StdDevReq+0xc2>
 8009b0a:	a201      	add	r2, pc, #4	@ (adr r2, 8009b10 <USBD_StdDevReq+0x50>)
 8009b0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b10:	08009b65 	.word	0x08009b65
 8009b14:	08009b79 	.word	0x08009b79
 8009b18:	08009b83 	.word	0x08009b83
 8009b1c:	08009b6f 	.word	0x08009b6f
 8009b20:	08009b83 	.word	0x08009b83
 8009b24:	08009b43 	.word	0x08009b43
 8009b28:	08009b39 	.word	0x08009b39
 8009b2c:	08009b83 	.word	0x08009b83
 8009b30:	08009b5b 	.word	0x08009b5b
 8009b34:	08009b4d 	.word	0x08009b4d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009b38:	6839      	ldr	r1, [r7, #0]
 8009b3a:	6878      	ldr	r0, [r7, #4]
 8009b3c:	f000 fa3c 	bl	8009fb8 <USBD_GetDescriptor>
          break;
 8009b40:	e024      	b.n	8009b8c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009b42:	6839      	ldr	r1, [r7, #0]
 8009b44:	6878      	ldr	r0, [r7, #4]
 8009b46:	f000 fba1 	bl	800a28c <USBD_SetAddress>
          break;
 8009b4a:	e01f      	b.n	8009b8c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009b4c:	6839      	ldr	r1, [r7, #0]
 8009b4e:	6878      	ldr	r0, [r7, #4]
 8009b50:	f000 fbe0 	bl	800a314 <USBD_SetConfig>
 8009b54:	4603      	mov	r3, r0
 8009b56:	73fb      	strb	r3, [r7, #15]
          break;
 8009b58:	e018      	b.n	8009b8c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009b5a:	6839      	ldr	r1, [r7, #0]
 8009b5c:	6878      	ldr	r0, [r7, #4]
 8009b5e:	f000 fc83 	bl	800a468 <USBD_GetConfig>
          break;
 8009b62:	e013      	b.n	8009b8c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009b64:	6839      	ldr	r1, [r7, #0]
 8009b66:	6878      	ldr	r0, [r7, #4]
 8009b68:	f000 fcb4 	bl	800a4d4 <USBD_GetStatus>
          break;
 8009b6c:	e00e      	b.n	8009b8c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009b6e:	6839      	ldr	r1, [r7, #0]
 8009b70:	6878      	ldr	r0, [r7, #4]
 8009b72:	f000 fce3 	bl	800a53c <USBD_SetFeature>
          break;
 8009b76:	e009      	b.n	8009b8c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009b78:	6839      	ldr	r1, [r7, #0]
 8009b7a:	6878      	ldr	r0, [r7, #4]
 8009b7c:	f000 fd07 	bl	800a58e <USBD_ClrFeature>
          break;
 8009b80:	e004      	b.n	8009b8c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8009b82:	6839      	ldr	r1, [r7, #0]
 8009b84:	6878      	ldr	r0, [r7, #4]
 8009b86:	f000 fd5e 	bl	800a646 <USBD_CtlError>
          break;
 8009b8a:	bf00      	nop
      }
      break;
 8009b8c:	e004      	b.n	8009b98 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8009b8e:	6839      	ldr	r1, [r7, #0]
 8009b90:	6878      	ldr	r0, [r7, #4]
 8009b92:	f000 fd58 	bl	800a646 <USBD_CtlError>
      break;
 8009b96:	bf00      	nop
  }

  return ret;
 8009b98:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b9a:	4618      	mov	r0, r3
 8009b9c:	3710      	adds	r7, #16
 8009b9e:	46bd      	mov	sp, r7
 8009ba0:	bd80      	pop	{r7, pc}
 8009ba2:	bf00      	nop

08009ba4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ba4:	b580      	push	{r7, lr}
 8009ba6:	b084      	sub	sp, #16
 8009ba8:	af00      	add	r7, sp, #0
 8009baa:	6078      	str	r0, [r7, #4]
 8009bac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009bae:	2300      	movs	r3, #0
 8009bb0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009bb2:	683b      	ldr	r3, [r7, #0]
 8009bb4:	781b      	ldrb	r3, [r3, #0]
 8009bb6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009bba:	2b40      	cmp	r3, #64	@ 0x40
 8009bbc:	d005      	beq.n	8009bca <USBD_StdItfReq+0x26>
 8009bbe:	2b40      	cmp	r3, #64	@ 0x40
 8009bc0:	d852      	bhi.n	8009c68 <USBD_StdItfReq+0xc4>
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d001      	beq.n	8009bca <USBD_StdItfReq+0x26>
 8009bc6:	2b20      	cmp	r3, #32
 8009bc8:	d14e      	bne.n	8009c68 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009bd0:	b2db      	uxtb	r3, r3
 8009bd2:	3b01      	subs	r3, #1
 8009bd4:	2b02      	cmp	r3, #2
 8009bd6:	d840      	bhi.n	8009c5a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009bd8:	683b      	ldr	r3, [r7, #0]
 8009bda:	889b      	ldrh	r3, [r3, #4]
 8009bdc:	b2db      	uxtb	r3, r3
 8009bde:	2b01      	cmp	r3, #1
 8009be0:	d836      	bhi.n	8009c50 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8009be2:	683b      	ldr	r3, [r7, #0]
 8009be4:	889b      	ldrh	r3, [r3, #4]
 8009be6:	b2db      	uxtb	r3, r3
 8009be8:	4619      	mov	r1, r3
 8009bea:	6878      	ldr	r0, [r7, #4]
 8009bec:	f7ff fedb 	bl	80099a6 <USBD_CoreFindIF>
 8009bf0:	4603      	mov	r3, r0
 8009bf2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009bf4:	7bbb      	ldrb	r3, [r7, #14]
 8009bf6:	2bff      	cmp	r3, #255	@ 0xff
 8009bf8:	d01d      	beq.n	8009c36 <USBD_StdItfReq+0x92>
 8009bfa:	7bbb      	ldrb	r3, [r7, #14]
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d11a      	bne.n	8009c36 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8009c00:	7bba      	ldrb	r2, [r7, #14]
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	32ae      	adds	r2, #174	@ 0xae
 8009c06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c0a:	689b      	ldr	r3, [r3, #8]
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d00f      	beq.n	8009c30 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8009c10:	7bba      	ldrb	r2, [r7, #14]
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009c18:	7bba      	ldrb	r2, [r7, #14]
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	32ae      	adds	r2, #174	@ 0xae
 8009c1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c22:	689b      	ldr	r3, [r3, #8]
 8009c24:	6839      	ldr	r1, [r7, #0]
 8009c26:	6878      	ldr	r0, [r7, #4]
 8009c28:	4798      	blx	r3
 8009c2a:	4603      	mov	r3, r0
 8009c2c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009c2e:	e004      	b.n	8009c3a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8009c30:	2303      	movs	r3, #3
 8009c32:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009c34:	e001      	b.n	8009c3a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8009c36:	2303      	movs	r3, #3
 8009c38:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009c3a:	683b      	ldr	r3, [r7, #0]
 8009c3c:	88db      	ldrh	r3, [r3, #6]
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d110      	bne.n	8009c64 <USBD_StdItfReq+0xc0>
 8009c42:	7bfb      	ldrb	r3, [r7, #15]
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d10d      	bne.n	8009c64 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009c48:	6878      	ldr	r0, [r7, #4]
 8009c4a:	f000 fdc7 	bl	800a7dc <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009c4e:	e009      	b.n	8009c64 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8009c50:	6839      	ldr	r1, [r7, #0]
 8009c52:	6878      	ldr	r0, [r7, #4]
 8009c54:	f000 fcf7 	bl	800a646 <USBD_CtlError>
          break;
 8009c58:	e004      	b.n	8009c64 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8009c5a:	6839      	ldr	r1, [r7, #0]
 8009c5c:	6878      	ldr	r0, [r7, #4]
 8009c5e:	f000 fcf2 	bl	800a646 <USBD_CtlError>
          break;
 8009c62:	e000      	b.n	8009c66 <USBD_StdItfReq+0xc2>
          break;
 8009c64:	bf00      	nop
      }
      break;
 8009c66:	e004      	b.n	8009c72 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8009c68:	6839      	ldr	r1, [r7, #0]
 8009c6a:	6878      	ldr	r0, [r7, #4]
 8009c6c:	f000 fceb 	bl	800a646 <USBD_CtlError>
      break;
 8009c70:	bf00      	nop
  }

  return ret;
 8009c72:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c74:	4618      	mov	r0, r3
 8009c76:	3710      	adds	r7, #16
 8009c78:	46bd      	mov	sp, r7
 8009c7a:	bd80      	pop	{r7, pc}

08009c7c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c7c:	b580      	push	{r7, lr}
 8009c7e:	b084      	sub	sp, #16
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	6078      	str	r0, [r7, #4]
 8009c84:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8009c86:	2300      	movs	r3, #0
 8009c88:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8009c8a:	683b      	ldr	r3, [r7, #0]
 8009c8c:	889b      	ldrh	r3, [r3, #4]
 8009c8e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009c90:	683b      	ldr	r3, [r7, #0]
 8009c92:	781b      	ldrb	r3, [r3, #0]
 8009c94:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009c98:	2b40      	cmp	r3, #64	@ 0x40
 8009c9a:	d007      	beq.n	8009cac <USBD_StdEPReq+0x30>
 8009c9c:	2b40      	cmp	r3, #64	@ 0x40
 8009c9e:	f200 817f 	bhi.w	8009fa0 <USBD_StdEPReq+0x324>
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d02a      	beq.n	8009cfc <USBD_StdEPReq+0x80>
 8009ca6:	2b20      	cmp	r3, #32
 8009ca8:	f040 817a 	bne.w	8009fa0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8009cac:	7bbb      	ldrb	r3, [r7, #14]
 8009cae:	4619      	mov	r1, r3
 8009cb0:	6878      	ldr	r0, [r7, #4]
 8009cb2:	f7ff fe85 	bl	80099c0 <USBD_CoreFindEP>
 8009cb6:	4603      	mov	r3, r0
 8009cb8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009cba:	7b7b      	ldrb	r3, [r7, #13]
 8009cbc:	2bff      	cmp	r3, #255	@ 0xff
 8009cbe:	f000 8174 	beq.w	8009faa <USBD_StdEPReq+0x32e>
 8009cc2:	7b7b      	ldrb	r3, [r7, #13]
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	f040 8170 	bne.w	8009faa <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8009cca:	7b7a      	ldrb	r2, [r7, #13]
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8009cd2:	7b7a      	ldrb	r2, [r7, #13]
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	32ae      	adds	r2, #174	@ 0xae
 8009cd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009cdc:	689b      	ldr	r3, [r3, #8]
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	f000 8163 	beq.w	8009faa <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8009ce4:	7b7a      	ldrb	r2, [r7, #13]
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	32ae      	adds	r2, #174	@ 0xae
 8009cea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009cee:	689b      	ldr	r3, [r3, #8]
 8009cf0:	6839      	ldr	r1, [r7, #0]
 8009cf2:	6878      	ldr	r0, [r7, #4]
 8009cf4:	4798      	blx	r3
 8009cf6:	4603      	mov	r3, r0
 8009cf8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009cfa:	e156      	b.n	8009faa <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009cfc:	683b      	ldr	r3, [r7, #0]
 8009cfe:	785b      	ldrb	r3, [r3, #1]
 8009d00:	2b03      	cmp	r3, #3
 8009d02:	d008      	beq.n	8009d16 <USBD_StdEPReq+0x9a>
 8009d04:	2b03      	cmp	r3, #3
 8009d06:	f300 8145 	bgt.w	8009f94 <USBD_StdEPReq+0x318>
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	f000 809b 	beq.w	8009e46 <USBD_StdEPReq+0x1ca>
 8009d10:	2b01      	cmp	r3, #1
 8009d12:	d03c      	beq.n	8009d8e <USBD_StdEPReq+0x112>
 8009d14:	e13e      	b.n	8009f94 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009d1c:	b2db      	uxtb	r3, r3
 8009d1e:	2b02      	cmp	r3, #2
 8009d20:	d002      	beq.n	8009d28 <USBD_StdEPReq+0xac>
 8009d22:	2b03      	cmp	r3, #3
 8009d24:	d016      	beq.n	8009d54 <USBD_StdEPReq+0xd8>
 8009d26:	e02c      	b.n	8009d82 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009d28:	7bbb      	ldrb	r3, [r7, #14]
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d00d      	beq.n	8009d4a <USBD_StdEPReq+0xce>
 8009d2e:	7bbb      	ldrb	r3, [r7, #14]
 8009d30:	2b80      	cmp	r3, #128	@ 0x80
 8009d32:	d00a      	beq.n	8009d4a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009d34:	7bbb      	ldrb	r3, [r7, #14]
 8009d36:	4619      	mov	r1, r3
 8009d38:	6878      	ldr	r0, [r7, #4]
 8009d3a:	f003 feff 	bl	800db3c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009d3e:	2180      	movs	r1, #128	@ 0x80
 8009d40:	6878      	ldr	r0, [r7, #4]
 8009d42:	f003 fefb 	bl	800db3c <USBD_LL_StallEP>
 8009d46:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009d48:	e020      	b.n	8009d8c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8009d4a:	6839      	ldr	r1, [r7, #0]
 8009d4c:	6878      	ldr	r0, [r7, #4]
 8009d4e:	f000 fc7a 	bl	800a646 <USBD_CtlError>
              break;
 8009d52:	e01b      	b.n	8009d8c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009d54:	683b      	ldr	r3, [r7, #0]
 8009d56:	885b      	ldrh	r3, [r3, #2]
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d10e      	bne.n	8009d7a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009d5c:	7bbb      	ldrb	r3, [r7, #14]
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d00b      	beq.n	8009d7a <USBD_StdEPReq+0xfe>
 8009d62:	7bbb      	ldrb	r3, [r7, #14]
 8009d64:	2b80      	cmp	r3, #128	@ 0x80
 8009d66:	d008      	beq.n	8009d7a <USBD_StdEPReq+0xfe>
 8009d68:	683b      	ldr	r3, [r7, #0]
 8009d6a:	88db      	ldrh	r3, [r3, #6]
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d104      	bne.n	8009d7a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009d70:	7bbb      	ldrb	r3, [r7, #14]
 8009d72:	4619      	mov	r1, r3
 8009d74:	6878      	ldr	r0, [r7, #4]
 8009d76:	f003 fee1 	bl	800db3c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009d7a:	6878      	ldr	r0, [r7, #4]
 8009d7c:	f000 fd2e 	bl	800a7dc <USBD_CtlSendStatus>

              break;
 8009d80:	e004      	b.n	8009d8c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8009d82:	6839      	ldr	r1, [r7, #0]
 8009d84:	6878      	ldr	r0, [r7, #4]
 8009d86:	f000 fc5e 	bl	800a646 <USBD_CtlError>
              break;
 8009d8a:	bf00      	nop
          }
          break;
 8009d8c:	e107      	b.n	8009f9e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009d94:	b2db      	uxtb	r3, r3
 8009d96:	2b02      	cmp	r3, #2
 8009d98:	d002      	beq.n	8009da0 <USBD_StdEPReq+0x124>
 8009d9a:	2b03      	cmp	r3, #3
 8009d9c:	d016      	beq.n	8009dcc <USBD_StdEPReq+0x150>
 8009d9e:	e04b      	b.n	8009e38 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009da0:	7bbb      	ldrb	r3, [r7, #14]
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d00d      	beq.n	8009dc2 <USBD_StdEPReq+0x146>
 8009da6:	7bbb      	ldrb	r3, [r7, #14]
 8009da8:	2b80      	cmp	r3, #128	@ 0x80
 8009daa:	d00a      	beq.n	8009dc2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009dac:	7bbb      	ldrb	r3, [r7, #14]
 8009dae:	4619      	mov	r1, r3
 8009db0:	6878      	ldr	r0, [r7, #4]
 8009db2:	f003 fec3 	bl	800db3c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009db6:	2180      	movs	r1, #128	@ 0x80
 8009db8:	6878      	ldr	r0, [r7, #4]
 8009dba:	f003 febf 	bl	800db3c <USBD_LL_StallEP>
 8009dbe:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009dc0:	e040      	b.n	8009e44 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8009dc2:	6839      	ldr	r1, [r7, #0]
 8009dc4:	6878      	ldr	r0, [r7, #4]
 8009dc6:	f000 fc3e 	bl	800a646 <USBD_CtlError>
              break;
 8009dca:	e03b      	b.n	8009e44 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009dcc:	683b      	ldr	r3, [r7, #0]
 8009dce:	885b      	ldrh	r3, [r3, #2]
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d136      	bne.n	8009e42 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009dd4:	7bbb      	ldrb	r3, [r7, #14]
 8009dd6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d004      	beq.n	8009de8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009dde:	7bbb      	ldrb	r3, [r7, #14]
 8009de0:	4619      	mov	r1, r3
 8009de2:	6878      	ldr	r0, [r7, #4]
 8009de4:	f003 fec9 	bl	800db7a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009de8:	6878      	ldr	r0, [r7, #4]
 8009dea:	f000 fcf7 	bl	800a7dc <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8009dee:	7bbb      	ldrb	r3, [r7, #14]
 8009df0:	4619      	mov	r1, r3
 8009df2:	6878      	ldr	r0, [r7, #4]
 8009df4:	f7ff fde4 	bl	80099c0 <USBD_CoreFindEP>
 8009df8:	4603      	mov	r3, r0
 8009dfa:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009dfc:	7b7b      	ldrb	r3, [r7, #13]
 8009dfe:	2bff      	cmp	r3, #255	@ 0xff
 8009e00:	d01f      	beq.n	8009e42 <USBD_StdEPReq+0x1c6>
 8009e02:	7b7b      	ldrb	r3, [r7, #13]
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d11c      	bne.n	8009e42 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8009e08:	7b7a      	ldrb	r2, [r7, #13]
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8009e10:	7b7a      	ldrb	r2, [r7, #13]
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	32ae      	adds	r2, #174	@ 0xae
 8009e16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e1a:	689b      	ldr	r3, [r3, #8]
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d010      	beq.n	8009e42 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009e20:	7b7a      	ldrb	r2, [r7, #13]
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	32ae      	adds	r2, #174	@ 0xae
 8009e26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e2a:	689b      	ldr	r3, [r3, #8]
 8009e2c:	6839      	ldr	r1, [r7, #0]
 8009e2e:	6878      	ldr	r0, [r7, #4]
 8009e30:	4798      	blx	r3
 8009e32:	4603      	mov	r3, r0
 8009e34:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8009e36:	e004      	b.n	8009e42 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8009e38:	6839      	ldr	r1, [r7, #0]
 8009e3a:	6878      	ldr	r0, [r7, #4]
 8009e3c:	f000 fc03 	bl	800a646 <USBD_CtlError>
              break;
 8009e40:	e000      	b.n	8009e44 <USBD_StdEPReq+0x1c8>
              break;
 8009e42:	bf00      	nop
          }
          break;
 8009e44:	e0ab      	b.n	8009f9e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009e4c:	b2db      	uxtb	r3, r3
 8009e4e:	2b02      	cmp	r3, #2
 8009e50:	d002      	beq.n	8009e58 <USBD_StdEPReq+0x1dc>
 8009e52:	2b03      	cmp	r3, #3
 8009e54:	d032      	beq.n	8009ebc <USBD_StdEPReq+0x240>
 8009e56:	e097      	b.n	8009f88 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009e58:	7bbb      	ldrb	r3, [r7, #14]
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d007      	beq.n	8009e6e <USBD_StdEPReq+0x1f2>
 8009e5e:	7bbb      	ldrb	r3, [r7, #14]
 8009e60:	2b80      	cmp	r3, #128	@ 0x80
 8009e62:	d004      	beq.n	8009e6e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8009e64:	6839      	ldr	r1, [r7, #0]
 8009e66:	6878      	ldr	r0, [r7, #4]
 8009e68:	f000 fbed 	bl	800a646 <USBD_CtlError>
                break;
 8009e6c:	e091      	b.n	8009f92 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009e6e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	da0b      	bge.n	8009e8e <USBD_StdEPReq+0x212>
 8009e76:	7bbb      	ldrb	r3, [r7, #14]
 8009e78:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009e7c:	4613      	mov	r3, r2
 8009e7e:	009b      	lsls	r3, r3, #2
 8009e80:	4413      	add	r3, r2
 8009e82:	009b      	lsls	r3, r3, #2
 8009e84:	3310      	adds	r3, #16
 8009e86:	687a      	ldr	r2, [r7, #4]
 8009e88:	4413      	add	r3, r2
 8009e8a:	3304      	adds	r3, #4
 8009e8c:	e00b      	b.n	8009ea6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009e8e:	7bbb      	ldrb	r3, [r7, #14]
 8009e90:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009e94:	4613      	mov	r3, r2
 8009e96:	009b      	lsls	r3, r3, #2
 8009e98:	4413      	add	r3, r2
 8009e9a:	009b      	lsls	r3, r3, #2
 8009e9c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009ea0:	687a      	ldr	r2, [r7, #4]
 8009ea2:	4413      	add	r3, r2
 8009ea4:	3304      	adds	r3, #4
 8009ea6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009ea8:	68bb      	ldr	r3, [r7, #8]
 8009eaa:	2200      	movs	r2, #0
 8009eac:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009eae:	68bb      	ldr	r3, [r7, #8]
 8009eb0:	2202      	movs	r2, #2
 8009eb2:	4619      	mov	r1, r3
 8009eb4:	6878      	ldr	r0, [r7, #4]
 8009eb6:	f000 fc37 	bl	800a728 <USBD_CtlSendData>
              break;
 8009eba:	e06a      	b.n	8009f92 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009ebc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	da11      	bge.n	8009ee8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009ec4:	7bbb      	ldrb	r3, [r7, #14]
 8009ec6:	f003 020f 	and.w	r2, r3, #15
 8009eca:	6879      	ldr	r1, [r7, #4]
 8009ecc:	4613      	mov	r3, r2
 8009ece:	009b      	lsls	r3, r3, #2
 8009ed0:	4413      	add	r3, r2
 8009ed2:	009b      	lsls	r3, r3, #2
 8009ed4:	440b      	add	r3, r1
 8009ed6:	3324      	adds	r3, #36	@ 0x24
 8009ed8:	881b      	ldrh	r3, [r3, #0]
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d117      	bne.n	8009f0e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009ede:	6839      	ldr	r1, [r7, #0]
 8009ee0:	6878      	ldr	r0, [r7, #4]
 8009ee2:	f000 fbb0 	bl	800a646 <USBD_CtlError>
                  break;
 8009ee6:	e054      	b.n	8009f92 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009ee8:	7bbb      	ldrb	r3, [r7, #14]
 8009eea:	f003 020f 	and.w	r2, r3, #15
 8009eee:	6879      	ldr	r1, [r7, #4]
 8009ef0:	4613      	mov	r3, r2
 8009ef2:	009b      	lsls	r3, r3, #2
 8009ef4:	4413      	add	r3, r2
 8009ef6:	009b      	lsls	r3, r3, #2
 8009ef8:	440b      	add	r3, r1
 8009efa:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009efe:	881b      	ldrh	r3, [r3, #0]
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d104      	bne.n	8009f0e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009f04:	6839      	ldr	r1, [r7, #0]
 8009f06:	6878      	ldr	r0, [r7, #4]
 8009f08:	f000 fb9d 	bl	800a646 <USBD_CtlError>
                  break;
 8009f0c:	e041      	b.n	8009f92 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009f0e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	da0b      	bge.n	8009f2e <USBD_StdEPReq+0x2b2>
 8009f16:	7bbb      	ldrb	r3, [r7, #14]
 8009f18:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009f1c:	4613      	mov	r3, r2
 8009f1e:	009b      	lsls	r3, r3, #2
 8009f20:	4413      	add	r3, r2
 8009f22:	009b      	lsls	r3, r3, #2
 8009f24:	3310      	adds	r3, #16
 8009f26:	687a      	ldr	r2, [r7, #4]
 8009f28:	4413      	add	r3, r2
 8009f2a:	3304      	adds	r3, #4
 8009f2c:	e00b      	b.n	8009f46 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009f2e:	7bbb      	ldrb	r3, [r7, #14]
 8009f30:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009f34:	4613      	mov	r3, r2
 8009f36:	009b      	lsls	r3, r3, #2
 8009f38:	4413      	add	r3, r2
 8009f3a:	009b      	lsls	r3, r3, #2
 8009f3c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009f40:	687a      	ldr	r2, [r7, #4]
 8009f42:	4413      	add	r3, r2
 8009f44:	3304      	adds	r3, #4
 8009f46:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009f48:	7bbb      	ldrb	r3, [r7, #14]
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d002      	beq.n	8009f54 <USBD_StdEPReq+0x2d8>
 8009f4e:	7bbb      	ldrb	r3, [r7, #14]
 8009f50:	2b80      	cmp	r3, #128	@ 0x80
 8009f52:	d103      	bne.n	8009f5c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8009f54:	68bb      	ldr	r3, [r7, #8]
 8009f56:	2200      	movs	r2, #0
 8009f58:	601a      	str	r2, [r3, #0]
 8009f5a:	e00e      	b.n	8009f7a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009f5c:	7bbb      	ldrb	r3, [r7, #14]
 8009f5e:	4619      	mov	r1, r3
 8009f60:	6878      	ldr	r0, [r7, #4]
 8009f62:	f003 fe29 	bl	800dbb8 <USBD_LL_IsStallEP>
 8009f66:	4603      	mov	r3, r0
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d003      	beq.n	8009f74 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8009f6c:	68bb      	ldr	r3, [r7, #8]
 8009f6e:	2201      	movs	r2, #1
 8009f70:	601a      	str	r2, [r3, #0]
 8009f72:	e002      	b.n	8009f7a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8009f74:	68bb      	ldr	r3, [r7, #8]
 8009f76:	2200      	movs	r2, #0
 8009f78:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009f7a:	68bb      	ldr	r3, [r7, #8]
 8009f7c:	2202      	movs	r2, #2
 8009f7e:	4619      	mov	r1, r3
 8009f80:	6878      	ldr	r0, [r7, #4]
 8009f82:	f000 fbd1 	bl	800a728 <USBD_CtlSendData>
              break;
 8009f86:	e004      	b.n	8009f92 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8009f88:	6839      	ldr	r1, [r7, #0]
 8009f8a:	6878      	ldr	r0, [r7, #4]
 8009f8c:	f000 fb5b 	bl	800a646 <USBD_CtlError>
              break;
 8009f90:	bf00      	nop
          }
          break;
 8009f92:	e004      	b.n	8009f9e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8009f94:	6839      	ldr	r1, [r7, #0]
 8009f96:	6878      	ldr	r0, [r7, #4]
 8009f98:	f000 fb55 	bl	800a646 <USBD_CtlError>
          break;
 8009f9c:	bf00      	nop
      }
      break;
 8009f9e:	e005      	b.n	8009fac <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8009fa0:	6839      	ldr	r1, [r7, #0]
 8009fa2:	6878      	ldr	r0, [r7, #4]
 8009fa4:	f000 fb4f 	bl	800a646 <USBD_CtlError>
      break;
 8009fa8:	e000      	b.n	8009fac <USBD_StdEPReq+0x330>
      break;
 8009faa:	bf00      	nop
  }

  return ret;
 8009fac:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fae:	4618      	mov	r0, r3
 8009fb0:	3710      	adds	r7, #16
 8009fb2:	46bd      	mov	sp, r7
 8009fb4:	bd80      	pop	{r7, pc}
	...

08009fb8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009fb8:	b580      	push	{r7, lr}
 8009fba:	b084      	sub	sp, #16
 8009fbc:	af00      	add	r7, sp, #0
 8009fbe:	6078      	str	r0, [r7, #4]
 8009fc0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009fc2:	2300      	movs	r3, #0
 8009fc4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009fc6:	2300      	movs	r3, #0
 8009fc8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009fca:	2300      	movs	r3, #0
 8009fcc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009fce:	683b      	ldr	r3, [r7, #0]
 8009fd0:	885b      	ldrh	r3, [r3, #2]
 8009fd2:	0a1b      	lsrs	r3, r3, #8
 8009fd4:	b29b      	uxth	r3, r3
 8009fd6:	3b01      	subs	r3, #1
 8009fd8:	2b06      	cmp	r3, #6
 8009fda:	f200 8128 	bhi.w	800a22e <USBD_GetDescriptor+0x276>
 8009fde:	a201      	add	r2, pc, #4	@ (adr r2, 8009fe4 <USBD_GetDescriptor+0x2c>)
 8009fe0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fe4:	0800a001 	.word	0x0800a001
 8009fe8:	0800a019 	.word	0x0800a019
 8009fec:	0800a059 	.word	0x0800a059
 8009ff0:	0800a22f 	.word	0x0800a22f
 8009ff4:	0800a22f 	.word	0x0800a22f
 8009ff8:	0800a1cf 	.word	0x0800a1cf
 8009ffc:	0800a1fb 	.word	0x0800a1fb
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	687a      	ldr	r2, [r7, #4]
 800a00a:	7c12      	ldrb	r2, [r2, #16]
 800a00c:	f107 0108 	add.w	r1, r7, #8
 800a010:	4610      	mov	r0, r2
 800a012:	4798      	blx	r3
 800a014:	60f8      	str	r0, [r7, #12]
      break;
 800a016:	e112      	b.n	800a23e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	7c1b      	ldrb	r3, [r3, #16]
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d10d      	bne.n	800a03c <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a026:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a028:	f107 0208 	add.w	r2, r7, #8
 800a02c:	4610      	mov	r0, r2
 800a02e:	4798      	blx	r3
 800a030:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	3301      	adds	r3, #1
 800a036:	2202      	movs	r2, #2
 800a038:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a03a:	e100      	b.n	800a23e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a042:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a044:	f107 0208 	add.w	r2, r7, #8
 800a048:	4610      	mov	r0, r2
 800a04a:	4798      	blx	r3
 800a04c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	3301      	adds	r3, #1
 800a052:	2202      	movs	r2, #2
 800a054:	701a      	strb	r2, [r3, #0]
      break;
 800a056:	e0f2      	b.n	800a23e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a058:	683b      	ldr	r3, [r7, #0]
 800a05a:	885b      	ldrh	r3, [r3, #2]
 800a05c:	b2db      	uxtb	r3, r3
 800a05e:	2b05      	cmp	r3, #5
 800a060:	f200 80ac 	bhi.w	800a1bc <USBD_GetDescriptor+0x204>
 800a064:	a201      	add	r2, pc, #4	@ (adr r2, 800a06c <USBD_GetDescriptor+0xb4>)
 800a066:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a06a:	bf00      	nop
 800a06c:	0800a085 	.word	0x0800a085
 800a070:	0800a0b9 	.word	0x0800a0b9
 800a074:	0800a0ed 	.word	0x0800a0ed
 800a078:	0800a121 	.word	0x0800a121
 800a07c:	0800a155 	.word	0x0800a155
 800a080:	0800a189 	.word	0x0800a189
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a08a:	685b      	ldr	r3, [r3, #4]
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d00b      	beq.n	800a0a8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a096:	685b      	ldr	r3, [r3, #4]
 800a098:	687a      	ldr	r2, [r7, #4]
 800a09a:	7c12      	ldrb	r2, [r2, #16]
 800a09c:	f107 0108 	add.w	r1, r7, #8
 800a0a0:	4610      	mov	r0, r2
 800a0a2:	4798      	blx	r3
 800a0a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a0a6:	e091      	b.n	800a1cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a0a8:	6839      	ldr	r1, [r7, #0]
 800a0aa:	6878      	ldr	r0, [r7, #4]
 800a0ac:	f000 facb 	bl	800a646 <USBD_CtlError>
            err++;
 800a0b0:	7afb      	ldrb	r3, [r7, #11]
 800a0b2:	3301      	adds	r3, #1
 800a0b4:	72fb      	strb	r3, [r7, #11]
          break;
 800a0b6:	e089      	b.n	800a1cc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a0be:	689b      	ldr	r3, [r3, #8]
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d00b      	beq.n	800a0dc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a0ca:	689b      	ldr	r3, [r3, #8]
 800a0cc:	687a      	ldr	r2, [r7, #4]
 800a0ce:	7c12      	ldrb	r2, [r2, #16]
 800a0d0:	f107 0108 	add.w	r1, r7, #8
 800a0d4:	4610      	mov	r0, r2
 800a0d6:	4798      	blx	r3
 800a0d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a0da:	e077      	b.n	800a1cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a0dc:	6839      	ldr	r1, [r7, #0]
 800a0de:	6878      	ldr	r0, [r7, #4]
 800a0e0:	f000 fab1 	bl	800a646 <USBD_CtlError>
            err++;
 800a0e4:	7afb      	ldrb	r3, [r7, #11]
 800a0e6:	3301      	adds	r3, #1
 800a0e8:	72fb      	strb	r3, [r7, #11]
          break;
 800a0ea:	e06f      	b.n	800a1cc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a0f2:	68db      	ldr	r3, [r3, #12]
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d00b      	beq.n	800a110 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a0fe:	68db      	ldr	r3, [r3, #12]
 800a100:	687a      	ldr	r2, [r7, #4]
 800a102:	7c12      	ldrb	r2, [r2, #16]
 800a104:	f107 0108 	add.w	r1, r7, #8
 800a108:	4610      	mov	r0, r2
 800a10a:	4798      	blx	r3
 800a10c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a10e:	e05d      	b.n	800a1cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a110:	6839      	ldr	r1, [r7, #0]
 800a112:	6878      	ldr	r0, [r7, #4]
 800a114:	f000 fa97 	bl	800a646 <USBD_CtlError>
            err++;
 800a118:	7afb      	ldrb	r3, [r7, #11]
 800a11a:	3301      	adds	r3, #1
 800a11c:	72fb      	strb	r3, [r7, #11]
          break;
 800a11e:	e055      	b.n	800a1cc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a126:	691b      	ldr	r3, [r3, #16]
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d00b      	beq.n	800a144 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a132:	691b      	ldr	r3, [r3, #16]
 800a134:	687a      	ldr	r2, [r7, #4]
 800a136:	7c12      	ldrb	r2, [r2, #16]
 800a138:	f107 0108 	add.w	r1, r7, #8
 800a13c:	4610      	mov	r0, r2
 800a13e:	4798      	blx	r3
 800a140:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a142:	e043      	b.n	800a1cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a144:	6839      	ldr	r1, [r7, #0]
 800a146:	6878      	ldr	r0, [r7, #4]
 800a148:	f000 fa7d 	bl	800a646 <USBD_CtlError>
            err++;
 800a14c:	7afb      	ldrb	r3, [r7, #11]
 800a14e:	3301      	adds	r3, #1
 800a150:	72fb      	strb	r3, [r7, #11]
          break;
 800a152:	e03b      	b.n	800a1cc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a15a:	695b      	ldr	r3, [r3, #20]
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d00b      	beq.n	800a178 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a166:	695b      	ldr	r3, [r3, #20]
 800a168:	687a      	ldr	r2, [r7, #4]
 800a16a:	7c12      	ldrb	r2, [r2, #16]
 800a16c:	f107 0108 	add.w	r1, r7, #8
 800a170:	4610      	mov	r0, r2
 800a172:	4798      	blx	r3
 800a174:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a176:	e029      	b.n	800a1cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a178:	6839      	ldr	r1, [r7, #0]
 800a17a:	6878      	ldr	r0, [r7, #4]
 800a17c:	f000 fa63 	bl	800a646 <USBD_CtlError>
            err++;
 800a180:	7afb      	ldrb	r3, [r7, #11]
 800a182:	3301      	adds	r3, #1
 800a184:	72fb      	strb	r3, [r7, #11]
          break;
 800a186:	e021      	b.n	800a1cc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a18e:	699b      	ldr	r3, [r3, #24]
 800a190:	2b00      	cmp	r3, #0
 800a192:	d00b      	beq.n	800a1ac <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a19a:	699b      	ldr	r3, [r3, #24]
 800a19c:	687a      	ldr	r2, [r7, #4]
 800a19e:	7c12      	ldrb	r2, [r2, #16]
 800a1a0:	f107 0108 	add.w	r1, r7, #8
 800a1a4:	4610      	mov	r0, r2
 800a1a6:	4798      	blx	r3
 800a1a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a1aa:	e00f      	b.n	800a1cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a1ac:	6839      	ldr	r1, [r7, #0]
 800a1ae:	6878      	ldr	r0, [r7, #4]
 800a1b0:	f000 fa49 	bl	800a646 <USBD_CtlError>
            err++;
 800a1b4:	7afb      	ldrb	r3, [r7, #11]
 800a1b6:	3301      	adds	r3, #1
 800a1b8:	72fb      	strb	r3, [r7, #11]
          break;
 800a1ba:	e007      	b.n	800a1cc <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800a1bc:	6839      	ldr	r1, [r7, #0]
 800a1be:	6878      	ldr	r0, [r7, #4]
 800a1c0:	f000 fa41 	bl	800a646 <USBD_CtlError>
          err++;
 800a1c4:	7afb      	ldrb	r3, [r7, #11]
 800a1c6:	3301      	adds	r3, #1
 800a1c8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800a1ca:	bf00      	nop
      }
      break;
 800a1cc:	e037      	b.n	800a23e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	7c1b      	ldrb	r3, [r3, #16]
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d109      	bne.n	800a1ea <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a1dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a1de:	f107 0208 	add.w	r2, r7, #8
 800a1e2:	4610      	mov	r0, r2
 800a1e4:	4798      	blx	r3
 800a1e6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a1e8:	e029      	b.n	800a23e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a1ea:	6839      	ldr	r1, [r7, #0]
 800a1ec:	6878      	ldr	r0, [r7, #4]
 800a1ee:	f000 fa2a 	bl	800a646 <USBD_CtlError>
        err++;
 800a1f2:	7afb      	ldrb	r3, [r7, #11]
 800a1f4:	3301      	adds	r3, #1
 800a1f6:	72fb      	strb	r3, [r7, #11]
      break;
 800a1f8:	e021      	b.n	800a23e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	7c1b      	ldrb	r3, [r3, #16]
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d10d      	bne.n	800a21e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a208:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a20a:	f107 0208 	add.w	r2, r7, #8
 800a20e:	4610      	mov	r0, r2
 800a210:	4798      	blx	r3
 800a212:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	3301      	adds	r3, #1
 800a218:	2207      	movs	r2, #7
 800a21a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a21c:	e00f      	b.n	800a23e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a21e:	6839      	ldr	r1, [r7, #0]
 800a220:	6878      	ldr	r0, [r7, #4]
 800a222:	f000 fa10 	bl	800a646 <USBD_CtlError>
        err++;
 800a226:	7afb      	ldrb	r3, [r7, #11]
 800a228:	3301      	adds	r3, #1
 800a22a:	72fb      	strb	r3, [r7, #11]
      break;
 800a22c:	e007      	b.n	800a23e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800a22e:	6839      	ldr	r1, [r7, #0]
 800a230:	6878      	ldr	r0, [r7, #4]
 800a232:	f000 fa08 	bl	800a646 <USBD_CtlError>
      err++;
 800a236:	7afb      	ldrb	r3, [r7, #11]
 800a238:	3301      	adds	r3, #1
 800a23a:	72fb      	strb	r3, [r7, #11]
      break;
 800a23c:	bf00      	nop
  }

  if (err != 0U)
 800a23e:	7afb      	ldrb	r3, [r7, #11]
 800a240:	2b00      	cmp	r3, #0
 800a242:	d11e      	bne.n	800a282 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800a244:	683b      	ldr	r3, [r7, #0]
 800a246:	88db      	ldrh	r3, [r3, #6]
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d016      	beq.n	800a27a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800a24c:	893b      	ldrh	r3, [r7, #8]
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d00e      	beq.n	800a270 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800a252:	683b      	ldr	r3, [r7, #0]
 800a254:	88da      	ldrh	r2, [r3, #6]
 800a256:	893b      	ldrh	r3, [r7, #8]
 800a258:	4293      	cmp	r3, r2
 800a25a:	bf28      	it	cs
 800a25c:	4613      	movcs	r3, r2
 800a25e:	b29b      	uxth	r3, r3
 800a260:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a262:	893b      	ldrh	r3, [r7, #8]
 800a264:	461a      	mov	r2, r3
 800a266:	68f9      	ldr	r1, [r7, #12]
 800a268:	6878      	ldr	r0, [r7, #4]
 800a26a:	f000 fa5d 	bl	800a728 <USBD_CtlSendData>
 800a26e:	e009      	b.n	800a284 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800a270:	6839      	ldr	r1, [r7, #0]
 800a272:	6878      	ldr	r0, [r7, #4]
 800a274:	f000 f9e7 	bl	800a646 <USBD_CtlError>
 800a278:	e004      	b.n	800a284 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800a27a:	6878      	ldr	r0, [r7, #4]
 800a27c:	f000 faae 	bl	800a7dc <USBD_CtlSendStatus>
 800a280:	e000      	b.n	800a284 <USBD_GetDescriptor+0x2cc>
    return;
 800a282:	bf00      	nop
  }
}
 800a284:	3710      	adds	r7, #16
 800a286:	46bd      	mov	sp, r7
 800a288:	bd80      	pop	{r7, pc}
 800a28a:	bf00      	nop

0800a28c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a28c:	b580      	push	{r7, lr}
 800a28e:	b084      	sub	sp, #16
 800a290:	af00      	add	r7, sp, #0
 800a292:	6078      	str	r0, [r7, #4]
 800a294:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a296:	683b      	ldr	r3, [r7, #0]
 800a298:	889b      	ldrh	r3, [r3, #4]
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d131      	bne.n	800a302 <USBD_SetAddress+0x76>
 800a29e:	683b      	ldr	r3, [r7, #0]
 800a2a0:	88db      	ldrh	r3, [r3, #6]
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d12d      	bne.n	800a302 <USBD_SetAddress+0x76>
 800a2a6:	683b      	ldr	r3, [r7, #0]
 800a2a8:	885b      	ldrh	r3, [r3, #2]
 800a2aa:	2b7f      	cmp	r3, #127	@ 0x7f
 800a2ac:	d829      	bhi.n	800a302 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a2ae:	683b      	ldr	r3, [r7, #0]
 800a2b0:	885b      	ldrh	r3, [r3, #2]
 800a2b2:	b2db      	uxtb	r3, r3
 800a2b4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a2b8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a2c0:	b2db      	uxtb	r3, r3
 800a2c2:	2b03      	cmp	r3, #3
 800a2c4:	d104      	bne.n	800a2d0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800a2c6:	6839      	ldr	r1, [r7, #0]
 800a2c8:	6878      	ldr	r0, [r7, #4]
 800a2ca:	f000 f9bc 	bl	800a646 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a2ce:	e01d      	b.n	800a30c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	7bfa      	ldrb	r2, [r7, #15]
 800a2d4:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a2d8:	7bfb      	ldrb	r3, [r7, #15]
 800a2da:	4619      	mov	r1, r3
 800a2dc:	6878      	ldr	r0, [r7, #4]
 800a2de:	f003 fc97 	bl	800dc10 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a2e2:	6878      	ldr	r0, [r7, #4]
 800a2e4:	f000 fa7a 	bl	800a7dc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a2e8:	7bfb      	ldrb	r3, [r7, #15]
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d004      	beq.n	800a2f8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	2202      	movs	r2, #2
 800a2f2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a2f6:	e009      	b.n	800a30c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	2201      	movs	r2, #1
 800a2fc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a300:	e004      	b.n	800a30c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a302:	6839      	ldr	r1, [r7, #0]
 800a304:	6878      	ldr	r0, [r7, #4]
 800a306:	f000 f99e 	bl	800a646 <USBD_CtlError>
  }
}
 800a30a:	bf00      	nop
 800a30c:	bf00      	nop
 800a30e:	3710      	adds	r7, #16
 800a310:	46bd      	mov	sp, r7
 800a312:	bd80      	pop	{r7, pc}

0800a314 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a314:	b580      	push	{r7, lr}
 800a316:	b084      	sub	sp, #16
 800a318:	af00      	add	r7, sp, #0
 800a31a:	6078      	str	r0, [r7, #4]
 800a31c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a31e:	2300      	movs	r3, #0
 800a320:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a322:	683b      	ldr	r3, [r7, #0]
 800a324:	885b      	ldrh	r3, [r3, #2]
 800a326:	b2da      	uxtb	r2, r3
 800a328:	4b4e      	ldr	r3, [pc, #312]	@ (800a464 <USBD_SetConfig+0x150>)
 800a32a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a32c:	4b4d      	ldr	r3, [pc, #308]	@ (800a464 <USBD_SetConfig+0x150>)
 800a32e:	781b      	ldrb	r3, [r3, #0]
 800a330:	2b01      	cmp	r3, #1
 800a332:	d905      	bls.n	800a340 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a334:	6839      	ldr	r1, [r7, #0]
 800a336:	6878      	ldr	r0, [r7, #4]
 800a338:	f000 f985 	bl	800a646 <USBD_CtlError>
    return USBD_FAIL;
 800a33c:	2303      	movs	r3, #3
 800a33e:	e08c      	b.n	800a45a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a346:	b2db      	uxtb	r3, r3
 800a348:	2b02      	cmp	r3, #2
 800a34a:	d002      	beq.n	800a352 <USBD_SetConfig+0x3e>
 800a34c:	2b03      	cmp	r3, #3
 800a34e:	d029      	beq.n	800a3a4 <USBD_SetConfig+0x90>
 800a350:	e075      	b.n	800a43e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800a352:	4b44      	ldr	r3, [pc, #272]	@ (800a464 <USBD_SetConfig+0x150>)
 800a354:	781b      	ldrb	r3, [r3, #0]
 800a356:	2b00      	cmp	r3, #0
 800a358:	d020      	beq.n	800a39c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800a35a:	4b42      	ldr	r3, [pc, #264]	@ (800a464 <USBD_SetConfig+0x150>)
 800a35c:	781b      	ldrb	r3, [r3, #0]
 800a35e:	461a      	mov	r2, r3
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a364:	4b3f      	ldr	r3, [pc, #252]	@ (800a464 <USBD_SetConfig+0x150>)
 800a366:	781b      	ldrb	r3, [r3, #0]
 800a368:	4619      	mov	r1, r3
 800a36a:	6878      	ldr	r0, [r7, #4]
 800a36c:	f7fe ffe3 	bl	8009336 <USBD_SetClassConfig>
 800a370:	4603      	mov	r3, r0
 800a372:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800a374:	7bfb      	ldrb	r3, [r7, #15]
 800a376:	2b00      	cmp	r3, #0
 800a378:	d008      	beq.n	800a38c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800a37a:	6839      	ldr	r1, [r7, #0]
 800a37c:	6878      	ldr	r0, [r7, #4]
 800a37e:	f000 f962 	bl	800a646 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	2202      	movs	r2, #2
 800a386:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a38a:	e065      	b.n	800a458 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a38c:	6878      	ldr	r0, [r7, #4]
 800a38e:	f000 fa25 	bl	800a7dc <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	2203      	movs	r2, #3
 800a396:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800a39a:	e05d      	b.n	800a458 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a39c:	6878      	ldr	r0, [r7, #4]
 800a39e:	f000 fa1d 	bl	800a7dc <USBD_CtlSendStatus>
      break;
 800a3a2:	e059      	b.n	800a458 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a3a4:	4b2f      	ldr	r3, [pc, #188]	@ (800a464 <USBD_SetConfig+0x150>)
 800a3a6:	781b      	ldrb	r3, [r3, #0]
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d112      	bne.n	800a3d2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	2202      	movs	r2, #2
 800a3b0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800a3b4:	4b2b      	ldr	r3, [pc, #172]	@ (800a464 <USBD_SetConfig+0x150>)
 800a3b6:	781b      	ldrb	r3, [r3, #0]
 800a3b8:	461a      	mov	r2, r3
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a3be:	4b29      	ldr	r3, [pc, #164]	@ (800a464 <USBD_SetConfig+0x150>)
 800a3c0:	781b      	ldrb	r3, [r3, #0]
 800a3c2:	4619      	mov	r1, r3
 800a3c4:	6878      	ldr	r0, [r7, #4]
 800a3c6:	f7fe ffd2 	bl	800936e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a3ca:	6878      	ldr	r0, [r7, #4]
 800a3cc:	f000 fa06 	bl	800a7dc <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a3d0:	e042      	b.n	800a458 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800a3d2:	4b24      	ldr	r3, [pc, #144]	@ (800a464 <USBD_SetConfig+0x150>)
 800a3d4:	781b      	ldrb	r3, [r3, #0]
 800a3d6:	461a      	mov	r2, r3
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	685b      	ldr	r3, [r3, #4]
 800a3dc:	429a      	cmp	r2, r3
 800a3de:	d02a      	beq.n	800a436 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	685b      	ldr	r3, [r3, #4]
 800a3e4:	b2db      	uxtb	r3, r3
 800a3e6:	4619      	mov	r1, r3
 800a3e8:	6878      	ldr	r0, [r7, #4]
 800a3ea:	f7fe ffc0 	bl	800936e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a3ee:	4b1d      	ldr	r3, [pc, #116]	@ (800a464 <USBD_SetConfig+0x150>)
 800a3f0:	781b      	ldrb	r3, [r3, #0]
 800a3f2:	461a      	mov	r2, r3
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a3f8:	4b1a      	ldr	r3, [pc, #104]	@ (800a464 <USBD_SetConfig+0x150>)
 800a3fa:	781b      	ldrb	r3, [r3, #0]
 800a3fc:	4619      	mov	r1, r3
 800a3fe:	6878      	ldr	r0, [r7, #4]
 800a400:	f7fe ff99 	bl	8009336 <USBD_SetClassConfig>
 800a404:	4603      	mov	r3, r0
 800a406:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800a408:	7bfb      	ldrb	r3, [r7, #15]
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d00f      	beq.n	800a42e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800a40e:	6839      	ldr	r1, [r7, #0]
 800a410:	6878      	ldr	r0, [r7, #4]
 800a412:	f000 f918 	bl	800a646 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	685b      	ldr	r3, [r3, #4]
 800a41a:	b2db      	uxtb	r3, r3
 800a41c:	4619      	mov	r1, r3
 800a41e:	6878      	ldr	r0, [r7, #4]
 800a420:	f7fe ffa5 	bl	800936e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	2202      	movs	r2, #2
 800a428:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800a42c:	e014      	b.n	800a458 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a42e:	6878      	ldr	r0, [r7, #4]
 800a430:	f000 f9d4 	bl	800a7dc <USBD_CtlSendStatus>
      break;
 800a434:	e010      	b.n	800a458 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a436:	6878      	ldr	r0, [r7, #4]
 800a438:	f000 f9d0 	bl	800a7dc <USBD_CtlSendStatus>
      break;
 800a43c:	e00c      	b.n	800a458 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800a43e:	6839      	ldr	r1, [r7, #0]
 800a440:	6878      	ldr	r0, [r7, #4]
 800a442:	f000 f900 	bl	800a646 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a446:	4b07      	ldr	r3, [pc, #28]	@ (800a464 <USBD_SetConfig+0x150>)
 800a448:	781b      	ldrb	r3, [r3, #0]
 800a44a:	4619      	mov	r1, r3
 800a44c:	6878      	ldr	r0, [r7, #4]
 800a44e:	f7fe ff8e 	bl	800936e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a452:	2303      	movs	r3, #3
 800a454:	73fb      	strb	r3, [r7, #15]
      break;
 800a456:	bf00      	nop
  }

  return ret;
 800a458:	7bfb      	ldrb	r3, [r7, #15]
}
 800a45a:	4618      	mov	r0, r3
 800a45c:	3710      	adds	r7, #16
 800a45e:	46bd      	mov	sp, r7
 800a460:	bd80      	pop	{r7, pc}
 800a462:	bf00      	nop
 800a464:	20000864 	.word	0x20000864

0800a468 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a468:	b580      	push	{r7, lr}
 800a46a:	b082      	sub	sp, #8
 800a46c:	af00      	add	r7, sp, #0
 800a46e:	6078      	str	r0, [r7, #4]
 800a470:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a472:	683b      	ldr	r3, [r7, #0]
 800a474:	88db      	ldrh	r3, [r3, #6]
 800a476:	2b01      	cmp	r3, #1
 800a478:	d004      	beq.n	800a484 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a47a:	6839      	ldr	r1, [r7, #0]
 800a47c:	6878      	ldr	r0, [r7, #4]
 800a47e:	f000 f8e2 	bl	800a646 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a482:	e023      	b.n	800a4cc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a48a:	b2db      	uxtb	r3, r3
 800a48c:	2b02      	cmp	r3, #2
 800a48e:	dc02      	bgt.n	800a496 <USBD_GetConfig+0x2e>
 800a490:	2b00      	cmp	r3, #0
 800a492:	dc03      	bgt.n	800a49c <USBD_GetConfig+0x34>
 800a494:	e015      	b.n	800a4c2 <USBD_GetConfig+0x5a>
 800a496:	2b03      	cmp	r3, #3
 800a498:	d00b      	beq.n	800a4b2 <USBD_GetConfig+0x4a>
 800a49a:	e012      	b.n	800a4c2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	2200      	movs	r2, #0
 800a4a0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	3308      	adds	r3, #8
 800a4a6:	2201      	movs	r2, #1
 800a4a8:	4619      	mov	r1, r3
 800a4aa:	6878      	ldr	r0, [r7, #4]
 800a4ac:	f000 f93c 	bl	800a728 <USBD_CtlSendData>
        break;
 800a4b0:	e00c      	b.n	800a4cc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	3304      	adds	r3, #4
 800a4b6:	2201      	movs	r2, #1
 800a4b8:	4619      	mov	r1, r3
 800a4ba:	6878      	ldr	r0, [r7, #4]
 800a4bc:	f000 f934 	bl	800a728 <USBD_CtlSendData>
        break;
 800a4c0:	e004      	b.n	800a4cc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a4c2:	6839      	ldr	r1, [r7, #0]
 800a4c4:	6878      	ldr	r0, [r7, #4]
 800a4c6:	f000 f8be 	bl	800a646 <USBD_CtlError>
        break;
 800a4ca:	bf00      	nop
}
 800a4cc:	bf00      	nop
 800a4ce:	3708      	adds	r7, #8
 800a4d0:	46bd      	mov	sp, r7
 800a4d2:	bd80      	pop	{r7, pc}

0800a4d4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a4d4:	b580      	push	{r7, lr}
 800a4d6:	b082      	sub	sp, #8
 800a4d8:	af00      	add	r7, sp, #0
 800a4da:	6078      	str	r0, [r7, #4]
 800a4dc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a4e4:	b2db      	uxtb	r3, r3
 800a4e6:	3b01      	subs	r3, #1
 800a4e8:	2b02      	cmp	r3, #2
 800a4ea:	d81e      	bhi.n	800a52a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a4ec:	683b      	ldr	r3, [r7, #0]
 800a4ee:	88db      	ldrh	r3, [r3, #6]
 800a4f0:	2b02      	cmp	r3, #2
 800a4f2:	d004      	beq.n	800a4fe <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a4f4:	6839      	ldr	r1, [r7, #0]
 800a4f6:	6878      	ldr	r0, [r7, #4]
 800a4f8:	f000 f8a5 	bl	800a646 <USBD_CtlError>
        break;
 800a4fc:	e01a      	b.n	800a534 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	2201      	movs	r2, #1
 800a502:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d005      	beq.n	800a51a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	68db      	ldr	r3, [r3, #12]
 800a512:	f043 0202 	orr.w	r2, r3, #2
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	330c      	adds	r3, #12
 800a51e:	2202      	movs	r2, #2
 800a520:	4619      	mov	r1, r3
 800a522:	6878      	ldr	r0, [r7, #4]
 800a524:	f000 f900 	bl	800a728 <USBD_CtlSendData>
      break;
 800a528:	e004      	b.n	800a534 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a52a:	6839      	ldr	r1, [r7, #0]
 800a52c:	6878      	ldr	r0, [r7, #4]
 800a52e:	f000 f88a 	bl	800a646 <USBD_CtlError>
      break;
 800a532:	bf00      	nop
  }
}
 800a534:	bf00      	nop
 800a536:	3708      	adds	r7, #8
 800a538:	46bd      	mov	sp, r7
 800a53a:	bd80      	pop	{r7, pc}

0800a53c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a53c:	b580      	push	{r7, lr}
 800a53e:	b082      	sub	sp, #8
 800a540:	af00      	add	r7, sp, #0
 800a542:	6078      	str	r0, [r7, #4]
 800a544:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a546:	683b      	ldr	r3, [r7, #0]
 800a548:	885b      	ldrh	r3, [r3, #2]
 800a54a:	2b01      	cmp	r3, #1
 800a54c:	d107      	bne.n	800a55e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	2201      	movs	r2, #1
 800a552:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a556:	6878      	ldr	r0, [r7, #4]
 800a558:	f000 f940 	bl	800a7dc <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800a55c:	e013      	b.n	800a586 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800a55e:	683b      	ldr	r3, [r7, #0]
 800a560:	885b      	ldrh	r3, [r3, #2]
 800a562:	2b02      	cmp	r3, #2
 800a564:	d10b      	bne.n	800a57e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800a566:	683b      	ldr	r3, [r7, #0]
 800a568:	889b      	ldrh	r3, [r3, #4]
 800a56a:	0a1b      	lsrs	r3, r3, #8
 800a56c:	b29b      	uxth	r3, r3
 800a56e:	b2da      	uxtb	r2, r3
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800a576:	6878      	ldr	r0, [r7, #4]
 800a578:	f000 f930 	bl	800a7dc <USBD_CtlSendStatus>
}
 800a57c:	e003      	b.n	800a586 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800a57e:	6839      	ldr	r1, [r7, #0]
 800a580:	6878      	ldr	r0, [r7, #4]
 800a582:	f000 f860 	bl	800a646 <USBD_CtlError>
}
 800a586:	bf00      	nop
 800a588:	3708      	adds	r7, #8
 800a58a:	46bd      	mov	sp, r7
 800a58c:	bd80      	pop	{r7, pc}

0800a58e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a58e:	b580      	push	{r7, lr}
 800a590:	b082      	sub	sp, #8
 800a592:	af00      	add	r7, sp, #0
 800a594:	6078      	str	r0, [r7, #4]
 800a596:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a59e:	b2db      	uxtb	r3, r3
 800a5a0:	3b01      	subs	r3, #1
 800a5a2:	2b02      	cmp	r3, #2
 800a5a4:	d80b      	bhi.n	800a5be <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a5a6:	683b      	ldr	r3, [r7, #0]
 800a5a8:	885b      	ldrh	r3, [r3, #2]
 800a5aa:	2b01      	cmp	r3, #1
 800a5ac:	d10c      	bne.n	800a5c8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	2200      	movs	r2, #0
 800a5b2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a5b6:	6878      	ldr	r0, [r7, #4]
 800a5b8:	f000 f910 	bl	800a7dc <USBD_CtlSendStatus>
      }
      break;
 800a5bc:	e004      	b.n	800a5c8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a5be:	6839      	ldr	r1, [r7, #0]
 800a5c0:	6878      	ldr	r0, [r7, #4]
 800a5c2:	f000 f840 	bl	800a646 <USBD_CtlError>
      break;
 800a5c6:	e000      	b.n	800a5ca <USBD_ClrFeature+0x3c>
      break;
 800a5c8:	bf00      	nop
  }
}
 800a5ca:	bf00      	nop
 800a5cc:	3708      	adds	r7, #8
 800a5ce:	46bd      	mov	sp, r7
 800a5d0:	bd80      	pop	{r7, pc}

0800a5d2 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a5d2:	b580      	push	{r7, lr}
 800a5d4:	b084      	sub	sp, #16
 800a5d6:	af00      	add	r7, sp, #0
 800a5d8:	6078      	str	r0, [r7, #4]
 800a5da:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a5dc:	683b      	ldr	r3, [r7, #0]
 800a5de:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	781a      	ldrb	r2, [r3, #0]
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	3301      	adds	r3, #1
 800a5ec:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	781a      	ldrb	r2, [r3, #0]
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	3301      	adds	r3, #1
 800a5fa:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a5fc:	68f8      	ldr	r0, [r7, #12]
 800a5fe:	f7ff fa40 	bl	8009a82 <SWAPBYTE>
 800a602:	4603      	mov	r3, r0
 800a604:	461a      	mov	r2, r3
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	3301      	adds	r3, #1
 800a60e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	3301      	adds	r3, #1
 800a614:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a616:	68f8      	ldr	r0, [r7, #12]
 800a618:	f7ff fa33 	bl	8009a82 <SWAPBYTE>
 800a61c:	4603      	mov	r3, r0
 800a61e:	461a      	mov	r2, r3
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	3301      	adds	r3, #1
 800a628:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	3301      	adds	r3, #1
 800a62e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a630:	68f8      	ldr	r0, [r7, #12]
 800a632:	f7ff fa26 	bl	8009a82 <SWAPBYTE>
 800a636:	4603      	mov	r3, r0
 800a638:	461a      	mov	r2, r3
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	80da      	strh	r2, [r3, #6]
}
 800a63e:	bf00      	nop
 800a640:	3710      	adds	r7, #16
 800a642:	46bd      	mov	sp, r7
 800a644:	bd80      	pop	{r7, pc}

0800a646 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a646:	b580      	push	{r7, lr}
 800a648:	b082      	sub	sp, #8
 800a64a:	af00      	add	r7, sp, #0
 800a64c:	6078      	str	r0, [r7, #4]
 800a64e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a650:	2180      	movs	r1, #128	@ 0x80
 800a652:	6878      	ldr	r0, [r7, #4]
 800a654:	f003 fa72 	bl	800db3c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a658:	2100      	movs	r1, #0
 800a65a:	6878      	ldr	r0, [r7, #4]
 800a65c:	f003 fa6e 	bl	800db3c <USBD_LL_StallEP>
}
 800a660:	bf00      	nop
 800a662:	3708      	adds	r7, #8
 800a664:	46bd      	mov	sp, r7
 800a666:	bd80      	pop	{r7, pc}

0800a668 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a668:	b580      	push	{r7, lr}
 800a66a:	b086      	sub	sp, #24
 800a66c:	af00      	add	r7, sp, #0
 800a66e:	60f8      	str	r0, [r7, #12]
 800a670:	60b9      	str	r1, [r7, #8]
 800a672:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a674:	2300      	movs	r3, #0
 800a676:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d036      	beq.n	800a6ec <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800a682:	6938      	ldr	r0, [r7, #16]
 800a684:	f000 f836 	bl	800a6f4 <USBD_GetLen>
 800a688:	4603      	mov	r3, r0
 800a68a:	3301      	adds	r3, #1
 800a68c:	b29b      	uxth	r3, r3
 800a68e:	005b      	lsls	r3, r3, #1
 800a690:	b29a      	uxth	r2, r3
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a696:	7dfb      	ldrb	r3, [r7, #23]
 800a698:	68ba      	ldr	r2, [r7, #8]
 800a69a:	4413      	add	r3, r2
 800a69c:	687a      	ldr	r2, [r7, #4]
 800a69e:	7812      	ldrb	r2, [r2, #0]
 800a6a0:	701a      	strb	r2, [r3, #0]
  idx++;
 800a6a2:	7dfb      	ldrb	r3, [r7, #23]
 800a6a4:	3301      	adds	r3, #1
 800a6a6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a6a8:	7dfb      	ldrb	r3, [r7, #23]
 800a6aa:	68ba      	ldr	r2, [r7, #8]
 800a6ac:	4413      	add	r3, r2
 800a6ae:	2203      	movs	r2, #3
 800a6b0:	701a      	strb	r2, [r3, #0]
  idx++;
 800a6b2:	7dfb      	ldrb	r3, [r7, #23]
 800a6b4:	3301      	adds	r3, #1
 800a6b6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a6b8:	e013      	b.n	800a6e2 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800a6ba:	7dfb      	ldrb	r3, [r7, #23]
 800a6bc:	68ba      	ldr	r2, [r7, #8]
 800a6be:	4413      	add	r3, r2
 800a6c0:	693a      	ldr	r2, [r7, #16]
 800a6c2:	7812      	ldrb	r2, [r2, #0]
 800a6c4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a6c6:	693b      	ldr	r3, [r7, #16]
 800a6c8:	3301      	adds	r3, #1
 800a6ca:	613b      	str	r3, [r7, #16]
    idx++;
 800a6cc:	7dfb      	ldrb	r3, [r7, #23]
 800a6ce:	3301      	adds	r3, #1
 800a6d0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a6d2:	7dfb      	ldrb	r3, [r7, #23]
 800a6d4:	68ba      	ldr	r2, [r7, #8]
 800a6d6:	4413      	add	r3, r2
 800a6d8:	2200      	movs	r2, #0
 800a6da:	701a      	strb	r2, [r3, #0]
    idx++;
 800a6dc:	7dfb      	ldrb	r3, [r7, #23]
 800a6de:	3301      	adds	r3, #1
 800a6e0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a6e2:	693b      	ldr	r3, [r7, #16]
 800a6e4:	781b      	ldrb	r3, [r3, #0]
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d1e7      	bne.n	800a6ba <USBD_GetString+0x52>
 800a6ea:	e000      	b.n	800a6ee <USBD_GetString+0x86>
    return;
 800a6ec:	bf00      	nop
  }
}
 800a6ee:	3718      	adds	r7, #24
 800a6f0:	46bd      	mov	sp, r7
 800a6f2:	bd80      	pop	{r7, pc}

0800a6f4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a6f4:	b480      	push	{r7}
 800a6f6:	b085      	sub	sp, #20
 800a6f8:	af00      	add	r7, sp, #0
 800a6fa:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a6fc:	2300      	movs	r3, #0
 800a6fe:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a704:	e005      	b.n	800a712 <USBD_GetLen+0x1e>
  {
    len++;
 800a706:	7bfb      	ldrb	r3, [r7, #15]
 800a708:	3301      	adds	r3, #1
 800a70a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a70c:	68bb      	ldr	r3, [r7, #8]
 800a70e:	3301      	adds	r3, #1
 800a710:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a712:	68bb      	ldr	r3, [r7, #8]
 800a714:	781b      	ldrb	r3, [r3, #0]
 800a716:	2b00      	cmp	r3, #0
 800a718:	d1f5      	bne.n	800a706 <USBD_GetLen+0x12>
  }

  return len;
 800a71a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a71c:	4618      	mov	r0, r3
 800a71e:	3714      	adds	r7, #20
 800a720:	46bd      	mov	sp, r7
 800a722:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a726:	4770      	bx	lr

0800a728 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a728:	b580      	push	{r7, lr}
 800a72a:	b084      	sub	sp, #16
 800a72c:	af00      	add	r7, sp, #0
 800a72e:	60f8      	str	r0, [r7, #12]
 800a730:	60b9      	str	r1, [r7, #8]
 800a732:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	2202      	movs	r2, #2
 800a738:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	687a      	ldr	r2, [r7, #4]
 800a740:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	687a      	ldr	r2, [r7, #4]
 800a746:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	68ba      	ldr	r2, [r7, #8]
 800a74c:	2100      	movs	r1, #0
 800a74e:	68f8      	ldr	r0, [r7, #12]
 800a750:	f003 fa7d 	bl	800dc4e <USBD_LL_Transmit>

  return USBD_OK;
 800a754:	2300      	movs	r3, #0
}
 800a756:	4618      	mov	r0, r3
 800a758:	3710      	adds	r7, #16
 800a75a:	46bd      	mov	sp, r7
 800a75c:	bd80      	pop	{r7, pc}

0800a75e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a75e:	b580      	push	{r7, lr}
 800a760:	b084      	sub	sp, #16
 800a762:	af00      	add	r7, sp, #0
 800a764:	60f8      	str	r0, [r7, #12]
 800a766:	60b9      	str	r1, [r7, #8]
 800a768:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	68ba      	ldr	r2, [r7, #8]
 800a76e:	2100      	movs	r1, #0
 800a770:	68f8      	ldr	r0, [r7, #12]
 800a772:	f003 fa6c 	bl	800dc4e <USBD_LL_Transmit>

  return USBD_OK;
 800a776:	2300      	movs	r3, #0
}
 800a778:	4618      	mov	r0, r3
 800a77a:	3710      	adds	r7, #16
 800a77c:	46bd      	mov	sp, r7
 800a77e:	bd80      	pop	{r7, pc}

0800a780 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a780:	b580      	push	{r7, lr}
 800a782:	b084      	sub	sp, #16
 800a784:	af00      	add	r7, sp, #0
 800a786:	60f8      	str	r0, [r7, #12]
 800a788:	60b9      	str	r1, [r7, #8]
 800a78a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	2203      	movs	r2, #3
 800a790:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	687a      	ldr	r2, [r7, #4]
 800a798:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	687a      	ldr	r2, [r7, #4]
 800a7a0:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	68ba      	ldr	r2, [r7, #8]
 800a7a8:	2100      	movs	r1, #0
 800a7aa:	68f8      	ldr	r0, [r7, #12]
 800a7ac:	f003 fa70 	bl	800dc90 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a7b0:	2300      	movs	r3, #0
}
 800a7b2:	4618      	mov	r0, r3
 800a7b4:	3710      	adds	r7, #16
 800a7b6:	46bd      	mov	sp, r7
 800a7b8:	bd80      	pop	{r7, pc}

0800a7ba <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a7ba:	b580      	push	{r7, lr}
 800a7bc:	b084      	sub	sp, #16
 800a7be:	af00      	add	r7, sp, #0
 800a7c0:	60f8      	str	r0, [r7, #12]
 800a7c2:	60b9      	str	r1, [r7, #8]
 800a7c4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	68ba      	ldr	r2, [r7, #8]
 800a7ca:	2100      	movs	r1, #0
 800a7cc:	68f8      	ldr	r0, [r7, #12]
 800a7ce:	f003 fa5f 	bl	800dc90 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a7d2:	2300      	movs	r3, #0
}
 800a7d4:	4618      	mov	r0, r3
 800a7d6:	3710      	adds	r7, #16
 800a7d8:	46bd      	mov	sp, r7
 800a7da:	bd80      	pop	{r7, pc}

0800a7dc <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a7dc:	b580      	push	{r7, lr}
 800a7de:	b082      	sub	sp, #8
 800a7e0:	af00      	add	r7, sp, #0
 800a7e2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	2204      	movs	r2, #4
 800a7e8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a7ec:	2300      	movs	r3, #0
 800a7ee:	2200      	movs	r2, #0
 800a7f0:	2100      	movs	r1, #0
 800a7f2:	6878      	ldr	r0, [r7, #4]
 800a7f4:	f003 fa2b 	bl	800dc4e <USBD_LL_Transmit>

  return USBD_OK;
 800a7f8:	2300      	movs	r3, #0
}
 800a7fa:	4618      	mov	r0, r3
 800a7fc:	3708      	adds	r7, #8
 800a7fe:	46bd      	mov	sp, r7
 800a800:	bd80      	pop	{r7, pc}

0800a802 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a802:	b580      	push	{r7, lr}
 800a804:	b082      	sub	sp, #8
 800a806:	af00      	add	r7, sp, #0
 800a808:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	2205      	movs	r2, #5
 800a80e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a812:	2300      	movs	r3, #0
 800a814:	2200      	movs	r2, #0
 800a816:	2100      	movs	r1, #0
 800a818:	6878      	ldr	r0, [r7, #4]
 800a81a:	f003 fa39 	bl	800dc90 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a81e:	2300      	movs	r3, #0
}
 800a820:	4618      	mov	r0, r3
 800a822:	3708      	adds	r7, #8
 800a824:	46bd      	mov	sp, r7
 800a826:	bd80      	pop	{r7, pc}

0800a828 <__NVIC_SetPriority>:
{
 800a828:	b480      	push	{r7}
 800a82a:	b083      	sub	sp, #12
 800a82c:	af00      	add	r7, sp, #0
 800a82e:	4603      	mov	r3, r0
 800a830:	6039      	str	r1, [r7, #0]
 800a832:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a834:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a838:	2b00      	cmp	r3, #0
 800a83a:	db0a      	blt.n	800a852 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a83c:	683b      	ldr	r3, [r7, #0]
 800a83e:	b2da      	uxtb	r2, r3
 800a840:	490c      	ldr	r1, [pc, #48]	@ (800a874 <__NVIC_SetPriority+0x4c>)
 800a842:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a846:	0112      	lsls	r2, r2, #4
 800a848:	b2d2      	uxtb	r2, r2
 800a84a:	440b      	add	r3, r1
 800a84c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800a850:	e00a      	b.n	800a868 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a852:	683b      	ldr	r3, [r7, #0]
 800a854:	b2da      	uxtb	r2, r3
 800a856:	4908      	ldr	r1, [pc, #32]	@ (800a878 <__NVIC_SetPriority+0x50>)
 800a858:	79fb      	ldrb	r3, [r7, #7]
 800a85a:	f003 030f 	and.w	r3, r3, #15
 800a85e:	3b04      	subs	r3, #4
 800a860:	0112      	lsls	r2, r2, #4
 800a862:	b2d2      	uxtb	r2, r2
 800a864:	440b      	add	r3, r1
 800a866:	761a      	strb	r2, [r3, #24]
}
 800a868:	bf00      	nop
 800a86a:	370c      	adds	r7, #12
 800a86c:	46bd      	mov	sp, r7
 800a86e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a872:	4770      	bx	lr
 800a874:	e000e100 	.word	0xe000e100
 800a878:	e000ed00 	.word	0xe000ed00

0800a87c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800a87c:	b580      	push	{r7, lr}
 800a87e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800a880:	4b05      	ldr	r3, [pc, #20]	@ (800a898 <SysTick_Handler+0x1c>)
 800a882:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800a884:	f001 fd18 	bl	800c2b8 <xTaskGetSchedulerState>
 800a888:	4603      	mov	r3, r0
 800a88a:	2b01      	cmp	r3, #1
 800a88c:	d001      	beq.n	800a892 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800a88e:	f002 fb13 	bl	800ceb8 <xPortSysTickHandler>
  }
}
 800a892:	bf00      	nop
 800a894:	bd80      	pop	{r7, pc}
 800a896:	bf00      	nop
 800a898:	e000e010 	.word	0xe000e010

0800a89c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800a89c:	b580      	push	{r7, lr}
 800a89e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800a8a0:	2100      	movs	r1, #0
 800a8a2:	f06f 0004 	mvn.w	r0, #4
 800a8a6:	f7ff ffbf 	bl	800a828 <__NVIC_SetPriority>
#endif
}
 800a8aa:	bf00      	nop
 800a8ac:	bd80      	pop	{r7, pc}
	...

0800a8b0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800a8b0:	b480      	push	{r7}
 800a8b2:	b083      	sub	sp, #12
 800a8b4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a8b6:	f3ef 8305 	mrs	r3, IPSR
 800a8ba:	603b      	str	r3, [r7, #0]
  return(result);
 800a8bc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d003      	beq.n	800a8ca <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800a8c2:	f06f 0305 	mvn.w	r3, #5
 800a8c6:	607b      	str	r3, [r7, #4]
 800a8c8:	e00c      	b.n	800a8e4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800a8ca:	4b0a      	ldr	r3, [pc, #40]	@ (800a8f4 <osKernelInitialize+0x44>)
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d105      	bne.n	800a8de <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800a8d2:	4b08      	ldr	r3, [pc, #32]	@ (800a8f4 <osKernelInitialize+0x44>)
 800a8d4:	2201      	movs	r2, #1
 800a8d6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a8d8:	2300      	movs	r3, #0
 800a8da:	607b      	str	r3, [r7, #4]
 800a8dc:	e002      	b.n	800a8e4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800a8de:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a8e2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a8e4:	687b      	ldr	r3, [r7, #4]
}
 800a8e6:	4618      	mov	r0, r3
 800a8e8:	370c      	adds	r7, #12
 800a8ea:	46bd      	mov	sp, r7
 800a8ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f0:	4770      	bx	lr
 800a8f2:	bf00      	nop
 800a8f4:	20000868 	.word	0x20000868

0800a8f8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800a8f8:	b580      	push	{r7, lr}
 800a8fa:	b082      	sub	sp, #8
 800a8fc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a8fe:	f3ef 8305 	mrs	r3, IPSR
 800a902:	603b      	str	r3, [r7, #0]
  return(result);
 800a904:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a906:	2b00      	cmp	r3, #0
 800a908:	d003      	beq.n	800a912 <osKernelStart+0x1a>
    stat = osErrorISR;
 800a90a:	f06f 0305 	mvn.w	r3, #5
 800a90e:	607b      	str	r3, [r7, #4]
 800a910:	e010      	b.n	800a934 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800a912:	4b0b      	ldr	r3, [pc, #44]	@ (800a940 <osKernelStart+0x48>)
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	2b01      	cmp	r3, #1
 800a918:	d109      	bne.n	800a92e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800a91a:	f7ff ffbf 	bl	800a89c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800a91e:	4b08      	ldr	r3, [pc, #32]	@ (800a940 <osKernelStart+0x48>)
 800a920:	2202      	movs	r2, #2
 800a922:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800a924:	f001 f87a 	bl	800ba1c <vTaskStartScheduler>
      stat = osOK;
 800a928:	2300      	movs	r3, #0
 800a92a:	607b      	str	r3, [r7, #4]
 800a92c:	e002      	b.n	800a934 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800a92e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a932:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a934:	687b      	ldr	r3, [r7, #4]
}
 800a936:	4618      	mov	r0, r3
 800a938:	3708      	adds	r7, #8
 800a93a:	46bd      	mov	sp, r7
 800a93c:	bd80      	pop	{r7, pc}
 800a93e:	bf00      	nop
 800a940:	20000868 	.word	0x20000868

0800a944 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800a944:	b580      	push	{r7, lr}
 800a946:	b08e      	sub	sp, #56	@ 0x38
 800a948:	af04      	add	r7, sp, #16
 800a94a:	60f8      	str	r0, [r7, #12]
 800a94c:	60b9      	str	r1, [r7, #8]
 800a94e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800a950:	2300      	movs	r3, #0
 800a952:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a954:	f3ef 8305 	mrs	r3, IPSR
 800a958:	617b      	str	r3, [r7, #20]
  return(result);
 800a95a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d17e      	bne.n	800aa5e <osThreadNew+0x11a>
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	2b00      	cmp	r3, #0
 800a964:	d07b      	beq.n	800aa5e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800a966:	2380      	movs	r3, #128	@ 0x80
 800a968:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800a96a:	2318      	movs	r3, #24
 800a96c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800a96e:	2300      	movs	r3, #0
 800a970:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800a972:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a976:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d045      	beq.n	800aa0a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	2b00      	cmp	r3, #0
 800a984:	d002      	beq.n	800a98c <osThreadNew+0x48>
        name = attr->name;
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	699b      	ldr	r3, [r3, #24]
 800a990:	2b00      	cmp	r3, #0
 800a992:	d002      	beq.n	800a99a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	699b      	ldr	r3, [r3, #24]
 800a998:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800a99a:	69fb      	ldr	r3, [r7, #28]
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d008      	beq.n	800a9b2 <osThreadNew+0x6e>
 800a9a0:	69fb      	ldr	r3, [r7, #28]
 800a9a2:	2b38      	cmp	r3, #56	@ 0x38
 800a9a4:	d805      	bhi.n	800a9b2 <osThreadNew+0x6e>
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	685b      	ldr	r3, [r3, #4]
 800a9aa:	f003 0301 	and.w	r3, r3, #1
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d001      	beq.n	800a9b6 <osThreadNew+0x72>
        return (NULL);
 800a9b2:	2300      	movs	r3, #0
 800a9b4:	e054      	b.n	800aa60 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	695b      	ldr	r3, [r3, #20]
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d003      	beq.n	800a9c6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	695b      	ldr	r3, [r3, #20]
 800a9c2:	089b      	lsrs	r3, r3, #2
 800a9c4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	689b      	ldr	r3, [r3, #8]
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d00e      	beq.n	800a9ec <osThreadNew+0xa8>
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	68db      	ldr	r3, [r3, #12]
 800a9d2:	2b5b      	cmp	r3, #91	@ 0x5b
 800a9d4:	d90a      	bls.n	800a9ec <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d006      	beq.n	800a9ec <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	695b      	ldr	r3, [r3, #20]
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d002      	beq.n	800a9ec <osThreadNew+0xa8>
        mem = 1;
 800a9e6:	2301      	movs	r3, #1
 800a9e8:	61bb      	str	r3, [r7, #24]
 800a9ea:	e010      	b.n	800aa0e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	689b      	ldr	r3, [r3, #8]
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d10c      	bne.n	800aa0e <osThreadNew+0xca>
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	68db      	ldr	r3, [r3, #12]
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d108      	bne.n	800aa0e <osThreadNew+0xca>
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	691b      	ldr	r3, [r3, #16]
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d104      	bne.n	800aa0e <osThreadNew+0xca>
          mem = 0;
 800aa04:	2300      	movs	r3, #0
 800aa06:	61bb      	str	r3, [r7, #24]
 800aa08:	e001      	b.n	800aa0e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800aa0a:	2300      	movs	r3, #0
 800aa0c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800aa0e:	69bb      	ldr	r3, [r7, #24]
 800aa10:	2b01      	cmp	r3, #1
 800aa12:	d110      	bne.n	800aa36 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800aa18:	687a      	ldr	r2, [r7, #4]
 800aa1a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800aa1c:	9202      	str	r2, [sp, #8]
 800aa1e:	9301      	str	r3, [sp, #4]
 800aa20:	69fb      	ldr	r3, [r7, #28]
 800aa22:	9300      	str	r3, [sp, #0]
 800aa24:	68bb      	ldr	r3, [r7, #8]
 800aa26:	6a3a      	ldr	r2, [r7, #32]
 800aa28:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800aa2a:	68f8      	ldr	r0, [r7, #12]
 800aa2c:	f000 fe1a 	bl	800b664 <xTaskCreateStatic>
 800aa30:	4603      	mov	r3, r0
 800aa32:	613b      	str	r3, [r7, #16]
 800aa34:	e013      	b.n	800aa5e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800aa36:	69bb      	ldr	r3, [r7, #24]
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d110      	bne.n	800aa5e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800aa3c:	6a3b      	ldr	r3, [r7, #32]
 800aa3e:	b29a      	uxth	r2, r3
 800aa40:	f107 0310 	add.w	r3, r7, #16
 800aa44:	9301      	str	r3, [sp, #4]
 800aa46:	69fb      	ldr	r3, [r7, #28]
 800aa48:	9300      	str	r3, [sp, #0]
 800aa4a:	68bb      	ldr	r3, [r7, #8]
 800aa4c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800aa4e:	68f8      	ldr	r0, [r7, #12]
 800aa50:	f000 fe68 	bl	800b724 <xTaskCreate>
 800aa54:	4603      	mov	r3, r0
 800aa56:	2b01      	cmp	r3, #1
 800aa58:	d001      	beq.n	800aa5e <osThreadNew+0x11a>
            hTask = NULL;
 800aa5a:	2300      	movs	r3, #0
 800aa5c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800aa5e:	693b      	ldr	r3, [r7, #16]
}
 800aa60:	4618      	mov	r0, r3
 800aa62:	3728      	adds	r7, #40	@ 0x28
 800aa64:	46bd      	mov	sp, r7
 800aa66:	bd80      	pop	{r7, pc}

0800aa68 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800aa68:	b580      	push	{r7, lr}
 800aa6a:	b084      	sub	sp, #16
 800aa6c:	af00      	add	r7, sp, #0
 800aa6e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800aa70:	f3ef 8305 	mrs	r3, IPSR
 800aa74:	60bb      	str	r3, [r7, #8]
  return(result);
 800aa76:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d003      	beq.n	800aa84 <osDelay+0x1c>
    stat = osErrorISR;
 800aa7c:	f06f 0305 	mvn.w	r3, #5
 800aa80:	60fb      	str	r3, [r7, #12]
 800aa82:	e007      	b.n	800aa94 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800aa84:	2300      	movs	r3, #0
 800aa86:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d002      	beq.n	800aa94 <osDelay+0x2c>
      vTaskDelay(ticks);
 800aa8e:	6878      	ldr	r0, [r7, #4]
 800aa90:	f000 ff8e 	bl	800b9b0 <vTaskDelay>
    }
  }

  return (stat);
 800aa94:	68fb      	ldr	r3, [r7, #12]
}
 800aa96:	4618      	mov	r0, r3
 800aa98:	3710      	adds	r7, #16
 800aa9a:	46bd      	mov	sp, r7
 800aa9c:	bd80      	pop	{r7, pc}
	...

0800aaa0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800aaa0:	b480      	push	{r7}
 800aaa2:	b085      	sub	sp, #20
 800aaa4:	af00      	add	r7, sp, #0
 800aaa6:	60f8      	str	r0, [r7, #12]
 800aaa8:	60b9      	str	r1, [r7, #8]
 800aaaa:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	4a07      	ldr	r2, [pc, #28]	@ (800aacc <vApplicationGetIdleTaskMemory+0x2c>)
 800aab0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800aab2:	68bb      	ldr	r3, [r7, #8]
 800aab4:	4a06      	ldr	r2, [pc, #24]	@ (800aad0 <vApplicationGetIdleTaskMemory+0x30>)
 800aab6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	2280      	movs	r2, #128	@ 0x80
 800aabc:	601a      	str	r2, [r3, #0]
}
 800aabe:	bf00      	nop
 800aac0:	3714      	adds	r7, #20
 800aac2:	46bd      	mov	sp, r7
 800aac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac8:	4770      	bx	lr
 800aaca:	bf00      	nop
 800aacc:	2000086c 	.word	0x2000086c
 800aad0:	200008c8 	.word	0x200008c8

0800aad4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800aad4:	b480      	push	{r7}
 800aad6:	b085      	sub	sp, #20
 800aad8:	af00      	add	r7, sp, #0
 800aada:	60f8      	str	r0, [r7, #12]
 800aadc:	60b9      	str	r1, [r7, #8]
 800aade:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	4a07      	ldr	r2, [pc, #28]	@ (800ab00 <vApplicationGetTimerTaskMemory+0x2c>)
 800aae4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800aae6:	68bb      	ldr	r3, [r7, #8]
 800aae8:	4a06      	ldr	r2, [pc, #24]	@ (800ab04 <vApplicationGetTimerTaskMemory+0x30>)
 800aaea:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800aaf2:	601a      	str	r2, [r3, #0]
}
 800aaf4:	bf00      	nop
 800aaf6:	3714      	adds	r7, #20
 800aaf8:	46bd      	mov	sp, r7
 800aafa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aafe:	4770      	bx	lr
 800ab00:	20000ac8 	.word	0x20000ac8
 800ab04:	20000b24 	.word	0x20000b24

0800ab08 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800ab08:	b480      	push	{r7}
 800ab0a:	b083      	sub	sp, #12
 800ab0c:	af00      	add	r7, sp, #0
 800ab0e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	f103 0208 	add.w	r2, r3, #8
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ab20:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	f103 0208 	add.w	r2, r3, #8
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	f103 0208 	add.w	r2, r3, #8
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	2200      	movs	r2, #0
 800ab3a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800ab3c:	bf00      	nop
 800ab3e:	370c      	adds	r7, #12
 800ab40:	46bd      	mov	sp, r7
 800ab42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab46:	4770      	bx	lr

0800ab48 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800ab48:	b480      	push	{r7}
 800ab4a:	b083      	sub	sp, #12
 800ab4c:	af00      	add	r7, sp, #0
 800ab4e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	2200      	movs	r2, #0
 800ab54:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800ab56:	bf00      	nop
 800ab58:	370c      	adds	r7, #12
 800ab5a:	46bd      	mov	sp, r7
 800ab5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab60:	4770      	bx	lr

0800ab62 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ab62:	b480      	push	{r7}
 800ab64:	b085      	sub	sp, #20
 800ab66:	af00      	add	r7, sp, #0
 800ab68:	6078      	str	r0, [r7, #4]
 800ab6a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	685b      	ldr	r3, [r3, #4]
 800ab70:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800ab72:	683b      	ldr	r3, [r7, #0]
 800ab74:	68fa      	ldr	r2, [r7, #12]
 800ab76:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	689a      	ldr	r2, [r3, #8]
 800ab7c:	683b      	ldr	r3, [r7, #0]
 800ab7e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	689b      	ldr	r3, [r3, #8]
 800ab84:	683a      	ldr	r2, [r7, #0]
 800ab86:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	683a      	ldr	r2, [r7, #0]
 800ab8c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800ab8e:	683b      	ldr	r3, [r7, #0]
 800ab90:	687a      	ldr	r2, [r7, #4]
 800ab92:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	1c5a      	adds	r2, r3, #1
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	601a      	str	r2, [r3, #0]
}
 800ab9e:	bf00      	nop
 800aba0:	3714      	adds	r7, #20
 800aba2:	46bd      	mov	sp, r7
 800aba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba8:	4770      	bx	lr

0800abaa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800abaa:	b480      	push	{r7}
 800abac:	b085      	sub	sp, #20
 800abae:	af00      	add	r7, sp, #0
 800abb0:	6078      	str	r0, [r7, #4]
 800abb2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800abb4:	683b      	ldr	r3, [r7, #0]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800abba:	68bb      	ldr	r3, [r7, #8]
 800abbc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800abc0:	d103      	bne.n	800abca <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	691b      	ldr	r3, [r3, #16]
 800abc6:	60fb      	str	r3, [r7, #12]
 800abc8:	e00c      	b.n	800abe4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	3308      	adds	r3, #8
 800abce:	60fb      	str	r3, [r7, #12]
 800abd0:	e002      	b.n	800abd8 <vListInsert+0x2e>
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	685b      	ldr	r3, [r3, #4]
 800abd6:	60fb      	str	r3, [r7, #12]
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	685b      	ldr	r3, [r3, #4]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	68ba      	ldr	r2, [r7, #8]
 800abe0:	429a      	cmp	r2, r3
 800abe2:	d2f6      	bcs.n	800abd2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	685a      	ldr	r2, [r3, #4]
 800abe8:	683b      	ldr	r3, [r7, #0]
 800abea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800abec:	683b      	ldr	r3, [r7, #0]
 800abee:	685b      	ldr	r3, [r3, #4]
 800abf0:	683a      	ldr	r2, [r7, #0]
 800abf2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800abf4:	683b      	ldr	r3, [r7, #0]
 800abf6:	68fa      	ldr	r2, [r7, #12]
 800abf8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	683a      	ldr	r2, [r7, #0]
 800abfe:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800ac00:	683b      	ldr	r3, [r7, #0]
 800ac02:	687a      	ldr	r2, [r7, #4]
 800ac04:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	1c5a      	adds	r2, r3, #1
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	601a      	str	r2, [r3, #0]
}
 800ac10:	bf00      	nop
 800ac12:	3714      	adds	r7, #20
 800ac14:	46bd      	mov	sp, r7
 800ac16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac1a:	4770      	bx	lr

0800ac1c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800ac1c:	b480      	push	{r7}
 800ac1e:	b085      	sub	sp, #20
 800ac20:	af00      	add	r7, sp, #0
 800ac22:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	691b      	ldr	r3, [r3, #16]
 800ac28:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	685b      	ldr	r3, [r3, #4]
 800ac2e:	687a      	ldr	r2, [r7, #4]
 800ac30:	6892      	ldr	r2, [r2, #8]
 800ac32:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	689b      	ldr	r3, [r3, #8]
 800ac38:	687a      	ldr	r2, [r7, #4]
 800ac3a:	6852      	ldr	r2, [r2, #4]
 800ac3c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	685b      	ldr	r3, [r3, #4]
 800ac42:	687a      	ldr	r2, [r7, #4]
 800ac44:	429a      	cmp	r2, r3
 800ac46:	d103      	bne.n	800ac50 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	689a      	ldr	r2, [r3, #8]
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	2200      	movs	r2, #0
 800ac54:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	1e5a      	subs	r2, r3, #1
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	681b      	ldr	r3, [r3, #0]
}
 800ac64:	4618      	mov	r0, r3
 800ac66:	3714      	adds	r7, #20
 800ac68:	46bd      	mov	sp, r7
 800ac6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac6e:	4770      	bx	lr

0800ac70 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800ac70:	b580      	push	{r7, lr}
 800ac72:	b084      	sub	sp, #16
 800ac74:	af00      	add	r7, sp, #0
 800ac76:	6078      	str	r0, [r7, #4]
 800ac78:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d10b      	bne.n	800ac9c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800ac84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac88:	f383 8811 	msr	BASEPRI, r3
 800ac8c:	f3bf 8f6f 	isb	sy
 800ac90:	f3bf 8f4f 	dsb	sy
 800ac94:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800ac96:	bf00      	nop
 800ac98:	bf00      	nop
 800ac9a:	e7fd      	b.n	800ac98 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800ac9c:	f002 f87c 	bl	800cd98 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	681a      	ldr	r2, [r3, #0]
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aca8:	68f9      	ldr	r1, [r7, #12]
 800acaa:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800acac:	fb01 f303 	mul.w	r3, r1, r3
 800acb0:	441a      	add	r2, r3
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	2200      	movs	r2, #0
 800acba:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	681a      	ldr	r2, [r3, #0]
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	681a      	ldr	r2, [r3, #0]
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800accc:	3b01      	subs	r3, #1
 800acce:	68f9      	ldr	r1, [r7, #12]
 800acd0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800acd2:	fb01 f303 	mul.w	r3, r1, r3
 800acd6:	441a      	add	r2, r3
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	22ff      	movs	r2, #255	@ 0xff
 800ace0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	22ff      	movs	r2, #255	@ 0xff
 800ace8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800acec:	683b      	ldr	r3, [r7, #0]
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d114      	bne.n	800ad1c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	691b      	ldr	r3, [r3, #16]
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d01a      	beq.n	800ad30 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	3310      	adds	r3, #16
 800acfe:	4618      	mov	r0, r3
 800ad00:	f001 f91a 	bl	800bf38 <xTaskRemoveFromEventList>
 800ad04:	4603      	mov	r3, r0
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d012      	beq.n	800ad30 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800ad0a:	4b0d      	ldr	r3, [pc, #52]	@ (800ad40 <xQueueGenericReset+0xd0>)
 800ad0c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ad10:	601a      	str	r2, [r3, #0]
 800ad12:	f3bf 8f4f 	dsb	sy
 800ad16:	f3bf 8f6f 	isb	sy
 800ad1a:	e009      	b.n	800ad30 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	3310      	adds	r3, #16
 800ad20:	4618      	mov	r0, r3
 800ad22:	f7ff fef1 	bl	800ab08 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	3324      	adds	r3, #36	@ 0x24
 800ad2a:	4618      	mov	r0, r3
 800ad2c:	f7ff feec 	bl	800ab08 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800ad30:	f002 f864 	bl	800cdfc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800ad34:	2301      	movs	r3, #1
}
 800ad36:	4618      	mov	r0, r3
 800ad38:	3710      	adds	r7, #16
 800ad3a:	46bd      	mov	sp, r7
 800ad3c:	bd80      	pop	{r7, pc}
 800ad3e:	bf00      	nop
 800ad40:	e000ed04 	.word	0xe000ed04

0800ad44 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800ad44:	b580      	push	{r7, lr}
 800ad46:	b08e      	sub	sp, #56	@ 0x38
 800ad48:	af02      	add	r7, sp, #8
 800ad4a:	60f8      	str	r0, [r7, #12]
 800ad4c:	60b9      	str	r1, [r7, #8]
 800ad4e:	607a      	str	r2, [r7, #4]
 800ad50:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d10b      	bne.n	800ad70 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800ad58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad5c:	f383 8811 	msr	BASEPRI, r3
 800ad60:	f3bf 8f6f 	isb	sy
 800ad64:	f3bf 8f4f 	dsb	sy
 800ad68:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800ad6a:	bf00      	nop
 800ad6c:	bf00      	nop
 800ad6e:	e7fd      	b.n	800ad6c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800ad70:	683b      	ldr	r3, [r7, #0]
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d10b      	bne.n	800ad8e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800ad76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad7a:	f383 8811 	msr	BASEPRI, r3
 800ad7e:	f3bf 8f6f 	isb	sy
 800ad82:	f3bf 8f4f 	dsb	sy
 800ad86:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800ad88:	bf00      	nop
 800ad8a:	bf00      	nop
 800ad8c:	e7fd      	b.n	800ad8a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d002      	beq.n	800ad9a <xQueueGenericCreateStatic+0x56>
 800ad94:	68bb      	ldr	r3, [r7, #8]
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d001      	beq.n	800ad9e <xQueueGenericCreateStatic+0x5a>
 800ad9a:	2301      	movs	r3, #1
 800ad9c:	e000      	b.n	800ada0 <xQueueGenericCreateStatic+0x5c>
 800ad9e:	2300      	movs	r3, #0
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d10b      	bne.n	800adbc <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800ada4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ada8:	f383 8811 	msr	BASEPRI, r3
 800adac:	f3bf 8f6f 	isb	sy
 800adb0:	f3bf 8f4f 	dsb	sy
 800adb4:	623b      	str	r3, [r7, #32]
}
 800adb6:	bf00      	nop
 800adb8:	bf00      	nop
 800adba:	e7fd      	b.n	800adb8 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d102      	bne.n	800adc8 <xQueueGenericCreateStatic+0x84>
 800adc2:	68bb      	ldr	r3, [r7, #8]
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d101      	bne.n	800adcc <xQueueGenericCreateStatic+0x88>
 800adc8:	2301      	movs	r3, #1
 800adca:	e000      	b.n	800adce <xQueueGenericCreateStatic+0x8a>
 800adcc:	2300      	movs	r3, #0
 800adce:	2b00      	cmp	r3, #0
 800add0:	d10b      	bne.n	800adea <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800add2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800add6:	f383 8811 	msr	BASEPRI, r3
 800adda:	f3bf 8f6f 	isb	sy
 800adde:	f3bf 8f4f 	dsb	sy
 800ade2:	61fb      	str	r3, [r7, #28]
}
 800ade4:	bf00      	nop
 800ade6:	bf00      	nop
 800ade8:	e7fd      	b.n	800ade6 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800adea:	2350      	movs	r3, #80	@ 0x50
 800adec:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800adee:	697b      	ldr	r3, [r7, #20]
 800adf0:	2b50      	cmp	r3, #80	@ 0x50
 800adf2:	d00b      	beq.n	800ae0c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800adf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800adf8:	f383 8811 	msr	BASEPRI, r3
 800adfc:	f3bf 8f6f 	isb	sy
 800ae00:	f3bf 8f4f 	dsb	sy
 800ae04:	61bb      	str	r3, [r7, #24]
}
 800ae06:	bf00      	nop
 800ae08:	bf00      	nop
 800ae0a:	e7fd      	b.n	800ae08 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800ae0c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ae0e:	683b      	ldr	r3, [r7, #0]
 800ae10:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800ae12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d00d      	beq.n	800ae34 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800ae18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae1a:	2201      	movs	r2, #1
 800ae1c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ae20:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800ae24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae26:	9300      	str	r3, [sp, #0]
 800ae28:	4613      	mov	r3, r2
 800ae2a:	687a      	ldr	r2, [r7, #4]
 800ae2c:	68b9      	ldr	r1, [r7, #8]
 800ae2e:	68f8      	ldr	r0, [r7, #12]
 800ae30:	f000 f805 	bl	800ae3e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ae34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800ae36:	4618      	mov	r0, r3
 800ae38:	3730      	adds	r7, #48	@ 0x30
 800ae3a:	46bd      	mov	sp, r7
 800ae3c:	bd80      	pop	{r7, pc}

0800ae3e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800ae3e:	b580      	push	{r7, lr}
 800ae40:	b084      	sub	sp, #16
 800ae42:	af00      	add	r7, sp, #0
 800ae44:	60f8      	str	r0, [r7, #12]
 800ae46:	60b9      	str	r1, [r7, #8]
 800ae48:	607a      	str	r2, [r7, #4]
 800ae4a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800ae4c:	68bb      	ldr	r3, [r7, #8]
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d103      	bne.n	800ae5a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ae52:	69bb      	ldr	r3, [r7, #24]
 800ae54:	69ba      	ldr	r2, [r7, #24]
 800ae56:	601a      	str	r2, [r3, #0]
 800ae58:	e002      	b.n	800ae60 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ae5a:	69bb      	ldr	r3, [r7, #24]
 800ae5c:	687a      	ldr	r2, [r7, #4]
 800ae5e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800ae60:	69bb      	ldr	r3, [r7, #24]
 800ae62:	68fa      	ldr	r2, [r7, #12]
 800ae64:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800ae66:	69bb      	ldr	r3, [r7, #24]
 800ae68:	68ba      	ldr	r2, [r7, #8]
 800ae6a:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ae6c:	2101      	movs	r1, #1
 800ae6e:	69b8      	ldr	r0, [r7, #24]
 800ae70:	f7ff fefe 	bl	800ac70 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800ae74:	69bb      	ldr	r3, [r7, #24]
 800ae76:	78fa      	ldrb	r2, [r7, #3]
 800ae78:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ae7c:	bf00      	nop
 800ae7e:	3710      	adds	r7, #16
 800ae80:	46bd      	mov	sp, r7
 800ae82:	bd80      	pop	{r7, pc}

0800ae84 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800ae84:	b580      	push	{r7, lr}
 800ae86:	b08e      	sub	sp, #56	@ 0x38
 800ae88:	af00      	add	r7, sp, #0
 800ae8a:	60f8      	str	r0, [r7, #12]
 800ae8c:	60b9      	str	r1, [r7, #8]
 800ae8e:	607a      	str	r2, [r7, #4]
 800ae90:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800ae92:	2300      	movs	r3, #0
 800ae94:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800ae9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d10b      	bne.n	800aeb8 <xQueueGenericSend+0x34>
	__asm volatile
 800aea0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aea4:	f383 8811 	msr	BASEPRI, r3
 800aea8:	f3bf 8f6f 	isb	sy
 800aeac:	f3bf 8f4f 	dsb	sy
 800aeb0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800aeb2:	bf00      	nop
 800aeb4:	bf00      	nop
 800aeb6:	e7fd      	b.n	800aeb4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800aeb8:	68bb      	ldr	r3, [r7, #8]
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d103      	bne.n	800aec6 <xQueueGenericSend+0x42>
 800aebe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aec0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d101      	bne.n	800aeca <xQueueGenericSend+0x46>
 800aec6:	2301      	movs	r3, #1
 800aec8:	e000      	b.n	800aecc <xQueueGenericSend+0x48>
 800aeca:	2300      	movs	r3, #0
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d10b      	bne.n	800aee8 <xQueueGenericSend+0x64>
	__asm volatile
 800aed0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aed4:	f383 8811 	msr	BASEPRI, r3
 800aed8:	f3bf 8f6f 	isb	sy
 800aedc:	f3bf 8f4f 	dsb	sy
 800aee0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800aee2:	bf00      	nop
 800aee4:	bf00      	nop
 800aee6:	e7fd      	b.n	800aee4 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800aee8:	683b      	ldr	r3, [r7, #0]
 800aeea:	2b02      	cmp	r3, #2
 800aeec:	d103      	bne.n	800aef6 <xQueueGenericSend+0x72>
 800aeee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aef0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aef2:	2b01      	cmp	r3, #1
 800aef4:	d101      	bne.n	800aefa <xQueueGenericSend+0x76>
 800aef6:	2301      	movs	r3, #1
 800aef8:	e000      	b.n	800aefc <xQueueGenericSend+0x78>
 800aefa:	2300      	movs	r3, #0
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d10b      	bne.n	800af18 <xQueueGenericSend+0x94>
	__asm volatile
 800af00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af04:	f383 8811 	msr	BASEPRI, r3
 800af08:	f3bf 8f6f 	isb	sy
 800af0c:	f3bf 8f4f 	dsb	sy
 800af10:	623b      	str	r3, [r7, #32]
}
 800af12:	bf00      	nop
 800af14:	bf00      	nop
 800af16:	e7fd      	b.n	800af14 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800af18:	f001 f9ce 	bl	800c2b8 <xTaskGetSchedulerState>
 800af1c:	4603      	mov	r3, r0
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d102      	bne.n	800af28 <xQueueGenericSend+0xa4>
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	2b00      	cmp	r3, #0
 800af26:	d101      	bne.n	800af2c <xQueueGenericSend+0xa8>
 800af28:	2301      	movs	r3, #1
 800af2a:	e000      	b.n	800af2e <xQueueGenericSend+0xaa>
 800af2c:	2300      	movs	r3, #0
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d10b      	bne.n	800af4a <xQueueGenericSend+0xc6>
	__asm volatile
 800af32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af36:	f383 8811 	msr	BASEPRI, r3
 800af3a:	f3bf 8f6f 	isb	sy
 800af3e:	f3bf 8f4f 	dsb	sy
 800af42:	61fb      	str	r3, [r7, #28]
}
 800af44:	bf00      	nop
 800af46:	bf00      	nop
 800af48:	e7fd      	b.n	800af46 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800af4a:	f001 ff25 	bl	800cd98 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800af4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af50:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800af52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800af56:	429a      	cmp	r2, r3
 800af58:	d302      	bcc.n	800af60 <xQueueGenericSend+0xdc>
 800af5a:	683b      	ldr	r3, [r7, #0]
 800af5c:	2b02      	cmp	r3, #2
 800af5e:	d129      	bne.n	800afb4 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800af60:	683a      	ldr	r2, [r7, #0]
 800af62:	68b9      	ldr	r1, [r7, #8]
 800af64:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800af66:	f000 fa0f 	bl	800b388 <prvCopyDataToQueue>
 800af6a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800af6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af70:	2b00      	cmp	r3, #0
 800af72:	d010      	beq.n	800af96 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800af74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af76:	3324      	adds	r3, #36	@ 0x24
 800af78:	4618      	mov	r0, r3
 800af7a:	f000 ffdd 	bl	800bf38 <xTaskRemoveFromEventList>
 800af7e:	4603      	mov	r3, r0
 800af80:	2b00      	cmp	r3, #0
 800af82:	d013      	beq.n	800afac <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800af84:	4b3f      	ldr	r3, [pc, #252]	@ (800b084 <xQueueGenericSend+0x200>)
 800af86:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800af8a:	601a      	str	r2, [r3, #0]
 800af8c:	f3bf 8f4f 	dsb	sy
 800af90:	f3bf 8f6f 	isb	sy
 800af94:	e00a      	b.n	800afac <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800af96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d007      	beq.n	800afac <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800af9c:	4b39      	ldr	r3, [pc, #228]	@ (800b084 <xQueueGenericSend+0x200>)
 800af9e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800afa2:	601a      	str	r2, [r3, #0]
 800afa4:	f3bf 8f4f 	dsb	sy
 800afa8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800afac:	f001 ff26 	bl	800cdfc <vPortExitCritical>
				return pdPASS;
 800afb0:	2301      	movs	r3, #1
 800afb2:	e063      	b.n	800b07c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d103      	bne.n	800afc2 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800afba:	f001 ff1f 	bl	800cdfc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800afbe:	2300      	movs	r3, #0
 800afc0:	e05c      	b.n	800b07c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800afc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d106      	bne.n	800afd6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800afc8:	f107 0314 	add.w	r3, r7, #20
 800afcc:	4618      	mov	r0, r3
 800afce:	f001 f817 	bl	800c000 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800afd2:	2301      	movs	r3, #1
 800afd4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800afd6:	f001 ff11 	bl	800cdfc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800afda:	f000 fd87 	bl	800baec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800afde:	f001 fedb 	bl	800cd98 <vPortEnterCritical>
 800afe2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afe4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800afe8:	b25b      	sxtb	r3, r3
 800afea:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800afee:	d103      	bne.n	800aff8 <xQueueGenericSend+0x174>
 800aff0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aff2:	2200      	movs	r2, #0
 800aff4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800aff8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800affa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800affe:	b25b      	sxtb	r3, r3
 800b000:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b004:	d103      	bne.n	800b00e <xQueueGenericSend+0x18a>
 800b006:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b008:	2200      	movs	r2, #0
 800b00a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b00e:	f001 fef5 	bl	800cdfc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b012:	1d3a      	adds	r2, r7, #4
 800b014:	f107 0314 	add.w	r3, r7, #20
 800b018:	4611      	mov	r1, r2
 800b01a:	4618      	mov	r0, r3
 800b01c:	f001 f806 	bl	800c02c <xTaskCheckForTimeOut>
 800b020:	4603      	mov	r3, r0
 800b022:	2b00      	cmp	r3, #0
 800b024:	d124      	bne.n	800b070 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b026:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b028:	f000 faa6 	bl	800b578 <prvIsQueueFull>
 800b02c:	4603      	mov	r3, r0
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d018      	beq.n	800b064 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b032:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b034:	3310      	adds	r3, #16
 800b036:	687a      	ldr	r2, [r7, #4]
 800b038:	4611      	mov	r1, r2
 800b03a:	4618      	mov	r0, r3
 800b03c:	f000 ff2a 	bl	800be94 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b040:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b042:	f000 fa31 	bl	800b4a8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b046:	f000 fd5f 	bl	800bb08 <xTaskResumeAll>
 800b04a:	4603      	mov	r3, r0
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	f47f af7c 	bne.w	800af4a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800b052:	4b0c      	ldr	r3, [pc, #48]	@ (800b084 <xQueueGenericSend+0x200>)
 800b054:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b058:	601a      	str	r2, [r3, #0]
 800b05a:	f3bf 8f4f 	dsb	sy
 800b05e:	f3bf 8f6f 	isb	sy
 800b062:	e772      	b.n	800af4a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b064:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b066:	f000 fa1f 	bl	800b4a8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b06a:	f000 fd4d 	bl	800bb08 <xTaskResumeAll>
 800b06e:	e76c      	b.n	800af4a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b070:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b072:	f000 fa19 	bl	800b4a8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b076:	f000 fd47 	bl	800bb08 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b07a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b07c:	4618      	mov	r0, r3
 800b07e:	3738      	adds	r7, #56	@ 0x38
 800b080:	46bd      	mov	sp, r7
 800b082:	bd80      	pop	{r7, pc}
 800b084:	e000ed04 	.word	0xe000ed04

0800b088 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b088:	b580      	push	{r7, lr}
 800b08a:	b090      	sub	sp, #64	@ 0x40
 800b08c:	af00      	add	r7, sp, #0
 800b08e:	60f8      	str	r0, [r7, #12]
 800b090:	60b9      	str	r1, [r7, #8]
 800b092:	607a      	str	r2, [r7, #4]
 800b094:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800b09a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d10b      	bne.n	800b0b8 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800b0a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b0a4:	f383 8811 	msr	BASEPRI, r3
 800b0a8:	f3bf 8f6f 	isb	sy
 800b0ac:	f3bf 8f4f 	dsb	sy
 800b0b0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800b0b2:	bf00      	nop
 800b0b4:	bf00      	nop
 800b0b6:	e7fd      	b.n	800b0b4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b0b8:	68bb      	ldr	r3, [r7, #8]
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d103      	bne.n	800b0c6 <xQueueGenericSendFromISR+0x3e>
 800b0be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d101      	bne.n	800b0ca <xQueueGenericSendFromISR+0x42>
 800b0c6:	2301      	movs	r3, #1
 800b0c8:	e000      	b.n	800b0cc <xQueueGenericSendFromISR+0x44>
 800b0ca:	2300      	movs	r3, #0
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d10b      	bne.n	800b0e8 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800b0d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b0d4:	f383 8811 	msr	BASEPRI, r3
 800b0d8:	f3bf 8f6f 	isb	sy
 800b0dc:	f3bf 8f4f 	dsb	sy
 800b0e0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800b0e2:	bf00      	nop
 800b0e4:	bf00      	nop
 800b0e6:	e7fd      	b.n	800b0e4 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b0e8:	683b      	ldr	r3, [r7, #0]
 800b0ea:	2b02      	cmp	r3, #2
 800b0ec:	d103      	bne.n	800b0f6 <xQueueGenericSendFromISR+0x6e>
 800b0ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b0f2:	2b01      	cmp	r3, #1
 800b0f4:	d101      	bne.n	800b0fa <xQueueGenericSendFromISR+0x72>
 800b0f6:	2301      	movs	r3, #1
 800b0f8:	e000      	b.n	800b0fc <xQueueGenericSendFromISR+0x74>
 800b0fa:	2300      	movs	r3, #0
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d10b      	bne.n	800b118 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800b100:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b104:	f383 8811 	msr	BASEPRI, r3
 800b108:	f3bf 8f6f 	isb	sy
 800b10c:	f3bf 8f4f 	dsb	sy
 800b110:	623b      	str	r3, [r7, #32]
}
 800b112:	bf00      	nop
 800b114:	bf00      	nop
 800b116:	e7fd      	b.n	800b114 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b118:	f001 ff1e 	bl	800cf58 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800b11c:	f3ef 8211 	mrs	r2, BASEPRI
 800b120:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b124:	f383 8811 	msr	BASEPRI, r3
 800b128:	f3bf 8f6f 	isb	sy
 800b12c:	f3bf 8f4f 	dsb	sy
 800b130:	61fa      	str	r2, [r7, #28]
 800b132:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800b134:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b136:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b138:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b13a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b13c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b13e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b140:	429a      	cmp	r2, r3
 800b142:	d302      	bcc.n	800b14a <xQueueGenericSendFromISR+0xc2>
 800b144:	683b      	ldr	r3, [r7, #0]
 800b146:	2b02      	cmp	r3, #2
 800b148:	d12f      	bne.n	800b1aa <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b14a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b14c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b150:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b154:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b156:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b158:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b15a:	683a      	ldr	r2, [r7, #0]
 800b15c:	68b9      	ldr	r1, [r7, #8]
 800b15e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800b160:	f000 f912 	bl	800b388 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b164:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800b168:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b16c:	d112      	bne.n	800b194 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b16e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b170:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b172:	2b00      	cmp	r3, #0
 800b174:	d016      	beq.n	800b1a4 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b176:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b178:	3324      	adds	r3, #36	@ 0x24
 800b17a:	4618      	mov	r0, r3
 800b17c:	f000 fedc 	bl	800bf38 <xTaskRemoveFromEventList>
 800b180:	4603      	mov	r3, r0
 800b182:	2b00      	cmp	r3, #0
 800b184:	d00e      	beq.n	800b1a4 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d00b      	beq.n	800b1a4 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	2201      	movs	r2, #1
 800b190:	601a      	str	r2, [r3, #0]
 800b192:	e007      	b.n	800b1a4 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b194:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800b198:	3301      	adds	r3, #1
 800b19a:	b2db      	uxtb	r3, r3
 800b19c:	b25a      	sxtb	r2, r3
 800b19e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800b1a4:	2301      	movs	r3, #1
 800b1a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800b1a8:	e001      	b.n	800b1ae <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b1aa:	2300      	movs	r3, #0
 800b1ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b1ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b1b0:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b1b2:	697b      	ldr	r3, [r7, #20]
 800b1b4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b1b8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b1ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800b1bc:	4618      	mov	r0, r3
 800b1be:	3740      	adds	r7, #64	@ 0x40
 800b1c0:	46bd      	mov	sp, r7
 800b1c2:	bd80      	pop	{r7, pc}

0800b1c4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b1c4:	b580      	push	{r7, lr}
 800b1c6:	b08c      	sub	sp, #48	@ 0x30
 800b1c8:	af00      	add	r7, sp, #0
 800b1ca:	60f8      	str	r0, [r7, #12]
 800b1cc:	60b9      	str	r1, [r7, #8]
 800b1ce:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b1d0:	2300      	movs	r3, #0
 800b1d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b1d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d10b      	bne.n	800b1f6 <xQueueReceive+0x32>
	__asm volatile
 800b1de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1e2:	f383 8811 	msr	BASEPRI, r3
 800b1e6:	f3bf 8f6f 	isb	sy
 800b1ea:	f3bf 8f4f 	dsb	sy
 800b1ee:	623b      	str	r3, [r7, #32]
}
 800b1f0:	bf00      	nop
 800b1f2:	bf00      	nop
 800b1f4:	e7fd      	b.n	800b1f2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b1f6:	68bb      	ldr	r3, [r7, #8]
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d103      	bne.n	800b204 <xQueueReceive+0x40>
 800b1fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b200:	2b00      	cmp	r3, #0
 800b202:	d101      	bne.n	800b208 <xQueueReceive+0x44>
 800b204:	2301      	movs	r3, #1
 800b206:	e000      	b.n	800b20a <xQueueReceive+0x46>
 800b208:	2300      	movs	r3, #0
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d10b      	bne.n	800b226 <xQueueReceive+0x62>
	__asm volatile
 800b20e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b212:	f383 8811 	msr	BASEPRI, r3
 800b216:	f3bf 8f6f 	isb	sy
 800b21a:	f3bf 8f4f 	dsb	sy
 800b21e:	61fb      	str	r3, [r7, #28]
}
 800b220:	bf00      	nop
 800b222:	bf00      	nop
 800b224:	e7fd      	b.n	800b222 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b226:	f001 f847 	bl	800c2b8 <xTaskGetSchedulerState>
 800b22a:	4603      	mov	r3, r0
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d102      	bne.n	800b236 <xQueueReceive+0x72>
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	2b00      	cmp	r3, #0
 800b234:	d101      	bne.n	800b23a <xQueueReceive+0x76>
 800b236:	2301      	movs	r3, #1
 800b238:	e000      	b.n	800b23c <xQueueReceive+0x78>
 800b23a:	2300      	movs	r3, #0
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d10b      	bne.n	800b258 <xQueueReceive+0x94>
	__asm volatile
 800b240:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b244:	f383 8811 	msr	BASEPRI, r3
 800b248:	f3bf 8f6f 	isb	sy
 800b24c:	f3bf 8f4f 	dsb	sy
 800b250:	61bb      	str	r3, [r7, #24]
}
 800b252:	bf00      	nop
 800b254:	bf00      	nop
 800b256:	e7fd      	b.n	800b254 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b258:	f001 fd9e 	bl	800cd98 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b25c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b25e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b260:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b264:	2b00      	cmp	r3, #0
 800b266:	d01f      	beq.n	800b2a8 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b268:	68b9      	ldr	r1, [r7, #8]
 800b26a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b26c:	f000 f8f6 	bl	800b45c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b270:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b272:	1e5a      	subs	r2, r3, #1
 800b274:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b276:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b278:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b27a:	691b      	ldr	r3, [r3, #16]
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d00f      	beq.n	800b2a0 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b280:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b282:	3310      	adds	r3, #16
 800b284:	4618      	mov	r0, r3
 800b286:	f000 fe57 	bl	800bf38 <xTaskRemoveFromEventList>
 800b28a:	4603      	mov	r3, r0
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d007      	beq.n	800b2a0 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b290:	4b3c      	ldr	r3, [pc, #240]	@ (800b384 <xQueueReceive+0x1c0>)
 800b292:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b296:	601a      	str	r2, [r3, #0]
 800b298:	f3bf 8f4f 	dsb	sy
 800b29c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b2a0:	f001 fdac 	bl	800cdfc <vPortExitCritical>
				return pdPASS;
 800b2a4:	2301      	movs	r3, #1
 800b2a6:	e069      	b.n	800b37c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d103      	bne.n	800b2b6 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b2ae:	f001 fda5 	bl	800cdfc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b2b2:	2300      	movs	r3, #0
 800b2b4:	e062      	b.n	800b37c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b2b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d106      	bne.n	800b2ca <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b2bc:	f107 0310 	add.w	r3, r7, #16
 800b2c0:	4618      	mov	r0, r3
 800b2c2:	f000 fe9d 	bl	800c000 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b2c6:	2301      	movs	r3, #1
 800b2c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b2ca:	f001 fd97 	bl	800cdfc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b2ce:	f000 fc0d 	bl	800baec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b2d2:	f001 fd61 	bl	800cd98 <vPortEnterCritical>
 800b2d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2d8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b2dc:	b25b      	sxtb	r3, r3
 800b2de:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b2e2:	d103      	bne.n	800b2ec <xQueueReceive+0x128>
 800b2e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2e6:	2200      	movs	r2, #0
 800b2e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b2ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2ee:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b2f2:	b25b      	sxtb	r3, r3
 800b2f4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b2f8:	d103      	bne.n	800b302 <xQueueReceive+0x13e>
 800b2fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2fc:	2200      	movs	r2, #0
 800b2fe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b302:	f001 fd7b 	bl	800cdfc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b306:	1d3a      	adds	r2, r7, #4
 800b308:	f107 0310 	add.w	r3, r7, #16
 800b30c:	4611      	mov	r1, r2
 800b30e:	4618      	mov	r0, r3
 800b310:	f000 fe8c 	bl	800c02c <xTaskCheckForTimeOut>
 800b314:	4603      	mov	r3, r0
 800b316:	2b00      	cmp	r3, #0
 800b318:	d123      	bne.n	800b362 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b31a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b31c:	f000 f916 	bl	800b54c <prvIsQueueEmpty>
 800b320:	4603      	mov	r3, r0
 800b322:	2b00      	cmp	r3, #0
 800b324:	d017      	beq.n	800b356 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b326:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b328:	3324      	adds	r3, #36	@ 0x24
 800b32a:	687a      	ldr	r2, [r7, #4]
 800b32c:	4611      	mov	r1, r2
 800b32e:	4618      	mov	r0, r3
 800b330:	f000 fdb0 	bl	800be94 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b334:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b336:	f000 f8b7 	bl	800b4a8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b33a:	f000 fbe5 	bl	800bb08 <xTaskResumeAll>
 800b33e:	4603      	mov	r3, r0
 800b340:	2b00      	cmp	r3, #0
 800b342:	d189      	bne.n	800b258 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800b344:	4b0f      	ldr	r3, [pc, #60]	@ (800b384 <xQueueReceive+0x1c0>)
 800b346:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b34a:	601a      	str	r2, [r3, #0]
 800b34c:	f3bf 8f4f 	dsb	sy
 800b350:	f3bf 8f6f 	isb	sy
 800b354:	e780      	b.n	800b258 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b356:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b358:	f000 f8a6 	bl	800b4a8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b35c:	f000 fbd4 	bl	800bb08 <xTaskResumeAll>
 800b360:	e77a      	b.n	800b258 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b362:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b364:	f000 f8a0 	bl	800b4a8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b368:	f000 fbce 	bl	800bb08 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b36c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b36e:	f000 f8ed 	bl	800b54c <prvIsQueueEmpty>
 800b372:	4603      	mov	r3, r0
 800b374:	2b00      	cmp	r3, #0
 800b376:	f43f af6f 	beq.w	800b258 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b37a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b37c:	4618      	mov	r0, r3
 800b37e:	3730      	adds	r7, #48	@ 0x30
 800b380:	46bd      	mov	sp, r7
 800b382:	bd80      	pop	{r7, pc}
 800b384:	e000ed04 	.word	0xe000ed04

0800b388 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b388:	b580      	push	{r7, lr}
 800b38a:	b086      	sub	sp, #24
 800b38c:	af00      	add	r7, sp, #0
 800b38e:	60f8      	str	r0, [r7, #12]
 800b390:	60b9      	str	r1, [r7, #8]
 800b392:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b394:	2300      	movs	r3, #0
 800b396:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b39c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d10d      	bne.n	800b3c2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d14d      	bne.n	800b44a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	689b      	ldr	r3, [r3, #8]
 800b3b2:	4618      	mov	r0, r3
 800b3b4:	f000 ff9e 	bl	800c2f4 <xTaskPriorityDisinherit>
 800b3b8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	2200      	movs	r2, #0
 800b3be:	609a      	str	r2, [r3, #8]
 800b3c0:	e043      	b.n	800b44a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d119      	bne.n	800b3fc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	6858      	ldr	r0, [r3, #4]
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b3d0:	461a      	mov	r2, r3
 800b3d2:	68b9      	ldr	r1, [r7, #8]
 800b3d4:	f002 fd00 	bl	800ddd8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	685a      	ldr	r2, [r3, #4]
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b3e0:	441a      	add	r2, r3
 800b3e2:	68fb      	ldr	r3, [r7, #12]
 800b3e4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	685a      	ldr	r2, [r3, #4]
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	689b      	ldr	r3, [r3, #8]
 800b3ee:	429a      	cmp	r2, r3
 800b3f0:	d32b      	bcc.n	800b44a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	681a      	ldr	r2, [r3, #0]
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	605a      	str	r2, [r3, #4]
 800b3fa:	e026      	b.n	800b44a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	68d8      	ldr	r0, [r3, #12]
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b404:	461a      	mov	r2, r3
 800b406:	68b9      	ldr	r1, [r7, #8]
 800b408:	f002 fce6 	bl	800ddd8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	68da      	ldr	r2, [r3, #12]
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b414:	425b      	negs	r3, r3
 800b416:	441a      	add	r2, r3
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	68da      	ldr	r2, [r3, #12]
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	429a      	cmp	r2, r3
 800b426:	d207      	bcs.n	800b438 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	689a      	ldr	r2, [r3, #8]
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b430:	425b      	negs	r3, r3
 800b432:	441a      	add	r2, r3
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	2b02      	cmp	r3, #2
 800b43c:	d105      	bne.n	800b44a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b43e:	693b      	ldr	r3, [r7, #16]
 800b440:	2b00      	cmp	r3, #0
 800b442:	d002      	beq.n	800b44a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b444:	693b      	ldr	r3, [r7, #16]
 800b446:	3b01      	subs	r3, #1
 800b448:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b44a:	693b      	ldr	r3, [r7, #16]
 800b44c:	1c5a      	adds	r2, r3, #1
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800b452:	697b      	ldr	r3, [r7, #20]
}
 800b454:	4618      	mov	r0, r3
 800b456:	3718      	adds	r7, #24
 800b458:	46bd      	mov	sp, r7
 800b45a:	bd80      	pop	{r7, pc}

0800b45c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b45c:	b580      	push	{r7, lr}
 800b45e:	b082      	sub	sp, #8
 800b460:	af00      	add	r7, sp, #0
 800b462:	6078      	str	r0, [r7, #4]
 800b464:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d018      	beq.n	800b4a0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	68da      	ldr	r2, [r3, #12]
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b476:	441a      	add	r2, r3
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	68da      	ldr	r2, [r3, #12]
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	689b      	ldr	r3, [r3, #8]
 800b484:	429a      	cmp	r2, r3
 800b486:	d303      	bcc.n	800b490 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	681a      	ldr	r2, [r3, #0]
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	68d9      	ldr	r1, [r3, #12]
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b498:	461a      	mov	r2, r3
 800b49a:	6838      	ldr	r0, [r7, #0]
 800b49c:	f002 fc9c 	bl	800ddd8 <memcpy>
	}
}
 800b4a0:	bf00      	nop
 800b4a2:	3708      	adds	r7, #8
 800b4a4:	46bd      	mov	sp, r7
 800b4a6:	bd80      	pop	{r7, pc}

0800b4a8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b4a8:	b580      	push	{r7, lr}
 800b4aa:	b084      	sub	sp, #16
 800b4ac:	af00      	add	r7, sp, #0
 800b4ae:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b4b0:	f001 fc72 	bl	800cd98 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b4ba:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b4bc:	e011      	b.n	800b4e2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d012      	beq.n	800b4ec <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	3324      	adds	r3, #36	@ 0x24
 800b4ca:	4618      	mov	r0, r3
 800b4cc:	f000 fd34 	bl	800bf38 <xTaskRemoveFromEventList>
 800b4d0:	4603      	mov	r3, r0
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d001      	beq.n	800b4da <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b4d6:	f000 fe0d 	bl	800c0f4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b4da:	7bfb      	ldrb	r3, [r7, #15]
 800b4dc:	3b01      	subs	r3, #1
 800b4de:	b2db      	uxtb	r3, r3
 800b4e0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b4e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	dce9      	bgt.n	800b4be <prvUnlockQueue+0x16>
 800b4ea:	e000      	b.n	800b4ee <prvUnlockQueue+0x46>
					break;
 800b4ec:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	22ff      	movs	r2, #255	@ 0xff
 800b4f2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800b4f6:	f001 fc81 	bl	800cdfc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b4fa:	f001 fc4d 	bl	800cd98 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b504:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b506:	e011      	b.n	800b52c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	691b      	ldr	r3, [r3, #16]
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d012      	beq.n	800b536 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	3310      	adds	r3, #16
 800b514:	4618      	mov	r0, r3
 800b516:	f000 fd0f 	bl	800bf38 <xTaskRemoveFromEventList>
 800b51a:	4603      	mov	r3, r0
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d001      	beq.n	800b524 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b520:	f000 fde8 	bl	800c0f4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b524:	7bbb      	ldrb	r3, [r7, #14]
 800b526:	3b01      	subs	r3, #1
 800b528:	b2db      	uxtb	r3, r3
 800b52a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b52c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b530:	2b00      	cmp	r3, #0
 800b532:	dce9      	bgt.n	800b508 <prvUnlockQueue+0x60>
 800b534:	e000      	b.n	800b538 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b536:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	22ff      	movs	r2, #255	@ 0xff
 800b53c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800b540:	f001 fc5c 	bl	800cdfc <vPortExitCritical>
}
 800b544:	bf00      	nop
 800b546:	3710      	adds	r7, #16
 800b548:	46bd      	mov	sp, r7
 800b54a:	bd80      	pop	{r7, pc}

0800b54c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b54c:	b580      	push	{r7, lr}
 800b54e:	b084      	sub	sp, #16
 800b550:	af00      	add	r7, sp, #0
 800b552:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b554:	f001 fc20 	bl	800cd98 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d102      	bne.n	800b566 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b560:	2301      	movs	r3, #1
 800b562:	60fb      	str	r3, [r7, #12]
 800b564:	e001      	b.n	800b56a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b566:	2300      	movs	r3, #0
 800b568:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b56a:	f001 fc47 	bl	800cdfc <vPortExitCritical>

	return xReturn;
 800b56e:	68fb      	ldr	r3, [r7, #12]
}
 800b570:	4618      	mov	r0, r3
 800b572:	3710      	adds	r7, #16
 800b574:	46bd      	mov	sp, r7
 800b576:	bd80      	pop	{r7, pc}

0800b578 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b578:	b580      	push	{r7, lr}
 800b57a:	b084      	sub	sp, #16
 800b57c:	af00      	add	r7, sp, #0
 800b57e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b580:	f001 fc0a 	bl	800cd98 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b58c:	429a      	cmp	r2, r3
 800b58e:	d102      	bne.n	800b596 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b590:	2301      	movs	r3, #1
 800b592:	60fb      	str	r3, [r7, #12]
 800b594:	e001      	b.n	800b59a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b596:	2300      	movs	r3, #0
 800b598:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b59a:	f001 fc2f 	bl	800cdfc <vPortExitCritical>

	return xReturn;
 800b59e:	68fb      	ldr	r3, [r7, #12]
}
 800b5a0:	4618      	mov	r0, r3
 800b5a2:	3710      	adds	r7, #16
 800b5a4:	46bd      	mov	sp, r7
 800b5a6:	bd80      	pop	{r7, pc}

0800b5a8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b5a8:	b480      	push	{r7}
 800b5aa:	b085      	sub	sp, #20
 800b5ac:	af00      	add	r7, sp, #0
 800b5ae:	6078      	str	r0, [r7, #4]
 800b5b0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b5b2:	2300      	movs	r3, #0
 800b5b4:	60fb      	str	r3, [r7, #12]
 800b5b6:	e014      	b.n	800b5e2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b5b8:	4a0f      	ldr	r2, [pc, #60]	@ (800b5f8 <vQueueAddToRegistry+0x50>)
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d10b      	bne.n	800b5dc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b5c4:	490c      	ldr	r1, [pc, #48]	@ (800b5f8 <vQueueAddToRegistry+0x50>)
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	683a      	ldr	r2, [r7, #0]
 800b5ca:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b5ce:	4a0a      	ldr	r2, [pc, #40]	@ (800b5f8 <vQueueAddToRegistry+0x50>)
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	00db      	lsls	r3, r3, #3
 800b5d4:	4413      	add	r3, r2
 800b5d6:	687a      	ldr	r2, [r7, #4]
 800b5d8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b5da:	e006      	b.n	800b5ea <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	3301      	adds	r3, #1
 800b5e0:	60fb      	str	r3, [r7, #12]
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	2b07      	cmp	r3, #7
 800b5e6:	d9e7      	bls.n	800b5b8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b5e8:	bf00      	nop
 800b5ea:	bf00      	nop
 800b5ec:	3714      	adds	r7, #20
 800b5ee:	46bd      	mov	sp, r7
 800b5f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5f4:	4770      	bx	lr
 800b5f6:	bf00      	nop
 800b5f8:	20000f24 	.word	0x20000f24

0800b5fc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b5fc:	b580      	push	{r7, lr}
 800b5fe:	b086      	sub	sp, #24
 800b600:	af00      	add	r7, sp, #0
 800b602:	60f8      	str	r0, [r7, #12]
 800b604:	60b9      	str	r1, [r7, #8]
 800b606:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b60c:	f001 fbc4 	bl	800cd98 <vPortEnterCritical>
 800b610:	697b      	ldr	r3, [r7, #20]
 800b612:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b616:	b25b      	sxtb	r3, r3
 800b618:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b61c:	d103      	bne.n	800b626 <vQueueWaitForMessageRestricted+0x2a>
 800b61e:	697b      	ldr	r3, [r7, #20]
 800b620:	2200      	movs	r2, #0
 800b622:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b626:	697b      	ldr	r3, [r7, #20]
 800b628:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b62c:	b25b      	sxtb	r3, r3
 800b62e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b632:	d103      	bne.n	800b63c <vQueueWaitForMessageRestricted+0x40>
 800b634:	697b      	ldr	r3, [r7, #20]
 800b636:	2200      	movs	r2, #0
 800b638:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b63c:	f001 fbde 	bl	800cdfc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b640:	697b      	ldr	r3, [r7, #20]
 800b642:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b644:	2b00      	cmp	r3, #0
 800b646:	d106      	bne.n	800b656 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b648:	697b      	ldr	r3, [r7, #20]
 800b64a:	3324      	adds	r3, #36	@ 0x24
 800b64c:	687a      	ldr	r2, [r7, #4]
 800b64e:	68b9      	ldr	r1, [r7, #8]
 800b650:	4618      	mov	r0, r3
 800b652:	f000 fc45 	bl	800bee0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b656:	6978      	ldr	r0, [r7, #20]
 800b658:	f7ff ff26 	bl	800b4a8 <prvUnlockQueue>
	}
 800b65c:	bf00      	nop
 800b65e:	3718      	adds	r7, #24
 800b660:	46bd      	mov	sp, r7
 800b662:	bd80      	pop	{r7, pc}

0800b664 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b664:	b580      	push	{r7, lr}
 800b666:	b08e      	sub	sp, #56	@ 0x38
 800b668:	af04      	add	r7, sp, #16
 800b66a:	60f8      	str	r0, [r7, #12]
 800b66c:	60b9      	str	r1, [r7, #8]
 800b66e:	607a      	str	r2, [r7, #4]
 800b670:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b672:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b674:	2b00      	cmp	r3, #0
 800b676:	d10b      	bne.n	800b690 <xTaskCreateStatic+0x2c>
	__asm volatile
 800b678:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b67c:	f383 8811 	msr	BASEPRI, r3
 800b680:	f3bf 8f6f 	isb	sy
 800b684:	f3bf 8f4f 	dsb	sy
 800b688:	623b      	str	r3, [r7, #32]
}
 800b68a:	bf00      	nop
 800b68c:	bf00      	nop
 800b68e:	e7fd      	b.n	800b68c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b690:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b692:	2b00      	cmp	r3, #0
 800b694:	d10b      	bne.n	800b6ae <xTaskCreateStatic+0x4a>
	__asm volatile
 800b696:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b69a:	f383 8811 	msr	BASEPRI, r3
 800b69e:	f3bf 8f6f 	isb	sy
 800b6a2:	f3bf 8f4f 	dsb	sy
 800b6a6:	61fb      	str	r3, [r7, #28]
}
 800b6a8:	bf00      	nop
 800b6aa:	bf00      	nop
 800b6ac:	e7fd      	b.n	800b6aa <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b6ae:	235c      	movs	r3, #92	@ 0x5c
 800b6b0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b6b2:	693b      	ldr	r3, [r7, #16]
 800b6b4:	2b5c      	cmp	r3, #92	@ 0x5c
 800b6b6:	d00b      	beq.n	800b6d0 <xTaskCreateStatic+0x6c>
	__asm volatile
 800b6b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6bc:	f383 8811 	msr	BASEPRI, r3
 800b6c0:	f3bf 8f6f 	isb	sy
 800b6c4:	f3bf 8f4f 	dsb	sy
 800b6c8:	61bb      	str	r3, [r7, #24]
}
 800b6ca:	bf00      	nop
 800b6cc:	bf00      	nop
 800b6ce:	e7fd      	b.n	800b6cc <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b6d0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b6d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d01e      	beq.n	800b716 <xTaskCreateStatic+0xb2>
 800b6d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d01b      	beq.n	800b716 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b6de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b6e0:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b6e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6e4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b6e6:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b6e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6ea:	2202      	movs	r2, #2
 800b6ec:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b6f0:	2300      	movs	r3, #0
 800b6f2:	9303      	str	r3, [sp, #12]
 800b6f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6f6:	9302      	str	r3, [sp, #8]
 800b6f8:	f107 0314 	add.w	r3, r7, #20
 800b6fc:	9301      	str	r3, [sp, #4]
 800b6fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b700:	9300      	str	r3, [sp, #0]
 800b702:	683b      	ldr	r3, [r7, #0]
 800b704:	687a      	ldr	r2, [r7, #4]
 800b706:	68b9      	ldr	r1, [r7, #8]
 800b708:	68f8      	ldr	r0, [r7, #12]
 800b70a:	f000 f850 	bl	800b7ae <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b70e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b710:	f000 f8de 	bl	800b8d0 <prvAddNewTaskToReadyList>
 800b714:	e001      	b.n	800b71a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800b716:	2300      	movs	r3, #0
 800b718:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b71a:	697b      	ldr	r3, [r7, #20]
	}
 800b71c:	4618      	mov	r0, r3
 800b71e:	3728      	adds	r7, #40	@ 0x28
 800b720:	46bd      	mov	sp, r7
 800b722:	bd80      	pop	{r7, pc}

0800b724 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b724:	b580      	push	{r7, lr}
 800b726:	b08c      	sub	sp, #48	@ 0x30
 800b728:	af04      	add	r7, sp, #16
 800b72a:	60f8      	str	r0, [r7, #12]
 800b72c:	60b9      	str	r1, [r7, #8]
 800b72e:	603b      	str	r3, [r7, #0]
 800b730:	4613      	mov	r3, r2
 800b732:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b734:	88fb      	ldrh	r3, [r7, #6]
 800b736:	009b      	lsls	r3, r3, #2
 800b738:	4618      	mov	r0, r3
 800b73a:	f001 fc4f 	bl	800cfdc <pvPortMalloc>
 800b73e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b740:	697b      	ldr	r3, [r7, #20]
 800b742:	2b00      	cmp	r3, #0
 800b744:	d00e      	beq.n	800b764 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b746:	205c      	movs	r0, #92	@ 0x5c
 800b748:	f001 fc48 	bl	800cfdc <pvPortMalloc>
 800b74c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b74e:	69fb      	ldr	r3, [r7, #28]
 800b750:	2b00      	cmp	r3, #0
 800b752:	d003      	beq.n	800b75c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b754:	69fb      	ldr	r3, [r7, #28]
 800b756:	697a      	ldr	r2, [r7, #20]
 800b758:	631a      	str	r2, [r3, #48]	@ 0x30
 800b75a:	e005      	b.n	800b768 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b75c:	6978      	ldr	r0, [r7, #20]
 800b75e:	f001 fd0b 	bl	800d178 <vPortFree>
 800b762:	e001      	b.n	800b768 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b764:	2300      	movs	r3, #0
 800b766:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b768:	69fb      	ldr	r3, [r7, #28]
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d017      	beq.n	800b79e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b76e:	69fb      	ldr	r3, [r7, #28]
 800b770:	2200      	movs	r2, #0
 800b772:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b776:	88fa      	ldrh	r2, [r7, #6]
 800b778:	2300      	movs	r3, #0
 800b77a:	9303      	str	r3, [sp, #12]
 800b77c:	69fb      	ldr	r3, [r7, #28]
 800b77e:	9302      	str	r3, [sp, #8]
 800b780:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b782:	9301      	str	r3, [sp, #4]
 800b784:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b786:	9300      	str	r3, [sp, #0]
 800b788:	683b      	ldr	r3, [r7, #0]
 800b78a:	68b9      	ldr	r1, [r7, #8]
 800b78c:	68f8      	ldr	r0, [r7, #12]
 800b78e:	f000 f80e 	bl	800b7ae <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b792:	69f8      	ldr	r0, [r7, #28]
 800b794:	f000 f89c 	bl	800b8d0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b798:	2301      	movs	r3, #1
 800b79a:	61bb      	str	r3, [r7, #24]
 800b79c:	e002      	b.n	800b7a4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b79e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b7a2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b7a4:	69bb      	ldr	r3, [r7, #24]
	}
 800b7a6:	4618      	mov	r0, r3
 800b7a8:	3720      	adds	r7, #32
 800b7aa:	46bd      	mov	sp, r7
 800b7ac:	bd80      	pop	{r7, pc}

0800b7ae <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b7ae:	b580      	push	{r7, lr}
 800b7b0:	b088      	sub	sp, #32
 800b7b2:	af00      	add	r7, sp, #0
 800b7b4:	60f8      	str	r0, [r7, #12]
 800b7b6:	60b9      	str	r1, [r7, #8]
 800b7b8:	607a      	str	r2, [r7, #4]
 800b7ba:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b7bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7be:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	009b      	lsls	r3, r3, #2
 800b7c4:	461a      	mov	r2, r3
 800b7c6:	21a5      	movs	r1, #165	@ 0xa5
 800b7c8:	f002 fada 	bl	800dd80 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b7cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7ce:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b7d6:	3b01      	subs	r3, #1
 800b7d8:	009b      	lsls	r3, r3, #2
 800b7da:	4413      	add	r3, r2
 800b7dc:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b7de:	69bb      	ldr	r3, [r7, #24]
 800b7e0:	f023 0307 	bic.w	r3, r3, #7
 800b7e4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b7e6:	69bb      	ldr	r3, [r7, #24]
 800b7e8:	f003 0307 	and.w	r3, r3, #7
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d00b      	beq.n	800b808 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800b7f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b7f4:	f383 8811 	msr	BASEPRI, r3
 800b7f8:	f3bf 8f6f 	isb	sy
 800b7fc:	f3bf 8f4f 	dsb	sy
 800b800:	617b      	str	r3, [r7, #20]
}
 800b802:	bf00      	nop
 800b804:	bf00      	nop
 800b806:	e7fd      	b.n	800b804 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b808:	68bb      	ldr	r3, [r7, #8]
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d01f      	beq.n	800b84e <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b80e:	2300      	movs	r3, #0
 800b810:	61fb      	str	r3, [r7, #28]
 800b812:	e012      	b.n	800b83a <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b814:	68ba      	ldr	r2, [r7, #8]
 800b816:	69fb      	ldr	r3, [r7, #28]
 800b818:	4413      	add	r3, r2
 800b81a:	7819      	ldrb	r1, [r3, #0]
 800b81c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b81e:	69fb      	ldr	r3, [r7, #28]
 800b820:	4413      	add	r3, r2
 800b822:	3334      	adds	r3, #52	@ 0x34
 800b824:	460a      	mov	r2, r1
 800b826:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b828:	68ba      	ldr	r2, [r7, #8]
 800b82a:	69fb      	ldr	r3, [r7, #28]
 800b82c:	4413      	add	r3, r2
 800b82e:	781b      	ldrb	r3, [r3, #0]
 800b830:	2b00      	cmp	r3, #0
 800b832:	d006      	beq.n	800b842 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b834:	69fb      	ldr	r3, [r7, #28]
 800b836:	3301      	adds	r3, #1
 800b838:	61fb      	str	r3, [r7, #28]
 800b83a:	69fb      	ldr	r3, [r7, #28]
 800b83c:	2b0f      	cmp	r3, #15
 800b83e:	d9e9      	bls.n	800b814 <prvInitialiseNewTask+0x66>
 800b840:	e000      	b.n	800b844 <prvInitialiseNewTask+0x96>
			{
				break;
 800b842:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b844:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b846:	2200      	movs	r2, #0
 800b848:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800b84c:	e003      	b.n	800b856 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b84e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b850:	2200      	movs	r2, #0
 800b852:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b856:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b858:	2b37      	cmp	r3, #55	@ 0x37
 800b85a:	d901      	bls.n	800b860 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b85c:	2337      	movs	r3, #55	@ 0x37
 800b85e:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b860:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b862:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b864:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b866:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b868:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b86a:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b86c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b86e:	2200      	movs	r2, #0
 800b870:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b872:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b874:	3304      	adds	r3, #4
 800b876:	4618      	mov	r0, r3
 800b878:	f7ff f966 	bl	800ab48 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b87c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b87e:	3318      	adds	r3, #24
 800b880:	4618      	mov	r0, r3
 800b882:	f7ff f961 	bl	800ab48 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b886:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b888:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b88a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b88c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b88e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800b892:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b894:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b896:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b898:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b89a:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b89c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b89e:	2200      	movs	r2, #0
 800b8a0:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b8a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8a4:	2200      	movs	r2, #0
 800b8a6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b8aa:	683a      	ldr	r2, [r7, #0]
 800b8ac:	68f9      	ldr	r1, [r7, #12]
 800b8ae:	69b8      	ldr	r0, [r7, #24]
 800b8b0:	f001 f93e 	bl	800cb30 <pxPortInitialiseStack>
 800b8b4:	4602      	mov	r2, r0
 800b8b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8b8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b8ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d002      	beq.n	800b8c6 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b8c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b8c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b8c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b8c6:	bf00      	nop
 800b8c8:	3720      	adds	r7, #32
 800b8ca:	46bd      	mov	sp, r7
 800b8cc:	bd80      	pop	{r7, pc}
	...

0800b8d0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b8d0:	b580      	push	{r7, lr}
 800b8d2:	b082      	sub	sp, #8
 800b8d4:	af00      	add	r7, sp, #0
 800b8d6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b8d8:	f001 fa5e 	bl	800cd98 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b8dc:	4b2d      	ldr	r3, [pc, #180]	@ (800b994 <prvAddNewTaskToReadyList+0xc4>)
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	3301      	adds	r3, #1
 800b8e2:	4a2c      	ldr	r2, [pc, #176]	@ (800b994 <prvAddNewTaskToReadyList+0xc4>)
 800b8e4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b8e6:	4b2c      	ldr	r3, [pc, #176]	@ (800b998 <prvAddNewTaskToReadyList+0xc8>)
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d109      	bne.n	800b902 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b8ee:	4a2a      	ldr	r2, [pc, #168]	@ (800b998 <prvAddNewTaskToReadyList+0xc8>)
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b8f4:	4b27      	ldr	r3, [pc, #156]	@ (800b994 <prvAddNewTaskToReadyList+0xc4>)
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	2b01      	cmp	r3, #1
 800b8fa:	d110      	bne.n	800b91e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b8fc:	f000 fc1e 	bl	800c13c <prvInitialiseTaskLists>
 800b900:	e00d      	b.n	800b91e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b902:	4b26      	ldr	r3, [pc, #152]	@ (800b99c <prvAddNewTaskToReadyList+0xcc>)
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	2b00      	cmp	r3, #0
 800b908:	d109      	bne.n	800b91e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b90a:	4b23      	ldr	r3, [pc, #140]	@ (800b998 <prvAddNewTaskToReadyList+0xc8>)
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b914:	429a      	cmp	r2, r3
 800b916:	d802      	bhi.n	800b91e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b918:	4a1f      	ldr	r2, [pc, #124]	@ (800b998 <prvAddNewTaskToReadyList+0xc8>)
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b91e:	4b20      	ldr	r3, [pc, #128]	@ (800b9a0 <prvAddNewTaskToReadyList+0xd0>)
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	3301      	adds	r3, #1
 800b924:	4a1e      	ldr	r2, [pc, #120]	@ (800b9a0 <prvAddNewTaskToReadyList+0xd0>)
 800b926:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b928:	4b1d      	ldr	r3, [pc, #116]	@ (800b9a0 <prvAddNewTaskToReadyList+0xd0>)
 800b92a:	681a      	ldr	r2, [r3, #0]
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b934:	4b1b      	ldr	r3, [pc, #108]	@ (800b9a4 <prvAddNewTaskToReadyList+0xd4>)
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	429a      	cmp	r2, r3
 800b93a:	d903      	bls.n	800b944 <prvAddNewTaskToReadyList+0x74>
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b940:	4a18      	ldr	r2, [pc, #96]	@ (800b9a4 <prvAddNewTaskToReadyList+0xd4>)
 800b942:	6013      	str	r3, [r2, #0]
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b948:	4613      	mov	r3, r2
 800b94a:	009b      	lsls	r3, r3, #2
 800b94c:	4413      	add	r3, r2
 800b94e:	009b      	lsls	r3, r3, #2
 800b950:	4a15      	ldr	r2, [pc, #84]	@ (800b9a8 <prvAddNewTaskToReadyList+0xd8>)
 800b952:	441a      	add	r2, r3
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	3304      	adds	r3, #4
 800b958:	4619      	mov	r1, r3
 800b95a:	4610      	mov	r0, r2
 800b95c:	f7ff f901 	bl	800ab62 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b960:	f001 fa4c 	bl	800cdfc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b964:	4b0d      	ldr	r3, [pc, #52]	@ (800b99c <prvAddNewTaskToReadyList+0xcc>)
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d00e      	beq.n	800b98a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b96c:	4b0a      	ldr	r3, [pc, #40]	@ (800b998 <prvAddNewTaskToReadyList+0xc8>)
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b976:	429a      	cmp	r2, r3
 800b978:	d207      	bcs.n	800b98a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b97a:	4b0c      	ldr	r3, [pc, #48]	@ (800b9ac <prvAddNewTaskToReadyList+0xdc>)
 800b97c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b980:	601a      	str	r2, [r3, #0]
 800b982:	f3bf 8f4f 	dsb	sy
 800b986:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b98a:	bf00      	nop
 800b98c:	3708      	adds	r7, #8
 800b98e:	46bd      	mov	sp, r7
 800b990:	bd80      	pop	{r7, pc}
 800b992:	bf00      	nop
 800b994:	20001438 	.word	0x20001438
 800b998:	20000f64 	.word	0x20000f64
 800b99c:	20001444 	.word	0x20001444
 800b9a0:	20001454 	.word	0x20001454
 800b9a4:	20001440 	.word	0x20001440
 800b9a8:	20000f68 	.word	0x20000f68
 800b9ac:	e000ed04 	.word	0xe000ed04

0800b9b0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b9b0:	b580      	push	{r7, lr}
 800b9b2:	b084      	sub	sp, #16
 800b9b4:	af00      	add	r7, sp, #0
 800b9b6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b9b8:	2300      	movs	r3, #0
 800b9ba:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d018      	beq.n	800b9f4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b9c2:	4b14      	ldr	r3, [pc, #80]	@ (800ba14 <vTaskDelay+0x64>)
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d00b      	beq.n	800b9e2 <vTaskDelay+0x32>
	__asm volatile
 800b9ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b9ce:	f383 8811 	msr	BASEPRI, r3
 800b9d2:	f3bf 8f6f 	isb	sy
 800b9d6:	f3bf 8f4f 	dsb	sy
 800b9da:	60bb      	str	r3, [r7, #8]
}
 800b9dc:	bf00      	nop
 800b9de:	bf00      	nop
 800b9e0:	e7fd      	b.n	800b9de <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b9e2:	f000 f883 	bl	800baec <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b9e6:	2100      	movs	r1, #0
 800b9e8:	6878      	ldr	r0, [r7, #4]
 800b9ea:	f000 fcf3 	bl	800c3d4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b9ee:	f000 f88b 	bl	800bb08 <xTaskResumeAll>
 800b9f2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d107      	bne.n	800ba0a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800b9fa:	4b07      	ldr	r3, [pc, #28]	@ (800ba18 <vTaskDelay+0x68>)
 800b9fc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ba00:	601a      	str	r2, [r3, #0]
 800ba02:	f3bf 8f4f 	dsb	sy
 800ba06:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ba0a:	bf00      	nop
 800ba0c:	3710      	adds	r7, #16
 800ba0e:	46bd      	mov	sp, r7
 800ba10:	bd80      	pop	{r7, pc}
 800ba12:	bf00      	nop
 800ba14:	20001460 	.word	0x20001460
 800ba18:	e000ed04 	.word	0xe000ed04

0800ba1c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ba1c:	b580      	push	{r7, lr}
 800ba1e:	b08a      	sub	sp, #40	@ 0x28
 800ba20:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ba22:	2300      	movs	r3, #0
 800ba24:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800ba26:	2300      	movs	r3, #0
 800ba28:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ba2a:	463a      	mov	r2, r7
 800ba2c:	1d39      	adds	r1, r7, #4
 800ba2e:	f107 0308 	add.w	r3, r7, #8
 800ba32:	4618      	mov	r0, r3
 800ba34:	f7ff f834 	bl	800aaa0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ba38:	6839      	ldr	r1, [r7, #0]
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	68ba      	ldr	r2, [r7, #8]
 800ba3e:	9202      	str	r2, [sp, #8]
 800ba40:	9301      	str	r3, [sp, #4]
 800ba42:	2300      	movs	r3, #0
 800ba44:	9300      	str	r3, [sp, #0]
 800ba46:	2300      	movs	r3, #0
 800ba48:	460a      	mov	r2, r1
 800ba4a:	4922      	ldr	r1, [pc, #136]	@ (800bad4 <vTaskStartScheduler+0xb8>)
 800ba4c:	4822      	ldr	r0, [pc, #136]	@ (800bad8 <vTaskStartScheduler+0xbc>)
 800ba4e:	f7ff fe09 	bl	800b664 <xTaskCreateStatic>
 800ba52:	4603      	mov	r3, r0
 800ba54:	4a21      	ldr	r2, [pc, #132]	@ (800badc <vTaskStartScheduler+0xc0>)
 800ba56:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800ba58:	4b20      	ldr	r3, [pc, #128]	@ (800badc <vTaskStartScheduler+0xc0>)
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d002      	beq.n	800ba66 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800ba60:	2301      	movs	r3, #1
 800ba62:	617b      	str	r3, [r7, #20]
 800ba64:	e001      	b.n	800ba6a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800ba66:	2300      	movs	r3, #0
 800ba68:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800ba6a:	697b      	ldr	r3, [r7, #20]
 800ba6c:	2b01      	cmp	r3, #1
 800ba6e:	d102      	bne.n	800ba76 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800ba70:	f000 fd04 	bl	800c47c <xTimerCreateTimerTask>
 800ba74:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ba76:	697b      	ldr	r3, [r7, #20]
 800ba78:	2b01      	cmp	r3, #1
 800ba7a:	d116      	bne.n	800baaa <vTaskStartScheduler+0x8e>
	__asm volatile
 800ba7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba80:	f383 8811 	msr	BASEPRI, r3
 800ba84:	f3bf 8f6f 	isb	sy
 800ba88:	f3bf 8f4f 	dsb	sy
 800ba8c:	613b      	str	r3, [r7, #16]
}
 800ba8e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ba90:	4b13      	ldr	r3, [pc, #76]	@ (800bae0 <vTaskStartScheduler+0xc4>)
 800ba92:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ba96:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ba98:	4b12      	ldr	r3, [pc, #72]	@ (800bae4 <vTaskStartScheduler+0xc8>)
 800ba9a:	2201      	movs	r2, #1
 800ba9c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ba9e:	4b12      	ldr	r3, [pc, #72]	@ (800bae8 <vTaskStartScheduler+0xcc>)
 800baa0:	2200      	movs	r2, #0
 800baa2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800baa4:	f001 f8d4 	bl	800cc50 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800baa8:	e00f      	b.n	800baca <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800baaa:	697b      	ldr	r3, [r7, #20]
 800baac:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800bab0:	d10b      	bne.n	800baca <vTaskStartScheduler+0xae>
	__asm volatile
 800bab2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bab6:	f383 8811 	msr	BASEPRI, r3
 800baba:	f3bf 8f6f 	isb	sy
 800babe:	f3bf 8f4f 	dsb	sy
 800bac2:	60fb      	str	r3, [r7, #12]
}
 800bac4:	bf00      	nop
 800bac6:	bf00      	nop
 800bac8:	e7fd      	b.n	800bac6 <vTaskStartScheduler+0xaa>
}
 800baca:	bf00      	nop
 800bacc:	3718      	adds	r7, #24
 800bace:	46bd      	mov	sp, r7
 800bad0:	bd80      	pop	{r7, pc}
 800bad2:	bf00      	nop
 800bad4:	0800de18 	.word	0x0800de18
 800bad8:	0800c10d 	.word	0x0800c10d
 800badc:	2000145c 	.word	0x2000145c
 800bae0:	20001458 	.word	0x20001458
 800bae4:	20001444 	.word	0x20001444
 800bae8:	2000143c 	.word	0x2000143c

0800baec <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800baec:	b480      	push	{r7}
 800baee:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800baf0:	4b04      	ldr	r3, [pc, #16]	@ (800bb04 <vTaskSuspendAll+0x18>)
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	3301      	adds	r3, #1
 800baf6:	4a03      	ldr	r2, [pc, #12]	@ (800bb04 <vTaskSuspendAll+0x18>)
 800baf8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800bafa:	bf00      	nop
 800bafc:	46bd      	mov	sp, r7
 800bafe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb02:	4770      	bx	lr
 800bb04:	20001460 	.word	0x20001460

0800bb08 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800bb08:	b580      	push	{r7, lr}
 800bb0a:	b084      	sub	sp, #16
 800bb0c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800bb0e:	2300      	movs	r3, #0
 800bb10:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800bb12:	2300      	movs	r3, #0
 800bb14:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800bb16:	4b42      	ldr	r3, [pc, #264]	@ (800bc20 <xTaskResumeAll+0x118>)
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d10b      	bne.n	800bb36 <xTaskResumeAll+0x2e>
	__asm volatile
 800bb1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb22:	f383 8811 	msr	BASEPRI, r3
 800bb26:	f3bf 8f6f 	isb	sy
 800bb2a:	f3bf 8f4f 	dsb	sy
 800bb2e:	603b      	str	r3, [r7, #0]
}
 800bb30:	bf00      	nop
 800bb32:	bf00      	nop
 800bb34:	e7fd      	b.n	800bb32 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800bb36:	f001 f92f 	bl	800cd98 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800bb3a:	4b39      	ldr	r3, [pc, #228]	@ (800bc20 <xTaskResumeAll+0x118>)
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	3b01      	subs	r3, #1
 800bb40:	4a37      	ldr	r2, [pc, #220]	@ (800bc20 <xTaskResumeAll+0x118>)
 800bb42:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bb44:	4b36      	ldr	r3, [pc, #216]	@ (800bc20 <xTaskResumeAll+0x118>)
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d162      	bne.n	800bc12 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800bb4c:	4b35      	ldr	r3, [pc, #212]	@ (800bc24 <xTaskResumeAll+0x11c>)
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d05e      	beq.n	800bc12 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bb54:	e02f      	b.n	800bbb6 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bb56:	4b34      	ldr	r3, [pc, #208]	@ (800bc28 <xTaskResumeAll+0x120>)
 800bb58:	68db      	ldr	r3, [r3, #12]
 800bb5a:	68db      	ldr	r3, [r3, #12]
 800bb5c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	3318      	adds	r3, #24
 800bb62:	4618      	mov	r0, r3
 800bb64:	f7ff f85a 	bl	800ac1c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	3304      	adds	r3, #4
 800bb6c:	4618      	mov	r0, r3
 800bb6e:	f7ff f855 	bl	800ac1c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bb76:	4b2d      	ldr	r3, [pc, #180]	@ (800bc2c <xTaskResumeAll+0x124>)
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	429a      	cmp	r2, r3
 800bb7c:	d903      	bls.n	800bb86 <xTaskResumeAll+0x7e>
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb82:	4a2a      	ldr	r2, [pc, #168]	@ (800bc2c <xTaskResumeAll+0x124>)
 800bb84:	6013      	str	r3, [r2, #0]
 800bb86:	68fb      	ldr	r3, [r7, #12]
 800bb88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bb8a:	4613      	mov	r3, r2
 800bb8c:	009b      	lsls	r3, r3, #2
 800bb8e:	4413      	add	r3, r2
 800bb90:	009b      	lsls	r3, r3, #2
 800bb92:	4a27      	ldr	r2, [pc, #156]	@ (800bc30 <xTaskResumeAll+0x128>)
 800bb94:	441a      	add	r2, r3
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	3304      	adds	r3, #4
 800bb9a:	4619      	mov	r1, r3
 800bb9c:	4610      	mov	r0, r2
 800bb9e:	f7fe ffe0 	bl	800ab62 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bba6:	4b23      	ldr	r3, [pc, #140]	@ (800bc34 <xTaskResumeAll+0x12c>)
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bbac:	429a      	cmp	r2, r3
 800bbae:	d302      	bcc.n	800bbb6 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800bbb0:	4b21      	ldr	r3, [pc, #132]	@ (800bc38 <xTaskResumeAll+0x130>)
 800bbb2:	2201      	movs	r2, #1
 800bbb4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bbb6:	4b1c      	ldr	r3, [pc, #112]	@ (800bc28 <xTaskResumeAll+0x120>)
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d1cb      	bne.n	800bb56 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d001      	beq.n	800bbc8 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800bbc4:	f000 fb58 	bl	800c278 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800bbc8:	4b1c      	ldr	r3, [pc, #112]	@ (800bc3c <xTaskResumeAll+0x134>)
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d010      	beq.n	800bbf6 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800bbd4:	f000 f846 	bl	800bc64 <xTaskIncrementTick>
 800bbd8:	4603      	mov	r3, r0
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d002      	beq.n	800bbe4 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800bbde:	4b16      	ldr	r3, [pc, #88]	@ (800bc38 <xTaskResumeAll+0x130>)
 800bbe0:	2201      	movs	r2, #1
 800bbe2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	3b01      	subs	r3, #1
 800bbe8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d1f1      	bne.n	800bbd4 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800bbf0:	4b12      	ldr	r3, [pc, #72]	@ (800bc3c <xTaskResumeAll+0x134>)
 800bbf2:	2200      	movs	r2, #0
 800bbf4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800bbf6:	4b10      	ldr	r3, [pc, #64]	@ (800bc38 <xTaskResumeAll+0x130>)
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d009      	beq.n	800bc12 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800bbfe:	2301      	movs	r3, #1
 800bc00:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800bc02:	4b0f      	ldr	r3, [pc, #60]	@ (800bc40 <xTaskResumeAll+0x138>)
 800bc04:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bc08:	601a      	str	r2, [r3, #0]
 800bc0a:	f3bf 8f4f 	dsb	sy
 800bc0e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bc12:	f001 f8f3 	bl	800cdfc <vPortExitCritical>

	return xAlreadyYielded;
 800bc16:	68bb      	ldr	r3, [r7, #8]
}
 800bc18:	4618      	mov	r0, r3
 800bc1a:	3710      	adds	r7, #16
 800bc1c:	46bd      	mov	sp, r7
 800bc1e:	bd80      	pop	{r7, pc}
 800bc20:	20001460 	.word	0x20001460
 800bc24:	20001438 	.word	0x20001438
 800bc28:	200013f8 	.word	0x200013f8
 800bc2c:	20001440 	.word	0x20001440
 800bc30:	20000f68 	.word	0x20000f68
 800bc34:	20000f64 	.word	0x20000f64
 800bc38:	2000144c 	.word	0x2000144c
 800bc3c:	20001448 	.word	0x20001448
 800bc40:	e000ed04 	.word	0xe000ed04

0800bc44 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800bc44:	b480      	push	{r7}
 800bc46:	b083      	sub	sp, #12
 800bc48:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800bc4a:	4b05      	ldr	r3, [pc, #20]	@ (800bc60 <xTaskGetTickCount+0x1c>)
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800bc50:	687b      	ldr	r3, [r7, #4]
}
 800bc52:	4618      	mov	r0, r3
 800bc54:	370c      	adds	r7, #12
 800bc56:	46bd      	mov	sp, r7
 800bc58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc5c:	4770      	bx	lr
 800bc5e:	bf00      	nop
 800bc60:	2000143c 	.word	0x2000143c

0800bc64 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800bc64:	b580      	push	{r7, lr}
 800bc66:	b086      	sub	sp, #24
 800bc68:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800bc6a:	2300      	movs	r3, #0
 800bc6c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bc6e:	4b4f      	ldr	r3, [pc, #316]	@ (800bdac <xTaskIncrementTick+0x148>)
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	f040 8090 	bne.w	800bd98 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800bc78:	4b4d      	ldr	r3, [pc, #308]	@ (800bdb0 <xTaskIncrementTick+0x14c>)
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	3301      	adds	r3, #1
 800bc7e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800bc80:	4a4b      	ldr	r2, [pc, #300]	@ (800bdb0 <xTaskIncrementTick+0x14c>)
 800bc82:	693b      	ldr	r3, [r7, #16]
 800bc84:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800bc86:	693b      	ldr	r3, [r7, #16]
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d121      	bne.n	800bcd0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800bc8c:	4b49      	ldr	r3, [pc, #292]	@ (800bdb4 <xTaskIncrementTick+0x150>)
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d00b      	beq.n	800bcae <xTaskIncrementTick+0x4a>
	__asm volatile
 800bc96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc9a:	f383 8811 	msr	BASEPRI, r3
 800bc9e:	f3bf 8f6f 	isb	sy
 800bca2:	f3bf 8f4f 	dsb	sy
 800bca6:	603b      	str	r3, [r7, #0]
}
 800bca8:	bf00      	nop
 800bcaa:	bf00      	nop
 800bcac:	e7fd      	b.n	800bcaa <xTaskIncrementTick+0x46>
 800bcae:	4b41      	ldr	r3, [pc, #260]	@ (800bdb4 <xTaskIncrementTick+0x150>)
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	60fb      	str	r3, [r7, #12]
 800bcb4:	4b40      	ldr	r3, [pc, #256]	@ (800bdb8 <xTaskIncrementTick+0x154>)
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	4a3e      	ldr	r2, [pc, #248]	@ (800bdb4 <xTaskIncrementTick+0x150>)
 800bcba:	6013      	str	r3, [r2, #0]
 800bcbc:	4a3e      	ldr	r2, [pc, #248]	@ (800bdb8 <xTaskIncrementTick+0x154>)
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	6013      	str	r3, [r2, #0]
 800bcc2:	4b3e      	ldr	r3, [pc, #248]	@ (800bdbc <xTaskIncrementTick+0x158>)
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	3301      	adds	r3, #1
 800bcc8:	4a3c      	ldr	r2, [pc, #240]	@ (800bdbc <xTaskIncrementTick+0x158>)
 800bcca:	6013      	str	r3, [r2, #0]
 800bccc:	f000 fad4 	bl	800c278 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800bcd0:	4b3b      	ldr	r3, [pc, #236]	@ (800bdc0 <xTaskIncrementTick+0x15c>)
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	693a      	ldr	r2, [r7, #16]
 800bcd6:	429a      	cmp	r2, r3
 800bcd8:	d349      	bcc.n	800bd6e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bcda:	4b36      	ldr	r3, [pc, #216]	@ (800bdb4 <xTaskIncrementTick+0x150>)
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d104      	bne.n	800bcee <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bce4:	4b36      	ldr	r3, [pc, #216]	@ (800bdc0 <xTaskIncrementTick+0x15c>)
 800bce6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800bcea:	601a      	str	r2, [r3, #0]
					break;
 800bcec:	e03f      	b.n	800bd6e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bcee:	4b31      	ldr	r3, [pc, #196]	@ (800bdb4 <xTaskIncrementTick+0x150>)
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	68db      	ldr	r3, [r3, #12]
 800bcf4:	68db      	ldr	r3, [r3, #12]
 800bcf6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800bcf8:	68bb      	ldr	r3, [r7, #8]
 800bcfa:	685b      	ldr	r3, [r3, #4]
 800bcfc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800bcfe:	693a      	ldr	r2, [r7, #16]
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	429a      	cmp	r2, r3
 800bd04:	d203      	bcs.n	800bd0e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800bd06:	4a2e      	ldr	r2, [pc, #184]	@ (800bdc0 <xTaskIncrementTick+0x15c>)
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800bd0c:	e02f      	b.n	800bd6e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bd0e:	68bb      	ldr	r3, [r7, #8]
 800bd10:	3304      	adds	r3, #4
 800bd12:	4618      	mov	r0, r3
 800bd14:	f7fe ff82 	bl	800ac1c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800bd18:	68bb      	ldr	r3, [r7, #8]
 800bd1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d004      	beq.n	800bd2a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bd20:	68bb      	ldr	r3, [r7, #8]
 800bd22:	3318      	adds	r3, #24
 800bd24:	4618      	mov	r0, r3
 800bd26:	f7fe ff79 	bl	800ac1c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800bd2a:	68bb      	ldr	r3, [r7, #8]
 800bd2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bd2e:	4b25      	ldr	r3, [pc, #148]	@ (800bdc4 <xTaskIncrementTick+0x160>)
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	429a      	cmp	r2, r3
 800bd34:	d903      	bls.n	800bd3e <xTaskIncrementTick+0xda>
 800bd36:	68bb      	ldr	r3, [r7, #8]
 800bd38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd3a:	4a22      	ldr	r2, [pc, #136]	@ (800bdc4 <xTaskIncrementTick+0x160>)
 800bd3c:	6013      	str	r3, [r2, #0]
 800bd3e:	68bb      	ldr	r3, [r7, #8]
 800bd40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bd42:	4613      	mov	r3, r2
 800bd44:	009b      	lsls	r3, r3, #2
 800bd46:	4413      	add	r3, r2
 800bd48:	009b      	lsls	r3, r3, #2
 800bd4a:	4a1f      	ldr	r2, [pc, #124]	@ (800bdc8 <xTaskIncrementTick+0x164>)
 800bd4c:	441a      	add	r2, r3
 800bd4e:	68bb      	ldr	r3, [r7, #8]
 800bd50:	3304      	adds	r3, #4
 800bd52:	4619      	mov	r1, r3
 800bd54:	4610      	mov	r0, r2
 800bd56:	f7fe ff04 	bl	800ab62 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bd5a:	68bb      	ldr	r3, [r7, #8]
 800bd5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bd5e:	4b1b      	ldr	r3, [pc, #108]	@ (800bdcc <xTaskIncrementTick+0x168>)
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd64:	429a      	cmp	r2, r3
 800bd66:	d3b8      	bcc.n	800bcda <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800bd68:	2301      	movs	r3, #1
 800bd6a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bd6c:	e7b5      	b.n	800bcda <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800bd6e:	4b17      	ldr	r3, [pc, #92]	@ (800bdcc <xTaskIncrementTick+0x168>)
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bd74:	4914      	ldr	r1, [pc, #80]	@ (800bdc8 <xTaskIncrementTick+0x164>)
 800bd76:	4613      	mov	r3, r2
 800bd78:	009b      	lsls	r3, r3, #2
 800bd7a:	4413      	add	r3, r2
 800bd7c:	009b      	lsls	r3, r3, #2
 800bd7e:	440b      	add	r3, r1
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	2b01      	cmp	r3, #1
 800bd84:	d901      	bls.n	800bd8a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800bd86:	2301      	movs	r3, #1
 800bd88:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800bd8a:	4b11      	ldr	r3, [pc, #68]	@ (800bdd0 <xTaskIncrementTick+0x16c>)
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d007      	beq.n	800bda2 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800bd92:	2301      	movs	r3, #1
 800bd94:	617b      	str	r3, [r7, #20]
 800bd96:	e004      	b.n	800bda2 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800bd98:	4b0e      	ldr	r3, [pc, #56]	@ (800bdd4 <xTaskIncrementTick+0x170>)
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	3301      	adds	r3, #1
 800bd9e:	4a0d      	ldr	r2, [pc, #52]	@ (800bdd4 <xTaskIncrementTick+0x170>)
 800bda0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800bda2:	697b      	ldr	r3, [r7, #20]
}
 800bda4:	4618      	mov	r0, r3
 800bda6:	3718      	adds	r7, #24
 800bda8:	46bd      	mov	sp, r7
 800bdaa:	bd80      	pop	{r7, pc}
 800bdac:	20001460 	.word	0x20001460
 800bdb0:	2000143c 	.word	0x2000143c
 800bdb4:	200013f0 	.word	0x200013f0
 800bdb8:	200013f4 	.word	0x200013f4
 800bdbc:	20001450 	.word	0x20001450
 800bdc0:	20001458 	.word	0x20001458
 800bdc4:	20001440 	.word	0x20001440
 800bdc8:	20000f68 	.word	0x20000f68
 800bdcc:	20000f64 	.word	0x20000f64
 800bdd0:	2000144c 	.word	0x2000144c
 800bdd4:	20001448 	.word	0x20001448

0800bdd8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800bdd8:	b480      	push	{r7}
 800bdda:	b085      	sub	sp, #20
 800bddc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800bdde:	4b28      	ldr	r3, [pc, #160]	@ (800be80 <vTaskSwitchContext+0xa8>)
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d003      	beq.n	800bdee <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800bde6:	4b27      	ldr	r3, [pc, #156]	@ (800be84 <vTaskSwitchContext+0xac>)
 800bde8:	2201      	movs	r2, #1
 800bdea:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800bdec:	e042      	b.n	800be74 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800bdee:	4b25      	ldr	r3, [pc, #148]	@ (800be84 <vTaskSwitchContext+0xac>)
 800bdf0:	2200      	movs	r2, #0
 800bdf2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bdf4:	4b24      	ldr	r3, [pc, #144]	@ (800be88 <vTaskSwitchContext+0xb0>)
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	60fb      	str	r3, [r7, #12]
 800bdfa:	e011      	b.n	800be20 <vTaskSwitchContext+0x48>
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d10b      	bne.n	800be1a <vTaskSwitchContext+0x42>
	__asm volatile
 800be02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be06:	f383 8811 	msr	BASEPRI, r3
 800be0a:	f3bf 8f6f 	isb	sy
 800be0e:	f3bf 8f4f 	dsb	sy
 800be12:	607b      	str	r3, [r7, #4]
}
 800be14:	bf00      	nop
 800be16:	bf00      	nop
 800be18:	e7fd      	b.n	800be16 <vTaskSwitchContext+0x3e>
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	3b01      	subs	r3, #1
 800be1e:	60fb      	str	r3, [r7, #12]
 800be20:	491a      	ldr	r1, [pc, #104]	@ (800be8c <vTaskSwitchContext+0xb4>)
 800be22:	68fa      	ldr	r2, [r7, #12]
 800be24:	4613      	mov	r3, r2
 800be26:	009b      	lsls	r3, r3, #2
 800be28:	4413      	add	r3, r2
 800be2a:	009b      	lsls	r3, r3, #2
 800be2c:	440b      	add	r3, r1
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	2b00      	cmp	r3, #0
 800be32:	d0e3      	beq.n	800bdfc <vTaskSwitchContext+0x24>
 800be34:	68fa      	ldr	r2, [r7, #12]
 800be36:	4613      	mov	r3, r2
 800be38:	009b      	lsls	r3, r3, #2
 800be3a:	4413      	add	r3, r2
 800be3c:	009b      	lsls	r3, r3, #2
 800be3e:	4a13      	ldr	r2, [pc, #76]	@ (800be8c <vTaskSwitchContext+0xb4>)
 800be40:	4413      	add	r3, r2
 800be42:	60bb      	str	r3, [r7, #8]
 800be44:	68bb      	ldr	r3, [r7, #8]
 800be46:	685b      	ldr	r3, [r3, #4]
 800be48:	685a      	ldr	r2, [r3, #4]
 800be4a:	68bb      	ldr	r3, [r7, #8]
 800be4c:	605a      	str	r2, [r3, #4]
 800be4e:	68bb      	ldr	r3, [r7, #8]
 800be50:	685a      	ldr	r2, [r3, #4]
 800be52:	68bb      	ldr	r3, [r7, #8]
 800be54:	3308      	adds	r3, #8
 800be56:	429a      	cmp	r2, r3
 800be58:	d104      	bne.n	800be64 <vTaskSwitchContext+0x8c>
 800be5a:	68bb      	ldr	r3, [r7, #8]
 800be5c:	685b      	ldr	r3, [r3, #4]
 800be5e:	685a      	ldr	r2, [r3, #4]
 800be60:	68bb      	ldr	r3, [r7, #8]
 800be62:	605a      	str	r2, [r3, #4]
 800be64:	68bb      	ldr	r3, [r7, #8]
 800be66:	685b      	ldr	r3, [r3, #4]
 800be68:	68db      	ldr	r3, [r3, #12]
 800be6a:	4a09      	ldr	r2, [pc, #36]	@ (800be90 <vTaskSwitchContext+0xb8>)
 800be6c:	6013      	str	r3, [r2, #0]
 800be6e:	4a06      	ldr	r2, [pc, #24]	@ (800be88 <vTaskSwitchContext+0xb0>)
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	6013      	str	r3, [r2, #0]
}
 800be74:	bf00      	nop
 800be76:	3714      	adds	r7, #20
 800be78:	46bd      	mov	sp, r7
 800be7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be7e:	4770      	bx	lr
 800be80:	20001460 	.word	0x20001460
 800be84:	2000144c 	.word	0x2000144c
 800be88:	20001440 	.word	0x20001440
 800be8c:	20000f68 	.word	0x20000f68
 800be90:	20000f64 	.word	0x20000f64

0800be94 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800be94:	b580      	push	{r7, lr}
 800be96:	b084      	sub	sp, #16
 800be98:	af00      	add	r7, sp, #0
 800be9a:	6078      	str	r0, [r7, #4]
 800be9c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d10b      	bne.n	800bebc <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800bea4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bea8:	f383 8811 	msr	BASEPRI, r3
 800beac:	f3bf 8f6f 	isb	sy
 800beb0:	f3bf 8f4f 	dsb	sy
 800beb4:	60fb      	str	r3, [r7, #12]
}
 800beb6:	bf00      	nop
 800beb8:	bf00      	nop
 800beba:	e7fd      	b.n	800beb8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bebc:	4b07      	ldr	r3, [pc, #28]	@ (800bedc <vTaskPlaceOnEventList+0x48>)
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	3318      	adds	r3, #24
 800bec2:	4619      	mov	r1, r3
 800bec4:	6878      	ldr	r0, [r7, #4]
 800bec6:	f7fe fe70 	bl	800abaa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800beca:	2101      	movs	r1, #1
 800becc:	6838      	ldr	r0, [r7, #0]
 800bece:	f000 fa81 	bl	800c3d4 <prvAddCurrentTaskToDelayedList>
}
 800bed2:	bf00      	nop
 800bed4:	3710      	adds	r7, #16
 800bed6:	46bd      	mov	sp, r7
 800bed8:	bd80      	pop	{r7, pc}
 800beda:	bf00      	nop
 800bedc:	20000f64 	.word	0x20000f64

0800bee0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800bee0:	b580      	push	{r7, lr}
 800bee2:	b086      	sub	sp, #24
 800bee4:	af00      	add	r7, sp, #0
 800bee6:	60f8      	str	r0, [r7, #12]
 800bee8:	60b9      	str	r1, [r7, #8]
 800beea:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800beec:	68fb      	ldr	r3, [r7, #12]
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d10b      	bne.n	800bf0a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800bef2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bef6:	f383 8811 	msr	BASEPRI, r3
 800befa:	f3bf 8f6f 	isb	sy
 800befe:	f3bf 8f4f 	dsb	sy
 800bf02:	617b      	str	r3, [r7, #20]
}
 800bf04:	bf00      	nop
 800bf06:	bf00      	nop
 800bf08:	e7fd      	b.n	800bf06 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bf0a:	4b0a      	ldr	r3, [pc, #40]	@ (800bf34 <vTaskPlaceOnEventListRestricted+0x54>)
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	3318      	adds	r3, #24
 800bf10:	4619      	mov	r1, r3
 800bf12:	68f8      	ldr	r0, [r7, #12]
 800bf14:	f7fe fe25 	bl	800ab62 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d002      	beq.n	800bf24 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800bf1e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800bf22:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800bf24:	6879      	ldr	r1, [r7, #4]
 800bf26:	68b8      	ldr	r0, [r7, #8]
 800bf28:	f000 fa54 	bl	800c3d4 <prvAddCurrentTaskToDelayedList>
	}
 800bf2c:	bf00      	nop
 800bf2e:	3718      	adds	r7, #24
 800bf30:	46bd      	mov	sp, r7
 800bf32:	bd80      	pop	{r7, pc}
 800bf34:	20000f64 	.word	0x20000f64

0800bf38 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800bf38:	b580      	push	{r7, lr}
 800bf3a:	b086      	sub	sp, #24
 800bf3c:	af00      	add	r7, sp, #0
 800bf3e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	68db      	ldr	r3, [r3, #12]
 800bf44:	68db      	ldr	r3, [r3, #12]
 800bf46:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800bf48:	693b      	ldr	r3, [r7, #16]
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d10b      	bne.n	800bf66 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800bf4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf52:	f383 8811 	msr	BASEPRI, r3
 800bf56:	f3bf 8f6f 	isb	sy
 800bf5a:	f3bf 8f4f 	dsb	sy
 800bf5e:	60fb      	str	r3, [r7, #12]
}
 800bf60:	bf00      	nop
 800bf62:	bf00      	nop
 800bf64:	e7fd      	b.n	800bf62 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800bf66:	693b      	ldr	r3, [r7, #16]
 800bf68:	3318      	adds	r3, #24
 800bf6a:	4618      	mov	r0, r3
 800bf6c:	f7fe fe56 	bl	800ac1c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bf70:	4b1d      	ldr	r3, [pc, #116]	@ (800bfe8 <xTaskRemoveFromEventList+0xb0>)
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d11d      	bne.n	800bfb4 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800bf78:	693b      	ldr	r3, [r7, #16]
 800bf7a:	3304      	adds	r3, #4
 800bf7c:	4618      	mov	r0, r3
 800bf7e:	f7fe fe4d 	bl	800ac1c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800bf82:	693b      	ldr	r3, [r7, #16]
 800bf84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bf86:	4b19      	ldr	r3, [pc, #100]	@ (800bfec <xTaskRemoveFromEventList+0xb4>)
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	429a      	cmp	r2, r3
 800bf8c:	d903      	bls.n	800bf96 <xTaskRemoveFromEventList+0x5e>
 800bf8e:	693b      	ldr	r3, [r7, #16]
 800bf90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf92:	4a16      	ldr	r2, [pc, #88]	@ (800bfec <xTaskRemoveFromEventList+0xb4>)
 800bf94:	6013      	str	r3, [r2, #0]
 800bf96:	693b      	ldr	r3, [r7, #16]
 800bf98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bf9a:	4613      	mov	r3, r2
 800bf9c:	009b      	lsls	r3, r3, #2
 800bf9e:	4413      	add	r3, r2
 800bfa0:	009b      	lsls	r3, r3, #2
 800bfa2:	4a13      	ldr	r2, [pc, #76]	@ (800bff0 <xTaskRemoveFromEventList+0xb8>)
 800bfa4:	441a      	add	r2, r3
 800bfa6:	693b      	ldr	r3, [r7, #16]
 800bfa8:	3304      	adds	r3, #4
 800bfaa:	4619      	mov	r1, r3
 800bfac:	4610      	mov	r0, r2
 800bfae:	f7fe fdd8 	bl	800ab62 <vListInsertEnd>
 800bfb2:	e005      	b.n	800bfc0 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800bfb4:	693b      	ldr	r3, [r7, #16]
 800bfb6:	3318      	adds	r3, #24
 800bfb8:	4619      	mov	r1, r3
 800bfba:	480e      	ldr	r0, [pc, #56]	@ (800bff4 <xTaskRemoveFromEventList+0xbc>)
 800bfbc:	f7fe fdd1 	bl	800ab62 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800bfc0:	693b      	ldr	r3, [r7, #16]
 800bfc2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bfc4:	4b0c      	ldr	r3, [pc, #48]	@ (800bff8 <xTaskRemoveFromEventList+0xc0>)
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bfca:	429a      	cmp	r2, r3
 800bfcc:	d905      	bls.n	800bfda <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800bfce:	2301      	movs	r3, #1
 800bfd0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800bfd2:	4b0a      	ldr	r3, [pc, #40]	@ (800bffc <xTaskRemoveFromEventList+0xc4>)
 800bfd4:	2201      	movs	r2, #1
 800bfd6:	601a      	str	r2, [r3, #0]
 800bfd8:	e001      	b.n	800bfde <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800bfda:	2300      	movs	r3, #0
 800bfdc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800bfde:	697b      	ldr	r3, [r7, #20]
}
 800bfe0:	4618      	mov	r0, r3
 800bfe2:	3718      	adds	r7, #24
 800bfe4:	46bd      	mov	sp, r7
 800bfe6:	bd80      	pop	{r7, pc}
 800bfe8:	20001460 	.word	0x20001460
 800bfec:	20001440 	.word	0x20001440
 800bff0:	20000f68 	.word	0x20000f68
 800bff4:	200013f8 	.word	0x200013f8
 800bff8:	20000f64 	.word	0x20000f64
 800bffc:	2000144c 	.word	0x2000144c

0800c000 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c000:	b480      	push	{r7}
 800c002:	b083      	sub	sp, #12
 800c004:	af00      	add	r7, sp, #0
 800c006:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c008:	4b06      	ldr	r3, [pc, #24]	@ (800c024 <vTaskInternalSetTimeOutState+0x24>)
 800c00a:	681a      	ldr	r2, [r3, #0]
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c010:	4b05      	ldr	r3, [pc, #20]	@ (800c028 <vTaskInternalSetTimeOutState+0x28>)
 800c012:	681a      	ldr	r2, [r3, #0]
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	605a      	str	r2, [r3, #4]
}
 800c018:	bf00      	nop
 800c01a:	370c      	adds	r7, #12
 800c01c:	46bd      	mov	sp, r7
 800c01e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c022:	4770      	bx	lr
 800c024:	20001450 	.word	0x20001450
 800c028:	2000143c 	.word	0x2000143c

0800c02c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c02c:	b580      	push	{r7, lr}
 800c02e:	b088      	sub	sp, #32
 800c030:	af00      	add	r7, sp, #0
 800c032:	6078      	str	r0, [r7, #4]
 800c034:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d10b      	bne.n	800c054 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800c03c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c040:	f383 8811 	msr	BASEPRI, r3
 800c044:	f3bf 8f6f 	isb	sy
 800c048:	f3bf 8f4f 	dsb	sy
 800c04c:	613b      	str	r3, [r7, #16]
}
 800c04e:	bf00      	nop
 800c050:	bf00      	nop
 800c052:	e7fd      	b.n	800c050 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800c054:	683b      	ldr	r3, [r7, #0]
 800c056:	2b00      	cmp	r3, #0
 800c058:	d10b      	bne.n	800c072 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800c05a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c05e:	f383 8811 	msr	BASEPRI, r3
 800c062:	f3bf 8f6f 	isb	sy
 800c066:	f3bf 8f4f 	dsb	sy
 800c06a:	60fb      	str	r3, [r7, #12]
}
 800c06c:	bf00      	nop
 800c06e:	bf00      	nop
 800c070:	e7fd      	b.n	800c06e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800c072:	f000 fe91 	bl	800cd98 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c076:	4b1d      	ldr	r3, [pc, #116]	@ (800c0ec <xTaskCheckForTimeOut+0xc0>)
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	685b      	ldr	r3, [r3, #4]
 800c080:	69ba      	ldr	r2, [r7, #24]
 800c082:	1ad3      	subs	r3, r2, r3
 800c084:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c086:	683b      	ldr	r3, [r7, #0]
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c08e:	d102      	bne.n	800c096 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c090:	2300      	movs	r3, #0
 800c092:	61fb      	str	r3, [r7, #28]
 800c094:	e023      	b.n	800c0de <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	681a      	ldr	r2, [r3, #0]
 800c09a:	4b15      	ldr	r3, [pc, #84]	@ (800c0f0 <xTaskCheckForTimeOut+0xc4>)
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	429a      	cmp	r2, r3
 800c0a0:	d007      	beq.n	800c0b2 <xTaskCheckForTimeOut+0x86>
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	685b      	ldr	r3, [r3, #4]
 800c0a6:	69ba      	ldr	r2, [r7, #24]
 800c0a8:	429a      	cmp	r2, r3
 800c0aa:	d302      	bcc.n	800c0b2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c0ac:	2301      	movs	r3, #1
 800c0ae:	61fb      	str	r3, [r7, #28]
 800c0b0:	e015      	b.n	800c0de <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c0b2:	683b      	ldr	r3, [r7, #0]
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	697a      	ldr	r2, [r7, #20]
 800c0b8:	429a      	cmp	r2, r3
 800c0ba:	d20b      	bcs.n	800c0d4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c0bc:	683b      	ldr	r3, [r7, #0]
 800c0be:	681a      	ldr	r2, [r3, #0]
 800c0c0:	697b      	ldr	r3, [r7, #20]
 800c0c2:	1ad2      	subs	r2, r2, r3
 800c0c4:	683b      	ldr	r3, [r7, #0]
 800c0c6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c0c8:	6878      	ldr	r0, [r7, #4]
 800c0ca:	f7ff ff99 	bl	800c000 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c0ce:	2300      	movs	r3, #0
 800c0d0:	61fb      	str	r3, [r7, #28]
 800c0d2:	e004      	b.n	800c0de <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800c0d4:	683b      	ldr	r3, [r7, #0]
 800c0d6:	2200      	movs	r2, #0
 800c0d8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c0da:	2301      	movs	r3, #1
 800c0dc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c0de:	f000 fe8d 	bl	800cdfc <vPortExitCritical>

	return xReturn;
 800c0e2:	69fb      	ldr	r3, [r7, #28]
}
 800c0e4:	4618      	mov	r0, r3
 800c0e6:	3720      	adds	r7, #32
 800c0e8:	46bd      	mov	sp, r7
 800c0ea:	bd80      	pop	{r7, pc}
 800c0ec:	2000143c 	.word	0x2000143c
 800c0f0:	20001450 	.word	0x20001450

0800c0f4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c0f4:	b480      	push	{r7}
 800c0f6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c0f8:	4b03      	ldr	r3, [pc, #12]	@ (800c108 <vTaskMissedYield+0x14>)
 800c0fa:	2201      	movs	r2, #1
 800c0fc:	601a      	str	r2, [r3, #0]
}
 800c0fe:	bf00      	nop
 800c100:	46bd      	mov	sp, r7
 800c102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c106:	4770      	bx	lr
 800c108:	2000144c 	.word	0x2000144c

0800c10c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c10c:	b580      	push	{r7, lr}
 800c10e:	b082      	sub	sp, #8
 800c110:	af00      	add	r7, sp, #0
 800c112:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c114:	f000 f852 	bl	800c1bc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c118:	4b06      	ldr	r3, [pc, #24]	@ (800c134 <prvIdleTask+0x28>)
 800c11a:	681b      	ldr	r3, [r3, #0]
 800c11c:	2b01      	cmp	r3, #1
 800c11e:	d9f9      	bls.n	800c114 <prvIdleTask+0x8>
			{
				taskYIELD();
 800c120:	4b05      	ldr	r3, [pc, #20]	@ (800c138 <prvIdleTask+0x2c>)
 800c122:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c126:	601a      	str	r2, [r3, #0]
 800c128:	f3bf 8f4f 	dsb	sy
 800c12c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c130:	e7f0      	b.n	800c114 <prvIdleTask+0x8>
 800c132:	bf00      	nop
 800c134:	20000f68 	.word	0x20000f68
 800c138:	e000ed04 	.word	0xe000ed04

0800c13c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c13c:	b580      	push	{r7, lr}
 800c13e:	b082      	sub	sp, #8
 800c140:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c142:	2300      	movs	r3, #0
 800c144:	607b      	str	r3, [r7, #4]
 800c146:	e00c      	b.n	800c162 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c148:	687a      	ldr	r2, [r7, #4]
 800c14a:	4613      	mov	r3, r2
 800c14c:	009b      	lsls	r3, r3, #2
 800c14e:	4413      	add	r3, r2
 800c150:	009b      	lsls	r3, r3, #2
 800c152:	4a12      	ldr	r2, [pc, #72]	@ (800c19c <prvInitialiseTaskLists+0x60>)
 800c154:	4413      	add	r3, r2
 800c156:	4618      	mov	r0, r3
 800c158:	f7fe fcd6 	bl	800ab08 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	3301      	adds	r3, #1
 800c160:	607b      	str	r3, [r7, #4]
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	2b37      	cmp	r3, #55	@ 0x37
 800c166:	d9ef      	bls.n	800c148 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c168:	480d      	ldr	r0, [pc, #52]	@ (800c1a0 <prvInitialiseTaskLists+0x64>)
 800c16a:	f7fe fccd 	bl	800ab08 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c16e:	480d      	ldr	r0, [pc, #52]	@ (800c1a4 <prvInitialiseTaskLists+0x68>)
 800c170:	f7fe fcca 	bl	800ab08 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c174:	480c      	ldr	r0, [pc, #48]	@ (800c1a8 <prvInitialiseTaskLists+0x6c>)
 800c176:	f7fe fcc7 	bl	800ab08 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c17a:	480c      	ldr	r0, [pc, #48]	@ (800c1ac <prvInitialiseTaskLists+0x70>)
 800c17c:	f7fe fcc4 	bl	800ab08 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c180:	480b      	ldr	r0, [pc, #44]	@ (800c1b0 <prvInitialiseTaskLists+0x74>)
 800c182:	f7fe fcc1 	bl	800ab08 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c186:	4b0b      	ldr	r3, [pc, #44]	@ (800c1b4 <prvInitialiseTaskLists+0x78>)
 800c188:	4a05      	ldr	r2, [pc, #20]	@ (800c1a0 <prvInitialiseTaskLists+0x64>)
 800c18a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c18c:	4b0a      	ldr	r3, [pc, #40]	@ (800c1b8 <prvInitialiseTaskLists+0x7c>)
 800c18e:	4a05      	ldr	r2, [pc, #20]	@ (800c1a4 <prvInitialiseTaskLists+0x68>)
 800c190:	601a      	str	r2, [r3, #0]
}
 800c192:	bf00      	nop
 800c194:	3708      	adds	r7, #8
 800c196:	46bd      	mov	sp, r7
 800c198:	bd80      	pop	{r7, pc}
 800c19a:	bf00      	nop
 800c19c:	20000f68 	.word	0x20000f68
 800c1a0:	200013c8 	.word	0x200013c8
 800c1a4:	200013dc 	.word	0x200013dc
 800c1a8:	200013f8 	.word	0x200013f8
 800c1ac:	2000140c 	.word	0x2000140c
 800c1b0:	20001424 	.word	0x20001424
 800c1b4:	200013f0 	.word	0x200013f0
 800c1b8:	200013f4 	.word	0x200013f4

0800c1bc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c1bc:	b580      	push	{r7, lr}
 800c1be:	b082      	sub	sp, #8
 800c1c0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c1c2:	e019      	b.n	800c1f8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c1c4:	f000 fde8 	bl	800cd98 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c1c8:	4b10      	ldr	r3, [pc, #64]	@ (800c20c <prvCheckTasksWaitingTermination+0x50>)
 800c1ca:	68db      	ldr	r3, [r3, #12]
 800c1cc:	68db      	ldr	r3, [r3, #12]
 800c1ce:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	3304      	adds	r3, #4
 800c1d4:	4618      	mov	r0, r3
 800c1d6:	f7fe fd21 	bl	800ac1c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c1da:	4b0d      	ldr	r3, [pc, #52]	@ (800c210 <prvCheckTasksWaitingTermination+0x54>)
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	3b01      	subs	r3, #1
 800c1e0:	4a0b      	ldr	r2, [pc, #44]	@ (800c210 <prvCheckTasksWaitingTermination+0x54>)
 800c1e2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c1e4:	4b0b      	ldr	r3, [pc, #44]	@ (800c214 <prvCheckTasksWaitingTermination+0x58>)
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	3b01      	subs	r3, #1
 800c1ea:	4a0a      	ldr	r2, [pc, #40]	@ (800c214 <prvCheckTasksWaitingTermination+0x58>)
 800c1ec:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c1ee:	f000 fe05 	bl	800cdfc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c1f2:	6878      	ldr	r0, [r7, #4]
 800c1f4:	f000 f810 	bl	800c218 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c1f8:	4b06      	ldr	r3, [pc, #24]	@ (800c214 <prvCheckTasksWaitingTermination+0x58>)
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d1e1      	bne.n	800c1c4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c200:	bf00      	nop
 800c202:	bf00      	nop
 800c204:	3708      	adds	r7, #8
 800c206:	46bd      	mov	sp, r7
 800c208:	bd80      	pop	{r7, pc}
 800c20a:	bf00      	nop
 800c20c:	2000140c 	.word	0x2000140c
 800c210:	20001438 	.word	0x20001438
 800c214:	20001420 	.word	0x20001420

0800c218 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c218:	b580      	push	{r7, lr}
 800c21a:	b084      	sub	sp, #16
 800c21c:	af00      	add	r7, sp, #0
 800c21e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800c226:	2b00      	cmp	r3, #0
 800c228:	d108      	bne.n	800c23c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c22e:	4618      	mov	r0, r3
 800c230:	f000 ffa2 	bl	800d178 <vPortFree>
				vPortFree( pxTCB );
 800c234:	6878      	ldr	r0, [r7, #4]
 800c236:	f000 ff9f 	bl	800d178 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c23a:	e019      	b.n	800c270 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800c242:	2b01      	cmp	r3, #1
 800c244:	d103      	bne.n	800c24e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800c246:	6878      	ldr	r0, [r7, #4]
 800c248:	f000 ff96 	bl	800d178 <vPortFree>
	}
 800c24c:	e010      	b.n	800c270 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800c254:	2b02      	cmp	r3, #2
 800c256:	d00b      	beq.n	800c270 <prvDeleteTCB+0x58>
	__asm volatile
 800c258:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c25c:	f383 8811 	msr	BASEPRI, r3
 800c260:	f3bf 8f6f 	isb	sy
 800c264:	f3bf 8f4f 	dsb	sy
 800c268:	60fb      	str	r3, [r7, #12]
}
 800c26a:	bf00      	nop
 800c26c:	bf00      	nop
 800c26e:	e7fd      	b.n	800c26c <prvDeleteTCB+0x54>
	}
 800c270:	bf00      	nop
 800c272:	3710      	adds	r7, #16
 800c274:	46bd      	mov	sp, r7
 800c276:	bd80      	pop	{r7, pc}

0800c278 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c278:	b480      	push	{r7}
 800c27a:	b083      	sub	sp, #12
 800c27c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c27e:	4b0c      	ldr	r3, [pc, #48]	@ (800c2b0 <prvResetNextTaskUnblockTime+0x38>)
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	2b00      	cmp	r3, #0
 800c286:	d104      	bne.n	800c292 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c288:	4b0a      	ldr	r3, [pc, #40]	@ (800c2b4 <prvResetNextTaskUnblockTime+0x3c>)
 800c28a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c28e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c290:	e008      	b.n	800c2a4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c292:	4b07      	ldr	r3, [pc, #28]	@ (800c2b0 <prvResetNextTaskUnblockTime+0x38>)
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	68db      	ldr	r3, [r3, #12]
 800c298:	68db      	ldr	r3, [r3, #12]
 800c29a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	685b      	ldr	r3, [r3, #4]
 800c2a0:	4a04      	ldr	r2, [pc, #16]	@ (800c2b4 <prvResetNextTaskUnblockTime+0x3c>)
 800c2a2:	6013      	str	r3, [r2, #0]
}
 800c2a4:	bf00      	nop
 800c2a6:	370c      	adds	r7, #12
 800c2a8:	46bd      	mov	sp, r7
 800c2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ae:	4770      	bx	lr
 800c2b0:	200013f0 	.word	0x200013f0
 800c2b4:	20001458 	.word	0x20001458

0800c2b8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c2b8:	b480      	push	{r7}
 800c2ba:	b083      	sub	sp, #12
 800c2bc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c2be:	4b0b      	ldr	r3, [pc, #44]	@ (800c2ec <xTaskGetSchedulerState+0x34>)
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d102      	bne.n	800c2cc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c2c6:	2301      	movs	r3, #1
 800c2c8:	607b      	str	r3, [r7, #4]
 800c2ca:	e008      	b.n	800c2de <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c2cc:	4b08      	ldr	r3, [pc, #32]	@ (800c2f0 <xTaskGetSchedulerState+0x38>)
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d102      	bne.n	800c2da <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c2d4:	2302      	movs	r3, #2
 800c2d6:	607b      	str	r3, [r7, #4]
 800c2d8:	e001      	b.n	800c2de <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c2da:	2300      	movs	r3, #0
 800c2dc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c2de:	687b      	ldr	r3, [r7, #4]
	}
 800c2e0:	4618      	mov	r0, r3
 800c2e2:	370c      	adds	r7, #12
 800c2e4:	46bd      	mov	sp, r7
 800c2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ea:	4770      	bx	lr
 800c2ec:	20001444 	.word	0x20001444
 800c2f0:	20001460 	.word	0x20001460

0800c2f4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c2f4:	b580      	push	{r7, lr}
 800c2f6:	b086      	sub	sp, #24
 800c2f8:	af00      	add	r7, sp, #0
 800c2fa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c300:	2300      	movs	r3, #0
 800c302:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	2b00      	cmp	r3, #0
 800c308:	d058      	beq.n	800c3bc <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c30a:	4b2f      	ldr	r3, [pc, #188]	@ (800c3c8 <xTaskPriorityDisinherit+0xd4>)
 800c30c:	681b      	ldr	r3, [r3, #0]
 800c30e:	693a      	ldr	r2, [r7, #16]
 800c310:	429a      	cmp	r2, r3
 800c312:	d00b      	beq.n	800c32c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800c314:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c318:	f383 8811 	msr	BASEPRI, r3
 800c31c:	f3bf 8f6f 	isb	sy
 800c320:	f3bf 8f4f 	dsb	sy
 800c324:	60fb      	str	r3, [r7, #12]
}
 800c326:	bf00      	nop
 800c328:	bf00      	nop
 800c32a:	e7fd      	b.n	800c328 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c32c:	693b      	ldr	r3, [r7, #16]
 800c32e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c330:	2b00      	cmp	r3, #0
 800c332:	d10b      	bne.n	800c34c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800c334:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c338:	f383 8811 	msr	BASEPRI, r3
 800c33c:	f3bf 8f6f 	isb	sy
 800c340:	f3bf 8f4f 	dsb	sy
 800c344:	60bb      	str	r3, [r7, #8]
}
 800c346:	bf00      	nop
 800c348:	bf00      	nop
 800c34a:	e7fd      	b.n	800c348 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800c34c:	693b      	ldr	r3, [r7, #16]
 800c34e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c350:	1e5a      	subs	r2, r3, #1
 800c352:	693b      	ldr	r3, [r7, #16]
 800c354:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c356:	693b      	ldr	r3, [r7, #16]
 800c358:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c35a:	693b      	ldr	r3, [r7, #16]
 800c35c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c35e:	429a      	cmp	r2, r3
 800c360:	d02c      	beq.n	800c3bc <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c362:	693b      	ldr	r3, [r7, #16]
 800c364:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c366:	2b00      	cmp	r3, #0
 800c368:	d128      	bne.n	800c3bc <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c36a:	693b      	ldr	r3, [r7, #16]
 800c36c:	3304      	adds	r3, #4
 800c36e:	4618      	mov	r0, r3
 800c370:	f7fe fc54 	bl	800ac1c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c374:	693b      	ldr	r3, [r7, #16]
 800c376:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c378:	693b      	ldr	r3, [r7, #16]
 800c37a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c37c:	693b      	ldr	r3, [r7, #16]
 800c37e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c380:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800c384:	693b      	ldr	r3, [r7, #16]
 800c386:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c388:	693b      	ldr	r3, [r7, #16]
 800c38a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c38c:	4b0f      	ldr	r3, [pc, #60]	@ (800c3cc <xTaskPriorityDisinherit+0xd8>)
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	429a      	cmp	r2, r3
 800c392:	d903      	bls.n	800c39c <xTaskPriorityDisinherit+0xa8>
 800c394:	693b      	ldr	r3, [r7, #16]
 800c396:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c398:	4a0c      	ldr	r2, [pc, #48]	@ (800c3cc <xTaskPriorityDisinherit+0xd8>)
 800c39a:	6013      	str	r3, [r2, #0]
 800c39c:	693b      	ldr	r3, [r7, #16]
 800c39e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c3a0:	4613      	mov	r3, r2
 800c3a2:	009b      	lsls	r3, r3, #2
 800c3a4:	4413      	add	r3, r2
 800c3a6:	009b      	lsls	r3, r3, #2
 800c3a8:	4a09      	ldr	r2, [pc, #36]	@ (800c3d0 <xTaskPriorityDisinherit+0xdc>)
 800c3aa:	441a      	add	r2, r3
 800c3ac:	693b      	ldr	r3, [r7, #16]
 800c3ae:	3304      	adds	r3, #4
 800c3b0:	4619      	mov	r1, r3
 800c3b2:	4610      	mov	r0, r2
 800c3b4:	f7fe fbd5 	bl	800ab62 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c3b8:	2301      	movs	r3, #1
 800c3ba:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c3bc:	697b      	ldr	r3, [r7, #20]
	}
 800c3be:	4618      	mov	r0, r3
 800c3c0:	3718      	adds	r7, #24
 800c3c2:	46bd      	mov	sp, r7
 800c3c4:	bd80      	pop	{r7, pc}
 800c3c6:	bf00      	nop
 800c3c8:	20000f64 	.word	0x20000f64
 800c3cc:	20001440 	.word	0x20001440
 800c3d0:	20000f68 	.word	0x20000f68

0800c3d4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c3d4:	b580      	push	{r7, lr}
 800c3d6:	b084      	sub	sp, #16
 800c3d8:	af00      	add	r7, sp, #0
 800c3da:	6078      	str	r0, [r7, #4]
 800c3dc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c3de:	4b21      	ldr	r3, [pc, #132]	@ (800c464 <prvAddCurrentTaskToDelayedList+0x90>)
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c3e4:	4b20      	ldr	r3, [pc, #128]	@ (800c468 <prvAddCurrentTaskToDelayedList+0x94>)
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	3304      	adds	r3, #4
 800c3ea:	4618      	mov	r0, r3
 800c3ec:	f7fe fc16 	bl	800ac1c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c3f6:	d10a      	bne.n	800c40e <prvAddCurrentTaskToDelayedList+0x3a>
 800c3f8:	683b      	ldr	r3, [r7, #0]
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d007      	beq.n	800c40e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c3fe:	4b1a      	ldr	r3, [pc, #104]	@ (800c468 <prvAddCurrentTaskToDelayedList+0x94>)
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	3304      	adds	r3, #4
 800c404:	4619      	mov	r1, r3
 800c406:	4819      	ldr	r0, [pc, #100]	@ (800c46c <prvAddCurrentTaskToDelayedList+0x98>)
 800c408:	f7fe fbab 	bl	800ab62 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c40c:	e026      	b.n	800c45c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c40e:	68fa      	ldr	r2, [r7, #12]
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	4413      	add	r3, r2
 800c414:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c416:	4b14      	ldr	r3, [pc, #80]	@ (800c468 <prvAddCurrentTaskToDelayedList+0x94>)
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	68ba      	ldr	r2, [r7, #8]
 800c41c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c41e:	68ba      	ldr	r2, [r7, #8]
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	429a      	cmp	r2, r3
 800c424:	d209      	bcs.n	800c43a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c426:	4b12      	ldr	r3, [pc, #72]	@ (800c470 <prvAddCurrentTaskToDelayedList+0x9c>)
 800c428:	681a      	ldr	r2, [r3, #0]
 800c42a:	4b0f      	ldr	r3, [pc, #60]	@ (800c468 <prvAddCurrentTaskToDelayedList+0x94>)
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	3304      	adds	r3, #4
 800c430:	4619      	mov	r1, r3
 800c432:	4610      	mov	r0, r2
 800c434:	f7fe fbb9 	bl	800abaa <vListInsert>
}
 800c438:	e010      	b.n	800c45c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c43a:	4b0e      	ldr	r3, [pc, #56]	@ (800c474 <prvAddCurrentTaskToDelayedList+0xa0>)
 800c43c:	681a      	ldr	r2, [r3, #0]
 800c43e:	4b0a      	ldr	r3, [pc, #40]	@ (800c468 <prvAddCurrentTaskToDelayedList+0x94>)
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	3304      	adds	r3, #4
 800c444:	4619      	mov	r1, r3
 800c446:	4610      	mov	r0, r2
 800c448:	f7fe fbaf 	bl	800abaa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c44c:	4b0a      	ldr	r3, [pc, #40]	@ (800c478 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	68ba      	ldr	r2, [r7, #8]
 800c452:	429a      	cmp	r2, r3
 800c454:	d202      	bcs.n	800c45c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800c456:	4a08      	ldr	r2, [pc, #32]	@ (800c478 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c458:	68bb      	ldr	r3, [r7, #8]
 800c45a:	6013      	str	r3, [r2, #0]
}
 800c45c:	bf00      	nop
 800c45e:	3710      	adds	r7, #16
 800c460:	46bd      	mov	sp, r7
 800c462:	bd80      	pop	{r7, pc}
 800c464:	2000143c 	.word	0x2000143c
 800c468:	20000f64 	.word	0x20000f64
 800c46c:	20001424 	.word	0x20001424
 800c470:	200013f4 	.word	0x200013f4
 800c474:	200013f0 	.word	0x200013f0
 800c478:	20001458 	.word	0x20001458

0800c47c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c47c:	b580      	push	{r7, lr}
 800c47e:	b08a      	sub	sp, #40	@ 0x28
 800c480:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c482:	2300      	movs	r3, #0
 800c484:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c486:	f000 fb13 	bl	800cab0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c48a:	4b1d      	ldr	r3, [pc, #116]	@ (800c500 <xTimerCreateTimerTask+0x84>)
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d021      	beq.n	800c4d6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c492:	2300      	movs	r3, #0
 800c494:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c496:	2300      	movs	r3, #0
 800c498:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c49a:	1d3a      	adds	r2, r7, #4
 800c49c:	f107 0108 	add.w	r1, r7, #8
 800c4a0:	f107 030c 	add.w	r3, r7, #12
 800c4a4:	4618      	mov	r0, r3
 800c4a6:	f7fe fb15 	bl	800aad4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c4aa:	6879      	ldr	r1, [r7, #4]
 800c4ac:	68bb      	ldr	r3, [r7, #8]
 800c4ae:	68fa      	ldr	r2, [r7, #12]
 800c4b0:	9202      	str	r2, [sp, #8]
 800c4b2:	9301      	str	r3, [sp, #4]
 800c4b4:	2302      	movs	r3, #2
 800c4b6:	9300      	str	r3, [sp, #0]
 800c4b8:	2300      	movs	r3, #0
 800c4ba:	460a      	mov	r2, r1
 800c4bc:	4911      	ldr	r1, [pc, #68]	@ (800c504 <xTimerCreateTimerTask+0x88>)
 800c4be:	4812      	ldr	r0, [pc, #72]	@ (800c508 <xTimerCreateTimerTask+0x8c>)
 800c4c0:	f7ff f8d0 	bl	800b664 <xTaskCreateStatic>
 800c4c4:	4603      	mov	r3, r0
 800c4c6:	4a11      	ldr	r2, [pc, #68]	@ (800c50c <xTimerCreateTimerTask+0x90>)
 800c4c8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c4ca:	4b10      	ldr	r3, [pc, #64]	@ (800c50c <xTimerCreateTimerTask+0x90>)
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d001      	beq.n	800c4d6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800c4d2:	2301      	movs	r3, #1
 800c4d4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c4d6:	697b      	ldr	r3, [r7, #20]
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d10b      	bne.n	800c4f4 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800c4dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4e0:	f383 8811 	msr	BASEPRI, r3
 800c4e4:	f3bf 8f6f 	isb	sy
 800c4e8:	f3bf 8f4f 	dsb	sy
 800c4ec:	613b      	str	r3, [r7, #16]
}
 800c4ee:	bf00      	nop
 800c4f0:	bf00      	nop
 800c4f2:	e7fd      	b.n	800c4f0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800c4f4:	697b      	ldr	r3, [r7, #20]
}
 800c4f6:	4618      	mov	r0, r3
 800c4f8:	3718      	adds	r7, #24
 800c4fa:	46bd      	mov	sp, r7
 800c4fc:	bd80      	pop	{r7, pc}
 800c4fe:	bf00      	nop
 800c500:	20001494 	.word	0x20001494
 800c504:	0800de20 	.word	0x0800de20
 800c508:	0800c649 	.word	0x0800c649
 800c50c:	20001498 	.word	0x20001498

0800c510 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c510:	b580      	push	{r7, lr}
 800c512:	b08a      	sub	sp, #40	@ 0x28
 800c514:	af00      	add	r7, sp, #0
 800c516:	60f8      	str	r0, [r7, #12]
 800c518:	60b9      	str	r1, [r7, #8]
 800c51a:	607a      	str	r2, [r7, #4]
 800c51c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c51e:	2300      	movs	r3, #0
 800c520:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c522:	68fb      	ldr	r3, [r7, #12]
 800c524:	2b00      	cmp	r3, #0
 800c526:	d10b      	bne.n	800c540 <xTimerGenericCommand+0x30>
	__asm volatile
 800c528:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c52c:	f383 8811 	msr	BASEPRI, r3
 800c530:	f3bf 8f6f 	isb	sy
 800c534:	f3bf 8f4f 	dsb	sy
 800c538:	623b      	str	r3, [r7, #32]
}
 800c53a:	bf00      	nop
 800c53c:	bf00      	nop
 800c53e:	e7fd      	b.n	800c53c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c540:	4b19      	ldr	r3, [pc, #100]	@ (800c5a8 <xTimerGenericCommand+0x98>)
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	2b00      	cmp	r3, #0
 800c546:	d02a      	beq.n	800c59e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c548:	68bb      	ldr	r3, [r7, #8]
 800c54a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c550:	68fb      	ldr	r3, [r7, #12]
 800c552:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c554:	68bb      	ldr	r3, [r7, #8]
 800c556:	2b05      	cmp	r3, #5
 800c558:	dc18      	bgt.n	800c58c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c55a:	f7ff fead 	bl	800c2b8 <xTaskGetSchedulerState>
 800c55e:	4603      	mov	r3, r0
 800c560:	2b02      	cmp	r3, #2
 800c562:	d109      	bne.n	800c578 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c564:	4b10      	ldr	r3, [pc, #64]	@ (800c5a8 <xTimerGenericCommand+0x98>)
 800c566:	6818      	ldr	r0, [r3, #0]
 800c568:	f107 0110 	add.w	r1, r7, #16
 800c56c:	2300      	movs	r3, #0
 800c56e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c570:	f7fe fc88 	bl	800ae84 <xQueueGenericSend>
 800c574:	6278      	str	r0, [r7, #36]	@ 0x24
 800c576:	e012      	b.n	800c59e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c578:	4b0b      	ldr	r3, [pc, #44]	@ (800c5a8 <xTimerGenericCommand+0x98>)
 800c57a:	6818      	ldr	r0, [r3, #0]
 800c57c:	f107 0110 	add.w	r1, r7, #16
 800c580:	2300      	movs	r3, #0
 800c582:	2200      	movs	r2, #0
 800c584:	f7fe fc7e 	bl	800ae84 <xQueueGenericSend>
 800c588:	6278      	str	r0, [r7, #36]	@ 0x24
 800c58a:	e008      	b.n	800c59e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c58c:	4b06      	ldr	r3, [pc, #24]	@ (800c5a8 <xTimerGenericCommand+0x98>)
 800c58e:	6818      	ldr	r0, [r3, #0]
 800c590:	f107 0110 	add.w	r1, r7, #16
 800c594:	2300      	movs	r3, #0
 800c596:	683a      	ldr	r2, [r7, #0]
 800c598:	f7fe fd76 	bl	800b088 <xQueueGenericSendFromISR>
 800c59c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c59e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800c5a0:	4618      	mov	r0, r3
 800c5a2:	3728      	adds	r7, #40	@ 0x28
 800c5a4:	46bd      	mov	sp, r7
 800c5a6:	bd80      	pop	{r7, pc}
 800c5a8:	20001494 	.word	0x20001494

0800c5ac <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c5ac:	b580      	push	{r7, lr}
 800c5ae:	b088      	sub	sp, #32
 800c5b0:	af02      	add	r7, sp, #8
 800c5b2:	6078      	str	r0, [r7, #4]
 800c5b4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c5b6:	4b23      	ldr	r3, [pc, #140]	@ (800c644 <prvProcessExpiredTimer+0x98>)
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	68db      	ldr	r3, [r3, #12]
 800c5bc:	68db      	ldr	r3, [r3, #12]
 800c5be:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c5c0:	697b      	ldr	r3, [r7, #20]
 800c5c2:	3304      	adds	r3, #4
 800c5c4:	4618      	mov	r0, r3
 800c5c6:	f7fe fb29 	bl	800ac1c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c5ca:	697b      	ldr	r3, [r7, #20]
 800c5cc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c5d0:	f003 0304 	and.w	r3, r3, #4
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d023      	beq.n	800c620 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c5d8:	697b      	ldr	r3, [r7, #20]
 800c5da:	699a      	ldr	r2, [r3, #24]
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	18d1      	adds	r1, r2, r3
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	683a      	ldr	r2, [r7, #0]
 800c5e4:	6978      	ldr	r0, [r7, #20]
 800c5e6:	f000 f8d5 	bl	800c794 <prvInsertTimerInActiveList>
 800c5ea:	4603      	mov	r3, r0
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d020      	beq.n	800c632 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c5f0:	2300      	movs	r3, #0
 800c5f2:	9300      	str	r3, [sp, #0]
 800c5f4:	2300      	movs	r3, #0
 800c5f6:	687a      	ldr	r2, [r7, #4]
 800c5f8:	2100      	movs	r1, #0
 800c5fa:	6978      	ldr	r0, [r7, #20]
 800c5fc:	f7ff ff88 	bl	800c510 <xTimerGenericCommand>
 800c600:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c602:	693b      	ldr	r3, [r7, #16]
 800c604:	2b00      	cmp	r3, #0
 800c606:	d114      	bne.n	800c632 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800c608:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c60c:	f383 8811 	msr	BASEPRI, r3
 800c610:	f3bf 8f6f 	isb	sy
 800c614:	f3bf 8f4f 	dsb	sy
 800c618:	60fb      	str	r3, [r7, #12]
}
 800c61a:	bf00      	nop
 800c61c:	bf00      	nop
 800c61e:	e7fd      	b.n	800c61c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c620:	697b      	ldr	r3, [r7, #20]
 800c622:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c626:	f023 0301 	bic.w	r3, r3, #1
 800c62a:	b2da      	uxtb	r2, r3
 800c62c:	697b      	ldr	r3, [r7, #20]
 800c62e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c632:	697b      	ldr	r3, [r7, #20]
 800c634:	6a1b      	ldr	r3, [r3, #32]
 800c636:	6978      	ldr	r0, [r7, #20]
 800c638:	4798      	blx	r3
}
 800c63a:	bf00      	nop
 800c63c:	3718      	adds	r7, #24
 800c63e:	46bd      	mov	sp, r7
 800c640:	bd80      	pop	{r7, pc}
 800c642:	bf00      	nop
 800c644:	2000148c 	.word	0x2000148c

0800c648 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800c648:	b580      	push	{r7, lr}
 800c64a:	b084      	sub	sp, #16
 800c64c:	af00      	add	r7, sp, #0
 800c64e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c650:	f107 0308 	add.w	r3, r7, #8
 800c654:	4618      	mov	r0, r3
 800c656:	f000 f859 	bl	800c70c <prvGetNextExpireTime>
 800c65a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c65c:	68bb      	ldr	r3, [r7, #8]
 800c65e:	4619      	mov	r1, r3
 800c660:	68f8      	ldr	r0, [r7, #12]
 800c662:	f000 f805 	bl	800c670 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c666:	f000 f8d7 	bl	800c818 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c66a:	bf00      	nop
 800c66c:	e7f0      	b.n	800c650 <prvTimerTask+0x8>
	...

0800c670 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c670:	b580      	push	{r7, lr}
 800c672:	b084      	sub	sp, #16
 800c674:	af00      	add	r7, sp, #0
 800c676:	6078      	str	r0, [r7, #4]
 800c678:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c67a:	f7ff fa37 	bl	800baec <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c67e:	f107 0308 	add.w	r3, r7, #8
 800c682:	4618      	mov	r0, r3
 800c684:	f000 f866 	bl	800c754 <prvSampleTimeNow>
 800c688:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c68a:	68bb      	ldr	r3, [r7, #8]
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	d130      	bne.n	800c6f2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c690:	683b      	ldr	r3, [r7, #0]
 800c692:	2b00      	cmp	r3, #0
 800c694:	d10a      	bne.n	800c6ac <prvProcessTimerOrBlockTask+0x3c>
 800c696:	687a      	ldr	r2, [r7, #4]
 800c698:	68fb      	ldr	r3, [r7, #12]
 800c69a:	429a      	cmp	r2, r3
 800c69c:	d806      	bhi.n	800c6ac <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c69e:	f7ff fa33 	bl	800bb08 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c6a2:	68f9      	ldr	r1, [r7, #12]
 800c6a4:	6878      	ldr	r0, [r7, #4]
 800c6a6:	f7ff ff81 	bl	800c5ac <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c6aa:	e024      	b.n	800c6f6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c6ac:	683b      	ldr	r3, [r7, #0]
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	d008      	beq.n	800c6c4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c6b2:	4b13      	ldr	r3, [pc, #76]	@ (800c700 <prvProcessTimerOrBlockTask+0x90>)
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d101      	bne.n	800c6c0 <prvProcessTimerOrBlockTask+0x50>
 800c6bc:	2301      	movs	r3, #1
 800c6be:	e000      	b.n	800c6c2 <prvProcessTimerOrBlockTask+0x52>
 800c6c0:	2300      	movs	r3, #0
 800c6c2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c6c4:	4b0f      	ldr	r3, [pc, #60]	@ (800c704 <prvProcessTimerOrBlockTask+0x94>)
 800c6c6:	6818      	ldr	r0, [r3, #0]
 800c6c8:	687a      	ldr	r2, [r7, #4]
 800c6ca:	68fb      	ldr	r3, [r7, #12]
 800c6cc:	1ad3      	subs	r3, r2, r3
 800c6ce:	683a      	ldr	r2, [r7, #0]
 800c6d0:	4619      	mov	r1, r3
 800c6d2:	f7fe ff93 	bl	800b5fc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c6d6:	f7ff fa17 	bl	800bb08 <xTaskResumeAll>
 800c6da:	4603      	mov	r3, r0
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d10a      	bne.n	800c6f6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c6e0:	4b09      	ldr	r3, [pc, #36]	@ (800c708 <prvProcessTimerOrBlockTask+0x98>)
 800c6e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c6e6:	601a      	str	r2, [r3, #0]
 800c6e8:	f3bf 8f4f 	dsb	sy
 800c6ec:	f3bf 8f6f 	isb	sy
}
 800c6f0:	e001      	b.n	800c6f6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c6f2:	f7ff fa09 	bl	800bb08 <xTaskResumeAll>
}
 800c6f6:	bf00      	nop
 800c6f8:	3710      	adds	r7, #16
 800c6fa:	46bd      	mov	sp, r7
 800c6fc:	bd80      	pop	{r7, pc}
 800c6fe:	bf00      	nop
 800c700:	20001490 	.word	0x20001490
 800c704:	20001494 	.word	0x20001494
 800c708:	e000ed04 	.word	0xe000ed04

0800c70c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c70c:	b480      	push	{r7}
 800c70e:	b085      	sub	sp, #20
 800c710:	af00      	add	r7, sp, #0
 800c712:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c714:	4b0e      	ldr	r3, [pc, #56]	@ (800c750 <prvGetNextExpireTime+0x44>)
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d101      	bne.n	800c722 <prvGetNextExpireTime+0x16>
 800c71e:	2201      	movs	r2, #1
 800c720:	e000      	b.n	800c724 <prvGetNextExpireTime+0x18>
 800c722:	2200      	movs	r2, #0
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d105      	bne.n	800c73c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c730:	4b07      	ldr	r3, [pc, #28]	@ (800c750 <prvGetNextExpireTime+0x44>)
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	68db      	ldr	r3, [r3, #12]
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	60fb      	str	r3, [r7, #12]
 800c73a:	e001      	b.n	800c740 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c73c:	2300      	movs	r3, #0
 800c73e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c740:	68fb      	ldr	r3, [r7, #12]
}
 800c742:	4618      	mov	r0, r3
 800c744:	3714      	adds	r7, #20
 800c746:	46bd      	mov	sp, r7
 800c748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c74c:	4770      	bx	lr
 800c74e:	bf00      	nop
 800c750:	2000148c 	.word	0x2000148c

0800c754 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c754:	b580      	push	{r7, lr}
 800c756:	b084      	sub	sp, #16
 800c758:	af00      	add	r7, sp, #0
 800c75a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c75c:	f7ff fa72 	bl	800bc44 <xTaskGetTickCount>
 800c760:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c762:	4b0b      	ldr	r3, [pc, #44]	@ (800c790 <prvSampleTimeNow+0x3c>)
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	68fa      	ldr	r2, [r7, #12]
 800c768:	429a      	cmp	r2, r3
 800c76a:	d205      	bcs.n	800c778 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c76c:	f000 f93a 	bl	800c9e4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	2201      	movs	r2, #1
 800c774:	601a      	str	r2, [r3, #0]
 800c776:	e002      	b.n	800c77e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	2200      	movs	r2, #0
 800c77c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c77e:	4a04      	ldr	r2, [pc, #16]	@ (800c790 <prvSampleTimeNow+0x3c>)
 800c780:	68fb      	ldr	r3, [r7, #12]
 800c782:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c784:	68fb      	ldr	r3, [r7, #12]
}
 800c786:	4618      	mov	r0, r3
 800c788:	3710      	adds	r7, #16
 800c78a:	46bd      	mov	sp, r7
 800c78c:	bd80      	pop	{r7, pc}
 800c78e:	bf00      	nop
 800c790:	2000149c 	.word	0x2000149c

0800c794 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c794:	b580      	push	{r7, lr}
 800c796:	b086      	sub	sp, #24
 800c798:	af00      	add	r7, sp, #0
 800c79a:	60f8      	str	r0, [r7, #12]
 800c79c:	60b9      	str	r1, [r7, #8]
 800c79e:	607a      	str	r2, [r7, #4]
 800c7a0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c7a2:	2300      	movs	r3, #0
 800c7a4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c7a6:	68fb      	ldr	r3, [r7, #12]
 800c7a8:	68ba      	ldr	r2, [r7, #8]
 800c7aa:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c7ac:	68fb      	ldr	r3, [r7, #12]
 800c7ae:	68fa      	ldr	r2, [r7, #12]
 800c7b0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c7b2:	68ba      	ldr	r2, [r7, #8]
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	429a      	cmp	r2, r3
 800c7b8:	d812      	bhi.n	800c7e0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c7ba:	687a      	ldr	r2, [r7, #4]
 800c7bc:	683b      	ldr	r3, [r7, #0]
 800c7be:	1ad2      	subs	r2, r2, r3
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	699b      	ldr	r3, [r3, #24]
 800c7c4:	429a      	cmp	r2, r3
 800c7c6:	d302      	bcc.n	800c7ce <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c7c8:	2301      	movs	r3, #1
 800c7ca:	617b      	str	r3, [r7, #20]
 800c7cc:	e01b      	b.n	800c806 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c7ce:	4b10      	ldr	r3, [pc, #64]	@ (800c810 <prvInsertTimerInActiveList+0x7c>)
 800c7d0:	681a      	ldr	r2, [r3, #0]
 800c7d2:	68fb      	ldr	r3, [r7, #12]
 800c7d4:	3304      	adds	r3, #4
 800c7d6:	4619      	mov	r1, r3
 800c7d8:	4610      	mov	r0, r2
 800c7da:	f7fe f9e6 	bl	800abaa <vListInsert>
 800c7de:	e012      	b.n	800c806 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c7e0:	687a      	ldr	r2, [r7, #4]
 800c7e2:	683b      	ldr	r3, [r7, #0]
 800c7e4:	429a      	cmp	r2, r3
 800c7e6:	d206      	bcs.n	800c7f6 <prvInsertTimerInActiveList+0x62>
 800c7e8:	68ba      	ldr	r2, [r7, #8]
 800c7ea:	683b      	ldr	r3, [r7, #0]
 800c7ec:	429a      	cmp	r2, r3
 800c7ee:	d302      	bcc.n	800c7f6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c7f0:	2301      	movs	r3, #1
 800c7f2:	617b      	str	r3, [r7, #20]
 800c7f4:	e007      	b.n	800c806 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c7f6:	4b07      	ldr	r3, [pc, #28]	@ (800c814 <prvInsertTimerInActiveList+0x80>)
 800c7f8:	681a      	ldr	r2, [r3, #0]
 800c7fa:	68fb      	ldr	r3, [r7, #12]
 800c7fc:	3304      	adds	r3, #4
 800c7fe:	4619      	mov	r1, r3
 800c800:	4610      	mov	r0, r2
 800c802:	f7fe f9d2 	bl	800abaa <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c806:	697b      	ldr	r3, [r7, #20]
}
 800c808:	4618      	mov	r0, r3
 800c80a:	3718      	adds	r7, #24
 800c80c:	46bd      	mov	sp, r7
 800c80e:	bd80      	pop	{r7, pc}
 800c810:	20001490 	.word	0x20001490
 800c814:	2000148c 	.word	0x2000148c

0800c818 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c818:	b580      	push	{r7, lr}
 800c81a:	b08e      	sub	sp, #56	@ 0x38
 800c81c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c81e:	e0ce      	b.n	800c9be <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	2b00      	cmp	r3, #0
 800c824:	da19      	bge.n	800c85a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c826:	1d3b      	adds	r3, r7, #4
 800c828:	3304      	adds	r3, #4
 800c82a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c82c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c82e:	2b00      	cmp	r3, #0
 800c830:	d10b      	bne.n	800c84a <prvProcessReceivedCommands+0x32>
	__asm volatile
 800c832:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c836:	f383 8811 	msr	BASEPRI, r3
 800c83a:	f3bf 8f6f 	isb	sy
 800c83e:	f3bf 8f4f 	dsb	sy
 800c842:	61fb      	str	r3, [r7, #28]
}
 800c844:	bf00      	nop
 800c846:	bf00      	nop
 800c848:	e7fd      	b.n	800c846 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c84a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c850:	6850      	ldr	r0, [r2, #4]
 800c852:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c854:	6892      	ldr	r2, [r2, #8]
 800c856:	4611      	mov	r1, r2
 800c858:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	f2c0 80ae 	blt.w	800c9be <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c862:	68fb      	ldr	r3, [r7, #12]
 800c864:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c866:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c868:	695b      	ldr	r3, [r3, #20]
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	d004      	beq.n	800c878 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c86e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c870:	3304      	adds	r3, #4
 800c872:	4618      	mov	r0, r3
 800c874:	f7fe f9d2 	bl	800ac1c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c878:	463b      	mov	r3, r7
 800c87a:	4618      	mov	r0, r3
 800c87c:	f7ff ff6a 	bl	800c754 <prvSampleTimeNow>
 800c880:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	2b09      	cmp	r3, #9
 800c886:	f200 8097 	bhi.w	800c9b8 <prvProcessReceivedCommands+0x1a0>
 800c88a:	a201      	add	r2, pc, #4	@ (adr r2, 800c890 <prvProcessReceivedCommands+0x78>)
 800c88c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c890:	0800c8b9 	.word	0x0800c8b9
 800c894:	0800c8b9 	.word	0x0800c8b9
 800c898:	0800c8b9 	.word	0x0800c8b9
 800c89c:	0800c92f 	.word	0x0800c92f
 800c8a0:	0800c943 	.word	0x0800c943
 800c8a4:	0800c98f 	.word	0x0800c98f
 800c8a8:	0800c8b9 	.word	0x0800c8b9
 800c8ac:	0800c8b9 	.word	0x0800c8b9
 800c8b0:	0800c92f 	.word	0x0800c92f
 800c8b4:	0800c943 	.word	0x0800c943
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c8b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c8ba:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c8be:	f043 0301 	orr.w	r3, r3, #1
 800c8c2:	b2da      	uxtb	r2, r3
 800c8c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c8c6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c8ca:	68ba      	ldr	r2, [r7, #8]
 800c8cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c8ce:	699b      	ldr	r3, [r3, #24]
 800c8d0:	18d1      	adds	r1, r2, r3
 800c8d2:	68bb      	ldr	r3, [r7, #8]
 800c8d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c8d6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c8d8:	f7ff ff5c 	bl	800c794 <prvInsertTimerInActiveList>
 800c8dc:	4603      	mov	r3, r0
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d06c      	beq.n	800c9bc <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c8e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c8e4:	6a1b      	ldr	r3, [r3, #32]
 800c8e6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c8e8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c8ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c8ec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c8f0:	f003 0304 	and.w	r3, r3, #4
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	d061      	beq.n	800c9bc <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c8f8:	68ba      	ldr	r2, [r7, #8]
 800c8fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c8fc:	699b      	ldr	r3, [r3, #24]
 800c8fe:	441a      	add	r2, r3
 800c900:	2300      	movs	r3, #0
 800c902:	9300      	str	r3, [sp, #0]
 800c904:	2300      	movs	r3, #0
 800c906:	2100      	movs	r1, #0
 800c908:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c90a:	f7ff fe01 	bl	800c510 <xTimerGenericCommand>
 800c90e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c910:	6a3b      	ldr	r3, [r7, #32]
 800c912:	2b00      	cmp	r3, #0
 800c914:	d152      	bne.n	800c9bc <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800c916:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c91a:	f383 8811 	msr	BASEPRI, r3
 800c91e:	f3bf 8f6f 	isb	sy
 800c922:	f3bf 8f4f 	dsb	sy
 800c926:	61bb      	str	r3, [r7, #24]
}
 800c928:	bf00      	nop
 800c92a:	bf00      	nop
 800c92c:	e7fd      	b.n	800c92a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c92e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c930:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c934:	f023 0301 	bic.w	r3, r3, #1
 800c938:	b2da      	uxtb	r2, r3
 800c93a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c93c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800c940:	e03d      	b.n	800c9be <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c942:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c944:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c948:	f043 0301 	orr.w	r3, r3, #1
 800c94c:	b2da      	uxtb	r2, r3
 800c94e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c950:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c954:	68ba      	ldr	r2, [r7, #8]
 800c956:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c958:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c95a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c95c:	699b      	ldr	r3, [r3, #24]
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d10b      	bne.n	800c97a <prvProcessReceivedCommands+0x162>
	__asm volatile
 800c962:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c966:	f383 8811 	msr	BASEPRI, r3
 800c96a:	f3bf 8f6f 	isb	sy
 800c96e:	f3bf 8f4f 	dsb	sy
 800c972:	617b      	str	r3, [r7, #20]
}
 800c974:	bf00      	nop
 800c976:	bf00      	nop
 800c978:	e7fd      	b.n	800c976 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c97a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c97c:	699a      	ldr	r2, [r3, #24]
 800c97e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c980:	18d1      	adds	r1, r2, r3
 800c982:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c984:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c986:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c988:	f7ff ff04 	bl	800c794 <prvInsertTimerInActiveList>
					break;
 800c98c:	e017      	b.n	800c9be <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c98e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c990:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c994:	f003 0302 	and.w	r3, r3, #2
 800c998:	2b00      	cmp	r3, #0
 800c99a:	d103      	bne.n	800c9a4 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800c99c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c99e:	f000 fbeb 	bl	800d178 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c9a2:	e00c      	b.n	800c9be <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c9a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c9a6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c9aa:	f023 0301 	bic.w	r3, r3, #1
 800c9ae:	b2da      	uxtb	r2, r3
 800c9b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c9b2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800c9b6:	e002      	b.n	800c9be <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800c9b8:	bf00      	nop
 800c9ba:	e000      	b.n	800c9be <prvProcessReceivedCommands+0x1a6>
					break;
 800c9bc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c9be:	4b08      	ldr	r3, [pc, #32]	@ (800c9e0 <prvProcessReceivedCommands+0x1c8>)
 800c9c0:	681b      	ldr	r3, [r3, #0]
 800c9c2:	1d39      	adds	r1, r7, #4
 800c9c4:	2200      	movs	r2, #0
 800c9c6:	4618      	mov	r0, r3
 800c9c8:	f7fe fbfc 	bl	800b1c4 <xQueueReceive>
 800c9cc:	4603      	mov	r3, r0
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	f47f af26 	bne.w	800c820 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800c9d4:	bf00      	nop
 800c9d6:	bf00      	nop
 800c9d8:	3730      	adds	r7, #48	@ 0x30
 800c9da:	46bd      	mov	sp, r7
 800c9dc:	bd80      	pop	{r7, pc}
 800c9de:	bf00      	nop
 800c9e0:	20001494 	.word	0x20001494

0800c9e4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c9e4:	b580      	push	{r7, lr}
 800c9e6:	b088      	sub	sp, #32
 800c9e8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c9ea:	e049      	b.n	800ca80 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c9ec:	4b2e      	ldr	r3, [pc, #184]	@ (800caa8 <prvSwitchTimerLists+0xc4>)
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	68db      	ldr	r3, [r3, #12]
 800c9f2:	681b      	ldr	r3, [r3, #0]
 800c9f4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c9f6:	4b2c      	ldr	r3, [pc, #176]	@ (800caa8 <prvSwitchTimerLists+0xc4>)
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	68db      	ldr	r3, [r3, #12]
 800c9fc:	68db      	ldr	r3, [r3, #12]
 800c9fe:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ca00:	68fb      	ldr	r3, [r7, #12]
 800ca02:	3304      	adds	r3, #4
 800ca04:	4618      	mov	r0, r3
 800ca06:	f7fe f909 	bl	800ac1c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ca0a:	68fb      	ldr	r3, [r7, #12]
 800ca0c:	6a1b      	ldr	r3, [r3, #32]
 800ca0e:	68f8      	ldr	r0, [r7, #12]
 800ca10:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ca12:	68fb      	ldr	r3, [r7, #12]
 800ca14:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ca18:	f003 0304 	and.w	r3, r3, #4
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d02f      	beq.n	800ca80 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800ca20:	68fb      	ldr	r3, [r7, #12]
 800ca22:	699b      	ldr	r3, [r3, #24]
 800ca24:	693a      	ldr	r2, [r7, #16]
 800ca26:	4413      	add	r3, r2
 800ca28:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800ca2a:	68ba      	ldr	r2, [r7, #8]
 800ca2c:	693b      	ldr	r3, [r7, #16]
 800ca2e:	429a      	cmp	r2, r3
 800ca30:	d90e      	bls.n	800ca50 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800ca32:	68fb      	ldr	r3, [r7, #12]
 800ca34:	68ba      	ldr	r2, [r7, #8]
 800ca36:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ca38:	68fb      	ldr	r3, [r7, #12]
 800ca3a:	68fa      	ldr	r2, [r7, #12]
 800ca3c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ca3e:	4b1a      	ldr	r3, [pc, #104]	@ (800caa8 <prvSwitchTimerLists+0xc4>)
 800ca40:	681a      	ldr	r2, [r3, #0]
 800ca42:	68fb      	ldr	r3, [r7, #12]
 800ca44:	3304      	adds	r3, #4
 800ca46:	4619      	mov	r1, r3
 800ca48:	4610      	mov	r0, r2
 800ca4a:	f7fe f8ae 	bl	800abaa <vListInsert>
 800ca4e:	e017      	b.n	800ca80 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ca50:	2300      	movs	r3, #0
 800ca52:	9300      	str	r3, [sp, #0]
 800ca54:	2300      	movs	r3, #0
 800ca56:	693a      	ldr	r2, [r7, #16]
 800ca58:	2100      	movs	r1, #0
 800ca5a:	68f8      	ldr	r0, [r7, #12]
 800ca5c:	f7ff fd58 	bl	800c510 <xTimerGenericCommand>
 800ca60:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d10b      	bne.n	800ca80 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800ca68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca6c:	f383 8811 	msr	BASEPRI, r3
 800ca70:	f3bf 8f6f 	isb	sy
 800ca74:	f3bf 8f4f 	dsb	sy
 800ca78:	603b      	str	r3, [r7, #0]
}
 800ca7a:	bf00      	nop
 800ca7c:	bf00      	nop
 800ca7e:	e7fd      	b.n	800ca7c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ca80:	4b09      	ldr	r3, [pc, #36]	@ (800caa8 <prvSwitchTimerLists+0xc4>)
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d1b0      	bne.n	800c9ec <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800ca8a:	4b07      	ldr	r3, [pc, #28]	@ (800caa8 <prvSwitchTimerLists+0xc4>)
 800ca8c:	681b      	ldr	r3, [r3, #0]
 800ca8e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800ca90:	4b06      	ldr	r3, [pc, #24]	@ (800caac <prvSwitchTimerLists+0xc8>)
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	4a04      	ldr	r2, [pc, #16]	@ (800caa8 <prvSwitchTimerLists+0xc4>)
 800ca96:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800ca98:	4a04      	ldr	r2, [pc, #16]	@ (800caac <prvSwitchTimerLists+0xc8>)
 800ca9a:	697b      	ldr	r3, [r7, #20]
 800ca9c:	6013      	str	r3, [r2, #0]
}
 800ca9e:	bf00      	nop
 800caa0:	3718      	adds	r7, #24
 800caa2:	46bd      	mov	sp, r7
 800caa4:	bd80      	pop	{r7, pc}
 800caa6:	bf00      	nop
 800caa8:	2000148c 	.word	0x2000148c
 800caac:	20001490 	.word	0x20001490

0800cab0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800cab0:	b580      	push	{r7, lr}
 800cab2:	b082      	sub	sp, #8
 800cab4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800cab6:	f000 f96f 	bl	800cd98 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800caba:	4b15      	ldr	r3, [pc, #84]	@ (800cb10 <prvCheckForValidListAndQueue+0x60>)
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	d120      	bne.n	800cb04 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800cac2:	4814      	ldr	r0, [pc, #80]	@ (800cb14 <prvCheckForValidListAndQueue+0x64>)
 800cac4:	f7fe f820 	bl	800ab08 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800cac8:	4813      	ldr	r0, [pc, #76]	@ (800cb18 <prvCheckForValidListAndQueue+0x68>)
 800caca:	f7fe f81d 	bl	800ab08 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800cace:	4b13      	ldr	r3, [pc, #76]	@ (800cb1c <prvCheckForValidListAndQueue+0x6c>)
 800cad0:	4a10      	ldr	r2, [pc, #64]	@ (800cb14 <prvCheckForValidListAndQueue+0x64>)
 800cad2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800cad4:	4b12      	ldr	r3, [pc, #72]	@ (800cb20 <prvCheckForValidListAndQueue+0x70>)
 800cad6:	4a10      	ldr	r2, [pc, #64]	@ (800cb18 <prvCheckForValidListAndQueue+0x68>)
 800cad8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800cada:	2300      	movs	r3, #0
 800cadc:	9300      	str	r3, [sp, #0]
 800cade:	4b11      	ldr	r3, [pc, #68]	@ (800cb24 <prvCheckForValidListAndQueue+0x74>)
 800cae0:	4a11      	ldr	r2, [pc, #68]	@ (800cb28 <prvCheckForValidListAndQueue+0x78>)
 800cae2:	2110      	movs	r1, #16
 800cae4:	200a      	movs	r0, #10
 800cae6:	f7fe f92d 	bl	800ad44 <xQueueGenericCreateStatic>
 800caea:	4603      	mov	r3, r0
 800caec:	4a08      	ldr	r2, [pc, #32]	@ (800cb10 <prvCheckForValidListAndQueue+0x60>)
 800caee:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800caf0:	4b07      	ldr	r3, [pc, #28]	@ (800cb10 <prvCheckForValidListAndQueue+0x60>)
 800caf2:	681b      	ldr	r3, [r3, #0]
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	d005      	beq.n	800cb04 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800caf8:	4b05      	ldr	r3, [pc, #20]	@ (800cb10 <prvCheckForValidListAndQueue+0x60>)
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	490b      	ldr	r1, [pc, #44]	@ (800cb2c <prvCheckForValidListAndQueue+0x7c>)
 800cafe:	4618      	mov	r0, r3
 800cb00:	f7fe fd52 	bl	800b5a8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800cb04:	f000 f97a 	bl	800cdfc <vPortExitCritical>
}
 800cb08:	bf00      	nop
 800cb0a:	46bd      	mov	sp, r7
 800cb0c:	bd80      	pop	{r7, pc}
 800cb0e:	bf00      	nop
 800cb10:	20001494 	.word	0x20001494
 800cb14:	20001464 	.word	0x20001464
 800cb18:	20001478 	.word	0x20001478
 800cb1c:	2000148c 	.word	0x2000148c
 800cb20:	20001490 	.word	0x20001490
 800cb24:	20001540 	.word	0x20001540
 800cb28:	200014a0 	.word	0x200014a0
 800cb2c:	0800de28 	.word	0x0800de28

0800cb30 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800cb30:	b480      	push	{r7}
 800cb32:	b085      	sub	sp, #20
 800cb34:	af00      	add	r7, sp, #0
 800cb36:	60f8      	str	r0, [r7, #12]
 800cb38:	60b9      	str	r1, [r7, #8]
 800cb3a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800cb3c:	68fb      	ldr	r3, [r7, #12]
 800cb3e:	3b04      	subs	r3, #4
 800cb40:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800cb42:	68fb      	ldr	r3, [r7, #12]
 800cb44:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800cb48:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cb4a:	68fb      	ldr	r3, [r7, #12]
 800cb4c:	3b04      	subs	r3, #4
 800cb4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800cb50:	68bb      	ldr	r3, [r7, #8]
 800cb52:	f023 0201 	bic.w	r2, r3, #1
 800cb56:	68fb      	ldr	r3, [r7, #12]
 800cb58:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cb5a:	68fb      	ldr	r3, [r7, #12]
 800cb5c:	3b04      	subs	r3, #4
 800cb5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800cb60:	4a0c      	ldr	r2, [pc, #48]	@ (800cb94 <pxPortInitialiseStack+0x64>)
 800cb62:	68fb      	ldr	r3, [r7, #12]
 800cb64:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800cb66:	68fb      	ldr	r3, [r7, #12]
 800cb68:	3b14      	subs	r3, #20
 800cb6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800cb6c:	687a      	ldr	r2, [r7, #4]
 800cb6e:	68fb      	ldr	r3, [r7, #12]
 800cb70:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800cb72:	68fb      	ldr	r3, [r7, #12]
 800cb74:	3b04      	subs	r3, #4
 800cb76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800cb78:	68fb      	ldr	r3, [r7, #12]
 800cb7a:	f06f 0202 	mvn.w	r2, #2
 800cb7e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800cb80:	68fb      	ldr	r3, [r7, #12]
 800cb82:	3b20      	subs	r3, #32
 800cb84:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800cb86:	68fb      	ldr	r3, [r7, #12]
}
 800cb88:	4618      	mov	r0, r3
 800cb8a:	3714      	adds	r7, #20
 800cb8c:	46bd      	mov	sp, r7
 800cb8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb92:	4770      	bx	lr
 800cb94:	0800cb99 	.word	0x0800cb99

0800cb98 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800cb98:	b480      	push	{r7}
 800cb9a:	b085      	sub	sp, #20
 800cb9c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800cb9e:	2300      	movs	r3, #0
 800cba0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800cba2:	4b13      	ldr	r3, [pc, #76]	@ (800cbf0 <prvTaskExitError+0x58>)
 800cba4:	681b      	ldr	r3, [r3, #0]
 800cba6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800cbaa:	d00b      	beq.n	800cbc4 <prvTaskExitError+0x2c>
	__asm volatile
 800cbac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cbb0:	f383 8811 	msr	BASEPRI, r3
 800cbb4:	f3bf 8f6f 	isb	sy
 800cbb8:	f3bf 8f4f 	dsb	sy
 800cbbc:	60fb      	str	r3, [r7, #12]
}
 800cbbe:	bf00      	nop
 800cbc0:	bf00      	nop
 800cbc2:	e7fd      	b.n	800cbc0 <prvTaskExitError+0x28>
	__asm volatile
 800cbc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cbc8:	f383 8811 	msr	BASEPRI, r3
 800cbcc:	f3bf 8f6f 	isb	sy
 800cbd0:	f3bf 8f4f 	dsb	sy
 800cbd4:	60bb      	str	r3, [r7, #8]
}
 800cbd6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800cbd8:	bf00      	nop
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d0fc      	beq.n	800cbda <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800cbe0:	bf00      	nop
 800cbe2:	bf00      	nop
 800cbe4:	3714      	adds	r7, #20
 800cbe6:	46bd      	mov	sp, r7
 800cbe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbec:	4770      	bx	lr
 800cbee:	bf00      	nop
 800cbf0:	20000098 	.word	0x20000098
	...

0800cc00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800cc00:	4b07      	ldr	r3, [pc, #28]	@ (800cc20 <pxCurrentTCBConst2>)
 800cc02:	6819      	ldr	r1, [r3, #0]
 800cc04:	6808      	ldr	r0, [r1, #0]
 800cc06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc0a:	f380 8809 	msr	PSP, r0
 800cc0e:	f3bf 8f6f 	isb	sy
 800cc12:	f04f 0000 	mov.w	r0, #0
 800cc16:	f380 8811 	msr	BASEPRI, r0
 800cc1a:	4770      	bx	lr
 800cc1c:	f3af 8000 	nop.w

0800cc20 <pxCurrentTCBConst2>:
 800cc20:	20000f64 	.word	0x20000f64
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800cc24:	bf00      	nop
 800cc26:	bf00      	nop

0800cc28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800cc28:	4808      	ldr	r0, [pc, #32]	@ (800cc4c <prvPortStartFirstTask+0x24>)
 800cc2a:	6800      	ldr	r0, [r0, #0]
 800cc2c:	6800      	ldr	r0, [r0, #0]
 800cc2e:	f380 8808 	msr	MSP, r0
 800cc32:	f04f 0000 	mov.w	r0, #0
 800cc36:	f380 8814 	msr	CONTROL, r0
 800cc3a:	b662      	cpsie	i
 800cc3c:	b661      	cpsie	f
 800cc3e:	f3bf 8f4f 	dsb	sy
 800cc42:	f3bf 8f6f 	isb	sy
 800cc46:	df00      	svc	0
 800cc48:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800cc4a:	bf00      	nop
 800cc4c:	e000ed08 	.word	0xe000ed08

0800cc50 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800cc50:	b580      	push	{r7, lr}
 800cc52:	b086      	sub	sp, #24
 800cc54:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800cc56:	4b47      	ldr	r3, [pc, #284]	@ (800cd74 <xPortStartScheduler+0x124>)
 800cc58:	681b      	ldr	r3, [r3, #0]
 800cc5a:	4a47      	ldr	r2, [pc, #284]	@ (800cd78 <xPortStartScheduler+0x128>)
 800cc5c:	4293      	cmp	r3, r2
 800cc5e:	d10b      	bne.n	800cc78 <xPortStartScheduler+0x28>
	__asm volatile
 800cc60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc64:	f383 8811 	msr	BASEPRI, r3
 800cc68:	f3bf 8f6f 	isb	sy
 800cc6c:	f3bf 8f4f 	dsb	sy
 800cc70:	613b      	str	r3, [r7, #16]
}
 800cc72:	bf00      	nop
 800cc74:	bf00      	nop
 800cc76:	e7fd      	b.n	800cc74 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800cc78:	4b3e      	ldr	r3, [pc, #248]	@ (800cd74 <xPortStartScheduler+0x124>)
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	4a3f      	ldr	r2, [pc, #252]	@ (800cd7c <xPortStartScheduler+0x12c>)
 800cc7e:	4293      	cmp	r3, r2
 800cc80:	d10b      	bne.n	800cc9a <xPortStartScheduler+0x4a>
	__asm volatile
 800cc82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc86:	f383 8811 	msr	BASEPRI, r3
 800cc8a:	f3bf 8f6f 	isb	sy
 800cc8e:	f3bf 8f4f 	dsb	sy
 800cc92:	60fb      	str	r3, [r7, #12]
}
 800cc94:	bf00      	nop
 800cc96:	bf00      	nop
 800cc98:	e7fd      	b.n	800cc96 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800cc9a:	4b39      	ldr	r3, [pc, #228]	@ (800cd80 <xPortStartScheduler+0x130>)
 800cc9c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800cc9e:	697b      	ldr	r3, [r7, #20]
 800cca0:	781b      	ldrb	r3, [r3, #0]
 800cca2:	b2db      	uxtb	r3, r3
 800cca4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800cca6:	697b      	ldr	r3, [r7, #20]
 800cca8:	22ff      	movs	r2, #255	@ 0xff
 800ccaa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ccac:	697b      	ldr	r3, [r7, #20]
 800ccae:	781b      	ldrb	r3, [r3, #0]
 800ccb0:	b2db      	uxtb	r3, r3
 800ccb2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ccb4:	78fb      	ldrb	r3, [r7, #3]
 800ccb6:	b2db      	uxtb	r3, r3
 800ccb8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800ccbc:	b2da      	uxtb	r2, r3
 800ccbe:	4b31      	ldr	r3, [pc, #196]	@ (800cd84 <xPortStartScheduler+0x134>)
 800ccc0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ccc2:	4b31      	ldr	r3, [pc, #196]	@ (800cd88 <xPortStartScheduler+0x138>)
 800ccc4:	2207      	movs	r2, #7
 800ccc6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ccc8:	e009      	b.n	800ccde <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800ccca:	4b2f      	ldr	r3, [pc, #188]	@ (800cd88 <xPortStartScheduler+0x138>)
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	3b01      	subs	r3, #1
 800ccd0:	4a2d      	ldr	r2, [pc, #180]	@ (800cd88 <xPortStartScheduler+0x138>)
 800ccd2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ccd4:	78fb      	ldrb	r3, [r7, #3]
 800ccd6:	b2db      	uxtb	r3, r3
 800ccd8:	005b      	lsls	r3, r3, #1
 800ccda:	b2db      	uxtb	r3, r3
 800ccdc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ccde:	78fb      	ldrb	r3, [r7, #3]
 800cce0:	b2db      	uxtb	r3, r3
 800cce2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cce6:	2b80      	cmp	r3, #128	@ 0x80
 800cce8:	d0ef      	beq.n	800ccca <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ccea:	4b27      	ldr	r3, [pc, #156]	@ (800cd88 <xPortStartScheduler+0x138>)
 800ccec:	681b      	ldr	r3, [r3, #0]
 800ccee:	f1c3 0307 	rsb	r3, r3, #7
 800ccf2:	2b04      	cmp	r3, #4
 800ccf4:	d00b      	beq.n	800cd0e <xPortStartScheduler+0xbe>
	__asm volatile
 800ccf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ccfa:	f383 8811 	msr	BASEPRI, r3
 800ccfe:	f3bf 8f6f 	isb	sy
 800cd02:	f3bf 8f4f 	dsb	sy
 800cd06:	60bb      	str	r3, [r7, #8]
}
 800cd08:	bf00      	nop
 800cd0a:	bf00      	nop
 800cd0c:	e7fd      	b.n	800cd0a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800cd0e:	4b1e      	ldr	r3, [pc, #120]	@ (800cd88 <xPortStartScheduler+0x138>)
 800cd10:	681b      	ldr	r3, [r3, #0]
 800cd12:	021b      	lsls	r3, r3, #8
 800cd14:	4a1c      	ldr	r2, [pc, #112]	@ (800cd88 <xPortStartScheduler+0x138>)
 800cd16:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800cd18:	4b1b      	ldr	r3, [pc, #108]	@ (800cd88 <xPortStartScheduler+0x138>)
 800cd1a:	681b      	ldr	r3, [r3, #0]
 800cd1c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800cd20:	4a19      	ldr	r2, [pc, #100]	@ (800cd88 <xPortStartScheduler+0x138>)
 800cd22:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	b2da      	uxtb	r2, r3
 800cd28:	697b      	ldr	r3, [r7, #20]
 800cd2a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800cd2c:	4b17      	ldr	r3, [pc, #92]	@ (800cd8c <xPortStartScheduler+0x13c>)
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	4a16      	ldr	r2, [pc, #88]	@ (800cd8c <xPortStartScheduler+0x13c>)
 800cd32:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800cd36:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800cd38:	4b14      	ldr	r3, [pc, #80]	@ (800cd8c <xPortStartScheduler+0x13c>)
 800cd3a:	681b      	ldr	r3, [r3, #0]
 800cd3c:	4a13      	ldr	r2, [pc, #76]	@ (800cd8c <xPortStartScheduler+0x13c>)
 800cd3e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800cd42:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800cd44:	f000 f8da 	bl	800cefc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800cd48:	4b11      	ldr	r3, [pc, #68]	@ (800cd90 <xPortStartScheduler+0x140>)
 800cd4a:	2200      	movs	r2, #0
 800cd4c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800cd4e:	f000 f8f9 	bl	800cf44 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800cd52:	4b10      	ldr	r3, [pc, #64]	@ (800cd94 <xPortStartScheduler+0x144>)
 800cd54:	681b      	ldr	r3, [r3, #0]
 800cd56:	4a0f      	ldr	r2, [pc, #60]	@ (800cd94 <xPortStartScheduler+0x144>)
 800cd58:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800cd5c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800cd5e:	f7ff ff63 	bl	800cc28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800cd62:	f7ff f839 	bl	800bdd8 <vTaskSwitchContext>
	prvTaskExitError();
 800cd66:	f7ff ff17 	bl	800cb98 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800cd6a:	2300      	movs	r3, #0
}
 800cd6c:	4618      	mov	r0, r3
 800cd6e:	3718      	adds	r7, #24
 800cd70:	46bd      	mov	sp, r7
 800cd72:	bd80      	pop	{r7, pc}
 800cd74:	e000ed00 	.word	0xe000ed00
 800cd78:	410fc271 	.word	0x410fc271
 800cd7c:	410fc270 	.word	0x410fc270
 800cd80:	e000e400 	.word	0xe000e400
 800cd84:	20001590 	.word	0x20001590
 800cd88:	20001594 	.word	0x20001594
 800cd8c:	e000ed20 	.word	0xe000ed20
 800cd90:	20000098 	.word	0x20000098
 800cd94:	e000ef34 	.word	0xe000ef34

0800cd98 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800cd98:	b480      	push	{r7}
 800cd9a:	b083      	sub	sp, #12
 800cd9c:	af00      	add	r7, sp, #0
	__asm volatile
 800cd9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cda2:	f383 8811 	msr	BASEPRI, r3
 800cda6:	f3bf 8f6f 	isb	sy
 800cdaa:	f3bf 8f4f 	dsb	sy
 800cdae:	607b      	str	r3, [r7, #4]
}
 800cdb0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800cdb2:	4b10      	ldr	r3, [pc, #64]	@ (800cdf4 <vPortEnterCritical+0x5c>)
 800cdb4:	681b      	ldr	r3, [r3, #0]
 800cdb6:	3301      	adds	r3, #1
 800cdb8:	4a0e      	ldr	r2, [pc, #56]	@ (800cdf4 <vPortEnterCritical+0x5c>)
 800cdba:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800cdbc:	4b0d      	ldr	r3, [pc, #52]	@ (800cdf4 <vPortEnterCritical+0x5c>)
 800cdbe:	681b      	ldr	r3, [r3, #0]
 800cdc0:	2b01      	cmp	r3, #1
 800cdc2:	d110      	bne.n	800cde6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800cdc4:	4b0c      	ldr	r3, [pc, #48]	@ (800cdf8 <vPortEnterCritical+0x60>)
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	b2db      	uxtb	r3, r3
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	d00b      	beq.n	800cde6 <vPortEnterCritical+0x4e>
	__asm volatile
 800cdce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cdd2:	f383 8811 	msr	BASEPRI, r3
 800cdd6:	f3bf 8f6f 	isb	sy
 800cdda:	f3bf 8f4f 	dsb	sy
 800cdde:	603b      	str	r3, [r7, #0]
}
 800cde0:	bf00      	nop
 800cde2:	bf00      	nop
 800cde4:	e7fd      	b.n	800cde2 <vPortEnterCritical+0x4a>
	}
}
 800cde6:	bf00      	nop
 800cde8:	370c      	adds	r7, #12
 800cdea:	46bd      	mov	sp, r7
 800cdec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdf0:	4770      	bx	lr
 800cdf2:	bf00      	nop
 800cdf4:	20000098 	.word	0x20000098
 800cdf8:	e000ed04 	.word	0xe000ed04

0800cdfc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800cdfc:	b480      	push	{r7}
 800cdfe:	b083      	sub	sp, #12
 800ce00:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ce02:	4b12      	ldr	r3, [pc, #72]	@ (800ce4c <vPortExitCritical+0x50>)
 800ce04:	681b      	ldr	r3, [r3, #0]
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d10b      	bne.n	800ce22 <vPortExitCritical+0x26>
	__asm volatile
 800ce0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce0e:	f383 8811 	msr	BASEPRI, r3
 800ce12:	f3bf 8f6f 	isb	sy
 800ce16:	f3bf 8f4f 	dsb	sy
 800ce1a:	607b      	str	r3, [r7, #4]
}
 800ce1c:	bf00      	nop
 800ce1e:	bf00      	nop
 800ce20:	e7fd      	b.n	800ce1e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800ce22:	4b0a      	ldr	r3, [pc, #40]	@ (800ce4c <vPortExitCritical+0x50>)
 800ce24:	681b      	ldr	r3, [r3, #0]
 800ce26:	3b01      	subs	r3, #1
 800ce28:	4a08      	ldr	r2, [pc, #32]	@ (800ce4c <vPortExitCritical+0x50>)
 800ce2a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ce2c:	4b07      	ldr	r3, [pc, #28]	@ (800ce4c <vPortExitCritical+0x50>)
 800ce2e:	681b      	ldr	r3, [r3, #0]
 800ce30:	2b00      	cmp	r3, #0
 800ce32:	d105      	bne.n	800ce40 <vPortExitCritical+0x44>
 800ce34:	2300      	movs	r3, #0
 800ce36:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ce38:	683b      	ldr	r3, [r7, #0]
 800ce3a:	f383 8811 	msr	BASEPRI, r3
}
 800ce3e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ce40:	bf00      	nop
 800ce42:	370c      	adds	r7, #12
 800ce44:	46bd      	mov	sp, r7
 800ce46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce4a:	4770      	bx	lr
 800ce4c:	20000098 	.word	0x20000098

0800ce50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ce50:	f3ef 8009 	mrs	r0, PSP
 800ce54:	f3bf 8f6f 	isb	sy
 800ce58:	4b15      	ldr	r3, [pc, #84]	@ (800ceb0 <pxCurrentTCBConst>)
 800ce5a:	681a      	ldr	r2, [r3, #0]
 800ce5c:	f01e 0f10 	tst.w	lr, #16
 800ce60:	bf08      	it	eq
 800ce62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ce66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce6a:	6010      	str	r0, [r2, #0]
 800ce6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ce70:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800ce74:	f380 8811 	msr	BASEPRI, r0
 800ce78:	f3bf 8f4f 	dsb	sy
 800ce7c:	f3bf 8f6f 	isb	sy
 800ce80:	f7fe ffaa 	bl	800bdd8 <vTaskSwitchContext>
 800ce84:	f04f 0000 	mov.w	r0, #0
 800ce88:	f380 8811 	msr	BASEPRI, r0
 800ce8c:	bc09      	pop	{r0, r3}
 800ce8e:	6819      	ldr	r1, [r3, #0]
 800ce90:	6808      	ldr	r0, [r1, #0]
 800ce92:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce96:	f01e 0f10 	tst.w	lr, #16
 800ce9a:	bf08      	it	eq
 800ce9c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800cea0:	f380 8809 	msr	PSP, r0
 800cea4:	f3bf 8f6f 	isb	sy
 800cea8:	4770      	bx	lr
 800ceaa:	bf00      	nop
 800ceac:	f3af 8000 	nop.w

0800ceb0 <pxCurrentTCBConst>:
 800ceb0:	20000f64 	.word	0x20000f64
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ceb4:	bf00      	nop
 800ceb6:	bf00      	nop

0800ceb8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ceb8:	b580      	push	{r7, lr}
 800ceba:	b082      	sub	sp, #8
 800cebc:	af00      	add	r7, sp, #0
	__asm volatile
 800cebe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cec2:	f383 8811 	msr	BASEPRI, r3
 800cec6:	f3bf 8f6f 	isb	sy
 800ceca:	f3bf 8f4f 	dsb	sy
 800cece:	607b      	str	r3, [r7, #4]
}
 800ced0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ced2:	f7fe fec7 	bl	800bc64 <xTaskIncrementTick>
 800ced6:	4603      	mov	r3, r0
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	d003      	beq.n	800cee4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800cedc:	4b06      	ldr	r3, [pc, #24]	@ (800cef8 <xPortSysTickHandler+0x40>)
 800cede:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cee2:	601a      	str	r2, [r3, #0]
 800cee4:	2300      	movs	r3, #0
 800cee6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cee8:	683b      	ldr	r3, [r7, #0]
 800ceea:	f383 8811 	msr	BASEPRI, r3
}
 800ceee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800cef0:	bf00      	nop
 800cef2:	3708      	adds	r7, #8
 800cef4:	46bd      	mov	sp, r7
 800cef6:	bd80      	pop	{r7, pc}
 800cef8:	e000ed04 	.word	0xe000ed04

0800cefc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800cefc:	b480      	push	{r7}
 800cefe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800cf00:	4b0b      	ldr	r3, [pc, #44]	@ (800cf30 <vPortSetupTimerInterrupt+0x34>)
 800cf02:	2200      	movs	r2, #0
 800cf04:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800cf06:	4b0b      	ldr	r3, [pc, #44]	@ (800cf34 <vPortSetupTimerInterrupt+0x38>)
 800cf08:	2200      	movs	r2, #0
 800cf0a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800cf0c:	4b0a      	ldr	r3, [pc, #40]	@ (800cf38 <vPortSetupTimerInterrupt+0x3c>)
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	4a0a      	ldr	r2, [pc, #40]	@ (800cf3c <vPortSetupTimerInterrupt+0x40>)
 800cf12:	fba2 2303 	umull	r2, r3, r2, r3
 800cf16:	099b      	lsrs	r3, r3, #6
 800cf18:	4a09      	ldr	r2, [pc, #36]	@ (800cf40 <vPortSetupTimerInterrupt+0x44>)
 800cf1a:	3b01      	subs	r3, #1
 800cf1c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800cf1e:	4b04      	ldr	r3, [pc, #16]	@ (800cf30 <vPortSetupTimerInterrupt+0x34>)
 800cf20:	2207      	movs	r2, #7
 800cf22:	601a      	str	r2, [r3, #0]
}
 800cf24:	bf00      	nop
 800cf26:	46bd      	mov	sp, r7
 800cf28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf2c:	4770      	bx	lr
 800cf2e:	bf00      	nop
 800cf30:	e000e010 	.word	0xe000e010
 800cf34:	e000e018 	.word	0xe000e018
 800cf38:	20000000 	.word	0x20000000
 800cf3c:	10624dd3 	.word	0x10624dd3
 800cf40:	e000e014 	.word	0xe000e014

0800cf44 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800cf44:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800cf54 <vPortEnableVFP+0x10>
 800cf48:	6801      	ldr	r1, [r0, #0]
 800cf4a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800cf4e:	6001      	str	r1, [r0, #0]
 800cf50:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800cf52:	bf00      	nop
 800cf54:	e000ed88 	.word	0xe000ed88

0800cf58 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800cf58:	b480      	push	{r7}
 800cf5a:	b085      	sub	sp, #20
 800cf5c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800cf5e:	f3ef 8305 	mrs	r3, IPSR
 800cf62:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800cf64:	68fb      	ldr	r3, [r7, #12]
 800cf66:	2b0f      	cmp	r3, #15
 800cf68:	d915      	bls.n	800cf96 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800cf6a:	4a18      	ldr	r2, [pc, #96]	@ (800cfcc <vPortValidateInterruptPriority+0x74>)
 800cf6c:	68fb      	ldr	r3, [r7, #12]
 800cf6e:	4413      	add	r3, r2
 800cf70:	781b      	ldrb	r3, [r3, #0]
 800cf72:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800cf74:	4b16      	ldr	r3, [pc, #88]	@ (800cfd0 <vPortValidateInterruptPriority+0x78>)
 800cf76:	781b      	ldrb	r3, [r3, #0]
 800cf78:	7afa      	ldrb	r2, [r7, #11]
 800cf7a:	429a      	cmp	r2, r3
 800cf7c:	d20b      	bcs.n	800cf96 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800cf7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf82:	f383 8811 	msr	BASEPRI, r3
 800cf86:	f3bf 8f6f 	isb	sy
 800cf8a:	f3bf 8f4f 	dsb	sy
 800cf8e:	607b      	str	r3, [r7, #4]
}
 800cf90:	bf00      	nop
 800cf92:	bf00      	nop
 800cf94:	e7fd      	b.n	800cf92 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800cf96:	4b0f      	ldr	r3, [pc, #60]	@ (800cfd4 <vPortValidateInterruptPriority+0x7c>)
 800cf98:	681b      	ldr	r3, [r3, #0]
 800cf9a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800cf9e:	4b0e      	ldr	r3, [pc, #56]	@ (800cfd8 <vPortValidateInterruptPriority+0x80>)
 800cfa0:	681b      	ldr	r3, [r3, #0]
 800cfa2:	429a      	cmp	r2, r3
 800cfa4:	d90b      	bls.n	800cfbe <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800cfa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cfaa:	f383 8811 	msr	BASEPRI, r3
 800cfae:	f3bf 8f6f 	isb	sy
 800cfb2:	f3bf 8f4f 	dsb	sy
 800cfb6:	603b      	str	r3, [r7, #0]
}
 800cfb8:	bf00      	nop
 800cfba:	bf00      	nop
 800cfbc:	e7fd      	b.n	800cfba <vPortValidateInterruptPriority+0x62>
	}
 800cfbe:	bf00      	nop
 800cfc0:	3714      	adds	r7, #20
 800cfc2:	46bd      	mov	sp, r7
 800cfc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfc8:	4770      	bx	lr
 800cfca:	bf00      	nop
 800cfcc:	e000e3f0 	.word	0xe000e3f0
 800cfd0:	20001590 	.word	0x20001590
 800cfd4:	e000ed0c 	.word	0xe000ed0c
 800cfd8:	20001594 	.word	0x20001594

0800cfdc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800cfdc:	b580      	push	{r7, lr}
 800cfde:	b08a      	sub	sp, #40	@ 0x28
 800cfe0:	af00      	add	r7, sp, #0
 800cfe2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800cfe4:	2300      	movs	r3, #0
 800cfe6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800cfe8:	f7fe fd80 	bl	800baec <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800cfec:	4b5c      	ldr	r3, [pc, #368]	@ (800d160 <pvPortMalloc+0x184>)
 800cfee:	681b      	ldr	r3, [r3, #0]
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	d101      	bne.n	800cff8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800cff4:	f000 f924 	bl	800d240 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800cff8:	4b5a      	ldr	r3, [pc, #360]	@ (800d164 <pvPortMalloc+0x188>)
 800cffa:	681a      	ldr	r2, [r3, #0]
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	4013      	ands	r3, r2
 800d000:	2b00      	cmp	r3, #0
 800d002:	f040 8095 	bne.w	800d130 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	2b00      	cmp	r3, #0
 800d00a:	d01e      	beq.n	800d04a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800d00c:	2208      	movs	r2, #8
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	4413      	add	r3, r2
 800d012:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	f003 0307 	and.w	r3, r3, #7
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	d015      	beq.n	800d04a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	f023 0307 	bic.w	r3, r3, #7
 800d024:	3308      	adds	r3, #8
 800d026:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	f003 0307 	and.w	r3, r3, #7
 800d02e:	2b00      	cmp	r3, #0
 800d030:	d00b      	beq.n	800d04a <pvPortMalloc+0x6e>
	__asm volatile
 800d032:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d036:	f383 8811 	msr	BASEPRI, r3
 800d03a:	f3bf 8f6f 	isb	sy
 800d03e:	f3bf 8f4f 	dsb	sy
 800d042:	617b      	str	r3, [r7, #20]
}
 800d044:	bf00      	nop
 800d046:	bf00      	nop
 800d048:	e7fd      	b.n	800d046 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	d06f      	beq.n	800d130 <pvPortMalloc+0x154>
 800d050:	4b45      	ldr	r3, [pc, #276]	@ (800d168 <pvPortMalloc+0x18c>)
 800d052:	681b      	ldr	r3, [r3, #0]
 800d054:	687a      	ldr	r2, [r7, #4]
 800d056:	429a      	cmp	r2, r3
 800d058:	d86a      	bhi.n	800d130 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d05a:	4b44      	ldr	r3, [pc, #272]	@ (800d16c <pvPortMalloc+0x190>)
 800d05c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d05e:	4b43      	ldr	r3, [pc, #268]	@ (800d16c <pvPortMalloc+0x190>)
 800d060:	681b      	ldr	r3, [r3, #0]
 800d062:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d064:	e004      	b.n	800d070 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800d066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d068:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d06a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d06c:	681b      	ldr	r3, [r3, #0]
 800d06e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d070:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d072:	685b      	ldr	r3, [r3, #4]
 800d074:	687a      	ldr	r2, [r7, #4]
 800d076:	429a      	cmp	r2, r3
 800d078:	d903      	bls.n	800d082 <pvPortMalloc+0xa6>
 800d07a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d07c:	681b      	ldr	r3, [r3, #0]
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d1f1      	bne.n	800d066 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d082:	4b37      	ldr	r3, [pc, #220]	@ (800d160 <pvPortMalloc+0x184>)
 800d084:	681b      	ldr	r3, [r3, #0]
 800d086:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d088:	429a      	cmp	r2, r3
 800d08a:	d051      	beq.n	800d130 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d08c:	6a3b      	ldr	r3, [r7, #32]
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	2208      	movs	r2, #8
 800d092:	4413      	add	r3, r2
 800d094:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d098:	681a      	ldr	r2, [r3, #0]
 800d09a:	6a3b      	ldr	r3, [r7, #32]
 800d09c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d09e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0a0:	685a      	ldr	r2, [r3, #4]
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	1ad2      	subs	r2, r2, r3
 800d0a6:	2308      	movs	r3, #8
 800d0a8:	005b      	lsls	r3, r3, #1
 800d0aa:	429a      	cmp	r2, r3
 800d0ac:	d920      	bls.n	800d0f0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d0ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	4413      	add	r3, r2
 800d0b4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d0b6:	69bb      	ldr	r3, [r7, #24]
 800d0b8:	f003 0307 	and.w	r3, r3, #7
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d00b      	beq.n	800d0d8 <pvPortMalloc+0xfc>
	__asm volatile
 800d0c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d0c4:	f383 8811 	msr	BASEPRI, r3
 800d0c8:	f3bf 8f6f 	isb	sy
 800d0cc:	f3bf 8f4f 	dsb	sy
 800d0d0:	613b      	str	r3, [r7, #16]
}
 800d0d2:	bf00      	nop
 800d0d4:	bf00      	nop
 800d0d6:	e7fd      	b.n	800d0d4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d0d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0da:	685a      	ldr	r2, [r3, #4]
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	1ad2      	subs	r2, r2, r3
 800d0e0:	69bb      	ldr	r3, [r7, #24]
 800d0e2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d0e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0e6:	687a      	ldr	r2, [r7, #4]
 800d0e8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d0ea:	69b8      	ldr	r0, [r7, #24]
 800d0ec:	f000 f90a 	bl	800d304 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d0f0:	4b1d      	ldr	r3, [pc, #116]	@ (800d168 <pvPortMalloc+0x18c>)
 800d0f2:	681a      	ldr	r2, [r3, #0]
 800d0f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0f6:	685b      	ldr	r3, [r3, #4]
 800d0f8:	1ad3      	subs	r3, r2, r3
 800d0fa:	4a1b      	ldr	r2, [pc, #108]	@ (800d168 <pvPortMalloc+0x18c>)
 800d0fc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d0fe:	4b1a      	ldr	r3, [pc, #104]	@ (800d168 <pvPortMalloc+0x18c>)
 800d100:	681a      	ldr	r2, [r3, #0]
 800d102:	4b1b      	ldr	r3, [pc, #108]	@ (800d170 <pvPortMalloc+0x194>)
 800d104:	681b      	ldr	r3, [r3, #0]
 800d106:	429a      	cmp	r2, r3
 800d108:	d203      	bcs.n	800d112 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d10a:	4b17      	ldr	r3, [pc, #92]	@ (800d168 <pvPortMalloc+0x18c>)
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	4a18      	ldr	r2, [pc, #96]	@ (800d170 <pvPortMalloc+0x194>)
 800d110:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d114:	685a      	ldr	r2, [r3, #4]
 800d116:	4b13      	ldr	r3, [pc, #76]	@ (800d164 <pvPortMalloc+0x188>)
 800d118:	681b      	ldr	r3, [r3, #0]
 800d11a:	431a      	orrs	r2, r3
 800d11c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d11e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d120:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d122:	2200      	movs	r2, #0
 800d124:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800d126:	4b13      	ldr	r3, [pc, #76]	@ (800d174 <pvPortMalloc+0x198>)
 800d128:	681b      	ldr	r3, [r3, #0]
 800d12a:	3301      	adds	r3, #1
 800d12c:	4a11      	ldr	r2, [pc, #68]	@ (800d174 <pvPortMalloc+0x198>)
 800d12e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d130:	f7fe fcea 	bl	800bb08 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d134:	69fb      	ldr	r3, [r7, #28]
 800d136:	f003 0307 	and.w	r3, r3, #7
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	d00b      	beq.n	800d156 <pvPortMalloc+0x17a>
	__asm volatile
 800d13e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d142:	f383 8811 	msr	BASEPRI, r3
 800d146:	f3bf 8f6f 	isb	sy
 800d14a:	f3bf 8f4f 	dsb	sy
 800d14e:	60fb      	str	r3, [r7, #12]
}
 800d150:	bf00      	nop
 800d152:	bf00      	nop
 800d154:	e7fd      	b.n	800d152 <pvPortMalloc+0x176>
	return pvReturn;
 800d156:	69fb      	ldr	r3, [r7, #28]
}
 800d158:	4618      	mov	r0, r3
 800d15a:	3728      	adds	r7, #40	@ 0x28
 800d15c:	46bd      	mov	sp, r7
 800d15e:	bd80      	pop	{r7, pc}
 800d160:	200115a0 	.word	0x200115a0
 800d164:	200115b4 	.word	0x200115b4
 800d168:	200115a4 	.word	0x200115a4
 800d16c:	20011598 	.word	0x20011598
 800d170:	200115a8 	.word	0x200115a8
 800d174:	200115ac 	.word	0x200115ac

0800d178 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d178:	b580      	push	{r7, lr}
 800d17a:	b086      	sub	sp, #24
 800d17c:	af00      	add	r7, sp, #0
 800d17e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	2b00      	cmp	r3, #0
 800d188:	d04f      	beq.n	800d22a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d18a:	2308      	movs	r3, #8
 800d18c:	425b      	negs	r3, r3
 800d18e:	697a      	ldr	r2, [r7, #20]
 800d190:	4413      	add	r3, r2
 800d192:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d194:	697b      	ldr	r3, [r7, #20]
 800d196:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d198:	693b      	ldr	r3, [r7, #16]
 800d19a:	685a      	ldr	r2, [r3, #4]
 800d19c:	4b25      	ldr	r3, [pc, #148]	@ (800d234 <vPortFree+0xbc>)
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	4013      	ands	r3, r2
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	d10b      	bne.n	800d1be <vPortFree+0x46>
	__asm volatile
 800d1a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d1aa:	f383 8811 	msr	BASEPRI, r3
 800d1ae:	f3bf 8f6f 	isb	sy
 800d1b2:	f3bf 8f4f 	dsb	sy
 800d1b6:	60fb      	str	r3, [r7, #12]
}
 800d1b8:	bf00      	nop
 800d1ba:	bf00      	nop
 800d1bc:	e7fd      	b.n	800d1ba <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d1be:	693b      	ldr	r3, [r7, #16]
 800d1c0:	681b      	ldr	r3, [r3, #0]
 800d1c2:	2b00      	cmp	r3, #0
 800d1c4:	d00b      	beq.n	800d1de <vPortFree+0x66>
	__asm volatile
 800d1c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d1ca:	f383 8811 	msr	BASEPRI, r3
 800d1ce:	f3bf 8f6f 	isb	sy
 800d1d2:	f3bf 8f4f 	dsb	sy
 800d1d6:	60bb      	str	r3, [r7, #8]
}
 800d1d8:	bf00      	nop
 800d1da:	bf00      	nop
 800d1dc:	e7fd      	b.n	800d1da <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d1de:	693b      	ldr	r3, [r7, #16]
 800d1e0:	685a      	ldr	r2, [r3, #4]
 800d1e2:	4b14      	ldr	r3, [pc, #80]	@ (800d234 <vPortFree+0xbc>)
 800d1e4:	681b      	ldr	r3, [r3, #0]
 800d1e6:	4013      	ands	r3, r2
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	d01e      	beq.n	800d22a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d1ec:	693b      	ldr	r3, [r7, #16]
 800d1ee:	681b      	ldr	r3, [r3, #0]
 800d1f0:	2b00      	cmp	r3, #0
 800d1f2:	d11a      	bne.n	800d22a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d1f4:	693b      	ldr	r3, [r7, #16]
 800d1f6:	685a      	ldr	r2, [r3, #4]
 800d1f8:	4b0e      	ldr	r3, [pc, #56]	@ (800d234 <vPortFree+0xbc>)
 800d1fa:	681b      	ldr	r3, [r3, #0]
 800d1fc:	43db      	mvns	r3, r3
 800d1fe:	401a      	ands	r2, r3
 800d200:	693b      	ldr	r3, [r7, #16]
 800d202:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d204:	f7fe fc72 	bl	800baec <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d208:	693b      	ldr	r3, [r7, #16]
 800d20a:	685a      	ldr	r2, [r3, #4]
 800d20c:	4b0a      	ldr	r3, [pc, #40]	@ (800d238 <vPortFree+0xc0>)
 800d20e:	681b      	ldr	r3, [r3, #0]
 800d210:	4413      	add	r3, r2
 800d212:	4a09      	ldr	r2, [pc, #36]	@ (800d238 <vPortFree+0xc0>)
 800d214:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d216:	6938      	ldr	r0, [r7, #16]
 800d218:	f000 f874 	bl	800d304 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800d21c:	4b07      	ldr	r3, [pc, #28]	@ (800d23c <vPortFree+0xc4>)
 800d21e:	681b      	ldr	r3, [r3, #0]
 800d220:	3301      	adds	r3, #1
 800d222:	4a06      	ldr	r2, [pc, #24]	@ (800d23c <vPortFree+0xc4>)
 800d224:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800d226:	f7fe fc6f 	bl	800bb08 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d22a:	bf00      	nop
 800d22c:	3718      	adds	r7, #24
 800d22e:	46bd      	mov	sp, r7
 800d230:	bd80      	pop	{r7, pc}
 800d232:	bf00      	nop
 800d234:	200115b4 	.word	0x200115b4
 800d238:	200115a4 	.word	0x200115a4
 800d23c:	200115b0 	.word	0x200115b0

0800d240 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d240:	b480      	push	{r7}
 800d242:	b085      	sub	sp, #20
 800d244:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d246:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800d24a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d24c:	4b27      	ldr	r3, [pc, #156]	@ (800d2ec <prvHeapInit+0xac>)
 800d24e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d250:	68fb      	ldr	r3, [r7, #12]
 800d252:	f003 0307 	and.w	r3, r3, #7
 800d256:	2b00      	cmp	r3, #0
 800d258:	d00c      	beq.n	800d274 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d25a:	68fb      	ldr	r3, [r7, #12]
 800d25c:	3307      	adds	r3, #7
 800d25e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d260:	68fb      	ldr	r3, [r7, #12]
 800d262:	f023 0307 	bic.w	r3, r3, #7
 800d266:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d268:	68ba      	ldr	r2, [r7, #8]
 800d26a:	68fb      	ldr	r3, [r7, #12]
 800d26c:	1ad3      	subs	r3, r2, r3
 800d26e:	4a1f      	ldr	r2, [pc, #124]	@ (800d2ec <prvHeapInit+0xac>)
 800d270:	4413      	add	r3, r2
 800d272:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d274:	68fb      	ldr	r3, [r7, #12]
 800d276:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d278:	4a1d      	ldr	r2, [pc, #116]	@ (800d2f0 <prvHeapInit+0xb0>)
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d27e:	4b1c      	ldr	r3, [pc, #112]	@ (800d2f0 <prvHeapInit+0xb0>)
 800d280:	2200      	movs	r2, #0
 800d282:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	68ba      	ldr	r2, [r7, #8]
 800d288:	4413      	add	r3, r2
 800d28a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d28c:	2208      	movs	r2, #8
 800d28e:	68fb      	ldr	r3, [r7, #12]
 800d290:	1a9b      	subs	r3, r3, r2
 800d292:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d294:	68fb      	ldr	r3, [r7, #12]
 800d296:	f023 0307 	bic.w	r3, r3, #7
 800d29a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d29c:	68fb      	ldr	r3, [r7, #12]
 800d29e:	4a15      	ldr	r2, [pc, #84]	@ (800d2f4 <prvHeapInit+0xb4>)
 800d2a0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d2a2:	4b14      	ldr	r3, [pc, #80]	@ (800d2f4 <prvHeapInit+0xb4>)
 800d2a4:	681b      	ldr	r3, [r3, #0]
 800d2a6:	2200      	movs	r2, #0
 800d2a8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d2aa:	4b12      	ldr	r3, [pc, #72]	@ (800d2f4 <prvHeapInit+0xb4>)
 800d2ac:	681b      	ldr	r3, [r3, #0]
 800d2ae:	2200      	movs	r2, #0
 800d2b0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d2b6:	683b      	ldr	r3, [r7, #0]
 800d2b8:	68fa      	ldr	r2, [r7, #12]
 800d2ba:	1ad2      	subs	r2, r2, r3
 800d2bc:	683b      	ldr	r3, [r7, #0]
 800d2be:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d2c0:	4b0c      	ldr	r3, [pc, #48]	@ (800d2f4 <prvHeapInit+0xb4>)
 800d2c2:	681a      	ldr	r2, [r3, #0]
 800d2c4:	683b      	ldr	r3, [r7, #0]
 800d2c6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d2c8:	683b      	ldr	r3, [r7, #0]
 800d2ca:	685b      	ldr	r3, [r3, #4]
 800d2cc:	4a0a      	ldr	r2, [pc, #40]	@ (800d2f8 <prvHeapInit+0xb8>)
 800d2ce:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d2d0:	683b      	ldr	r3, [r7, #0]
 800d2d2:	685b      	ldr	r3, [r3, #4]
 800d2d4:	4a09      	ldr	r2, [pc, #36]	@ (800d2fc <prvHeapInit+0xbc>)
 800d2d6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d2d8:	4b09      	ldr	r3, [pc, #36]	@ (800d300 <prvHeapInit+0xc0>)
 800d2da:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800d2de:	601a      	str	r2, [r3, #0]
}
 800d2e0:	bf00      	nop
 800d2e2:	3714      	adds	r7, #20
 800d2e4:	46bd      	mov	sp, r7
 800d2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ea:	4770      	bx	lr
 800d2ec:	20001598 	.word	0x20001598
 800d2f0:	20011598 	.word	0x20011598
 800d2f4:	200115a0 	.word	0x200115a0
 800d2f8:	200115a8 	.word	0x200115a8
 800d2fc:	200115a4 	.word	0x200115a4
 800d300:	200115b4 	.word	0x200115b4

0800d304 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d304:	b480      	push	{r7}
 800d306:	b085      	sub	sp, #20
 800d308:	af00      	add	r7, sp, #0
 800d30a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d30c:	4b28      	ldr	r3, [pc, #160]	@ (800d3b0 <prvInsertBlockIntoFreeList+0xac>)
 800d30e:	60fb      	str	r3, [r7, #12]
 800d310:	e002      	b.n	800d318 <prvInsertBlockIntoFreeList+0x14>
 800d312:	68fb      	ldr	r3, [r7, #12]
 800d314:	681b      	ldr	r3, [r3, #0]
 800d316:	60fb      	str	r3, [r7, #12]
 800d318:	68fb      	ldr	r3, [r7, #12]
 800d31a:	681b      	ldr	r3, [r3, #0]
 800d31c:	687a      	ldr	r2, [r7, #4]
 800d31e:	429a      	cmp	r2, r3
 800d320:	d8f7      	bhi.n	800d312 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d322:	68fb      	ldr	r3, [r7, #12]
 800d324:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d326:	68fb      	ldr	r3, [r7, #12]
 800d328:	685b      	ldr	r3, [r3, #4]
 800d32a:	68ba      	ldr	r2, [r7, #8]
 800d32c:	4413      	add	r3, r2
 800d32e:	687a      	ldr	r2, [r7, #4]
 800d330:	429a      	cmp	r2, r3
 800d332:	d108      	bne.n	800d346 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d334:	68fb      	ldr	r3, [r7, #12]
 800d336:	685a      	ldr	r2, [r3, #4]
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	685b      	ldr	r3, [r3, #4]
 800d33c:	441a      	add	r2, r3
 800d33e:	68fb      	ldr	r3, [r7, #12]
 800d340:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d342:	68fb      	ldr	r3, [r7, #12]
 800d344:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	685b      	ldr	r3, [r3, #4]
 800d34e:	68ba      	ldr	r2, [r7, #8]
 800d350:	441a      	add	r2, r3
 800d352:	68fb      	ldr	r3, [r7, #12]
 800d354:	681b      	ldr	r3, [r3, #0]
 800d356:	429a      	cmp	r2, r3
 800d358:	d118      	bne.n	800d38c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d35a:	68fb      	ldr	r3, [r7, #12]
 800d35c:	681a      	ldr	r2, [r3, #0]
 800d35e:	4b15      	ldr	r3, [pc, #84]	@ (800d3b4 <prvInsertBlockIntoFreeList+0xb0>)
 800d360:	681b      	ldr	r3, [r3, #0]
 800d362:	429a      	cmp	r2, r3
 800d364:	d00d      	beq.n	800d382 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	685a      	ldr	r2, [r3, #4]
 800d36a:	68fb      	ldr	r3, [r7, #12]
 800d36c:	681b      	ldr	r3, [r3, #0]
 800d36e:	685b      	ldr	r3, [r3, #4]
 800d370:	441a      	add	r2, r3
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d376:	68fb      	ldr	r3, [r7, #12]
 800d378:	681b      	ldr	r3, [r3, #0]
 800d37a:	681a      	ldr	r2, [r3, #0]
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	601a      	str	r2, [r3, #0]
 800d380:	e008      	b.n	800d394 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d382:	4b0c      	ldr	r3, [pc, #48]	@ (800d3b4 <prvInsertBlockIntoFreeList+0xb0>)
 800d384:	681a      	ldr	r2, [r3, #0]
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	601a      	str	r2, [r3, #0]
 800d38a:	e003      	b.n	800d394 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d38c:	68fb      	ldr	r3, [r7, #12]
 800d38e:	681a      	ldr	r2, [r3, #0]
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d394:	68fa      	ldr	r2, [r7, #12]
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	429a      	cmp	r2, r3
 800d39a:	d002      	beq.n	800d3a2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d39c:	68fb      	ldr	r3, [r7, #12]
 800d39e:	687a      	ldr	r2, [r7, #4]
 800d3a0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d3a2:	bf00      	nop
 800d3a4:	3714      	adds	r7, #20
 800d3a6:	46bd      	mov	sp, r7
 800d3a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ac:	4770      	bx	lr
 800d3ae:	bf00      	nop
 800d3b0:	20011598 	.word	0x20011598
 800d3b4:	200115a0 	.word	0x200115a0

0800d3b8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800d3b8:	b580      	push	{r7, lr}
 800d3ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800d3bc:	2200      	movs	r2, #0
 800d3be:	4912      	ldr	r1, [pc, #72]	@ (800d408 <MX_USB_DEVICE_Init+0x50>)
 800d3c0:	4812      	ldr	r0, [pc, #72]	@ (800d40c <MX_USB_DEVICE_Init+0x54>)
 800d3c2:	f7fb ff3b 	bl	800923c <USBD_Init>
 800d3c6:	4603      	mov	r3, r0
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	d001      	beq.n	800d3d0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800d3cc:	f7f3 fdea 	bl	8000fa4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800d3d0:	490f      	ldr	r1, [pc, #60]	@ (800d410 <MX_USB_DEVICE_Init+0x58>)
 800d3d2:	480e      	ldr	r0, [pc, #56]	@ (800d40c <MX_USB_DEVICE_Init+0x54>)
 800d3d4:	f7fb ff62 	bl	800929c <USBD_RegisterClass>
 800d3d8:	4603      	mov	r3, r0
 800d3da:	2b00      	cmp	r3, #0
 800d3dc:	d001      	beq.n	800d3e2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800d3de:	f7f3 fde1 	bl	8000fa4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800d3e2:	490c      	ldr	r1, [pc, #48]	@ (800d414 <MX_USB_DEVICE_Init+0x5c>)
 800d3e4:	4809      	ldr	r0, [pc, #36]	@ (800d40c <MX_USB_DEVICE_Init+0x54>)
 800d3e6:	f7fb fe99 	bl	800911c <USBD_CDC_RegisterInterface>
 800d3ea:	4603      	mov	r3, r0
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	d001      	beq.n	800d3f4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800d3f0:	f7f3 fdd8 	bl	8000fa4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800d3f4:	4805      	ldr	r0, [pc, #20]	@ (800d40c <MX_USB_DEVICE_Init+0x54>)
 800d3f6:	f7fb ff87 	bl	8009308 <USBD_Start>
 800d3fa:	4603      	mov	r3, r0
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d001      	beq.n	800d404 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800d400:	f7f3 fdd0 	bl	8000fa4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800d404:	bf00      	nop
 800d406:	bd80      	pop	{r7, pc}
 800d408:	200000b0 	.word	0x200000b0
 800d40c:	200115b8 	.word	0x200115b8
 800d410:	20000018 	.word	0x20000018
 800d414:	2000009c 	.word	0x2000009c

0800d418 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800d418:	b580      	push	{r7, lr}
 800d41a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800d41c:	2200      	movs	r2, #0
 800d41e:	4905      	ldr	r1, [pc, #20]	@ (800d434 <CDC_Init_FS+0x1c>)
 800d420:	4805      	ldr	r0, [pc, #20]	@ (800d438 <CDC_Init_FS+0x20>)
 800d422:	f7fb fe95 	bl	8009150 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800d426:	4905      	ldr	r1, [pc, #20]	@ (800d43c <CDC_Init_FS+0x24>)
 800d428:	4803      	ldr	r0, [pc, #12]	@ (800d438 <CDC_Init_FS+0x20>)
 800d42a:	f7fb feb3 	bl	8009194 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800d42e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800d430:	4618      	mov	r0, r3
 800d432:	bd80      	pop	{r7, pc}
 800d434:	20012094 	.word	0x20012094
 800d438:	200115b8 	.word	0x200115b8
 800d43c:	20011894 	.word	0x20011894

0800d440 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800d440:	b480      	push	{r7}
 800d442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800d444:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800d446:	4618      	mov	r0, r3
 800d448:	46bd      	mov	sp, r7
 800d44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d44e:	4770      	bx	lr

0800d450 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800d450:	b480      	push	{r7}
 800d452:	b083      	sub	sp, #12
 800d454:	af00      	add	r7, sp, #0
 800d456:	4603      	mov	r3, r0
 800d458:	6039      	str	r1, [r7, #0]
 800d45a:	71fb      	strb	r3, [r7, #7]
 800d45c:	4613      	mov	r3, r2
 800d45e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800d460:	79fb      	ldrb	r3, [r7, #7]
 800d462:	2b23      	cmp	r3, #35	@ 0x23
 800d464:	d84a      	bhi.n	800d4fc <CDC_Control_FS+0xac>
 800d466:	a201      	add	r2, pc, #4	@ (adr r2, 800d46c <CDC_Control_FS+0x1c>)
 800d468:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d46c:	0800d4fd 	.word	0x0800d4fd
 800d470:	0800d4fd 	.word	0x0800d4fd
 800d474:	0800d4fd 	.word	0x0800d4fd
 800d478:	0800d4fd 	.word	0x0800d4fd
 800d47c:	0800d4fd 	.word	0x0800d4fd
 800d480:	0800d4fd 	.word	0x0800d4fd
 800d484:	0800d4fd 	.word	0x0800d4fd
 800d488:	0800d4fd 	.word	0x0800d4fd
 800d48c:	0800d4fd 	.word	0x0800d4fd
 800d490:	0800d4fd 	.word	0x0800d4fd
 800d494:	0800d4fd 	.word	0x0800d4fd
 800d498:	0800d4fd 	.word	0x0800d4fd
 800d49c:	0800d4fd 	.word	0x0800d4fd
 800d4a0:	0800d4fd 	.word	0x0800d4fd
 800d4a4:	0800d4fd 	.word	0x0800d4fd
 800d4a8:	0800d4fd 	.word	0x0800d4fd
 800d4ac:	0800d4fd 	.word	0x0800d4fd
 800d4b0:	0800d4fd 	.word	0x0800d4fd
 800d4b4:	0800d4fd 	.word	0x0800d4fd
 800d4b8:	0800d4fd 	.word	0x0800d4fd
 800d4bc:	0800d4fd 	.word	0x0800d4fd
 800d4c0:	0800d4fd 	.word	0x0800d4fd
 800d4c4:	0800d4fd 	.word	0x0800d4fd
 800d4c8:	0800d4fd 	.word	0x0800d4fd
 800d4cc:	0800d4fd 	.word	0x0800d4fd
 800d4d0:	0800d4fd 	.word	0x0800d4fd
 800d4d4:	0800d4fd 	.word	0x0800d4fd
 800d4d8:	0800d4fd 	.word	0x0800d4fd
 800d4dc:	0800d4fd 	.word	0x0800d4fd
 800d4e0:	0800d4fd 	.word	0x0800d4fd
 800d4e4:	0800d4fd 	.word	0x0800d4fd
 800d4e8:	0800d4fd 	.word	0x0800d4fd
 800d4ec:	0800d4fd 	.word	0x0800d4fd
 800d4f0:	0800d4fd 	.word	0x0800d4fd
 800d4f4:	0800d4fd 	.word	0x0800d4fd
 800d4f8:	0800d4fd 	.word	0x0800d4fd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800d4fc:	bf00      	nop
  }

  return (USBD_OK);
 800d4fe:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800d500:	4618      	mov	r0, r3
 800d502:	370c      	adds	r7, #12
 800d504:	46bd      	mov	sp, r7
 800d506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d50a:	4770      	bx	lr

0800d50c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800d50c:	b580      	push	{r7, lr}
 800d50e:	b082      	sub	sp, #8
 800d510:	af00      	add	r7, sp, #0
 800d512:	6078      	str	r0, [r7, #4]
 800d514:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800d516:	6879      	ldr	r1, [r7, #4]
 800d518:	4805      	ldr	r0, [pc, #20]	@ (800d530 <CDC_Receive_FS+0x24>)
 800d51a:	f7fb fe3b 	bl	8009194 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800d51e:	4804      	ldr	r0, [pc, #16]	@ (800d530 <CDC_Receive_FS+0x24>)
 800d520:	f7fb fe56 	bl	80091d0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800d524:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800d526:	4618      	mov	r0, r3
 800d528:	3708      	adds	r7, #8
 800d52a:	46bd      	mov	sp, r7
 800d52c:	bd80      	pop	{r7, pc}
 800d52e:	bf00      	nop
 800d530:	200115b8 	.word	0x200115b8

0800d534 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800d534:	b480      	push	{r7}
 800d536:	b087      	sub	sp, #28
 800d538:	af00      	add	r7, sp, #0
 800d53a:	60f8      	str	r0, [r7, #12]
 800d53c:	60b9      	str	r1, [r7, #8]
 800d53e:	4613      	mov	r3, r2
 800d540:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800d542:	2300      	movs	r3, #0
 800d544:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800d546:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d54a:	4618      	mov	r0, r3
 800d54c:	371c      	adds	r7, #28
 800d54e:	46bd      	mov	sp, r7
 800d550:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d554:	4770      	bx	lr
	...

0800d558 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d558:	b480      	push	{r7}
 800d55a:	b083      	sub	sp, #12
 800d55c:	af00      	add	r7, sp, #0
 800d55e:	4603      	mov	r3, r0
 800d560:	6039      	str	r1, [r7, #0]
 800d562:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800d564:	683b      	ldr	r3, [r7, #0]
 800d566:	2212      	movs	r2, #18
 800d568:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800d56a:	4b03      	ldr	r3, [pc, #12]	@ (800d578 <USBD_FS_DeviceDescriptor+0x20>)
}
 800d56c:	4618      	mov	r0, r3
 800d56e:	370c      	adds	r7, #12
 800d570:	46bd      	mov	sp, r7
 800d572:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d576:	4770      	bx	lr
 800d578:	200000cc 	.word	0x200000cc

0800d57c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d57c:	b480      	push	{r7}
 800d57e:	b083      	sub	sp, #12
 800d580:	af00      	add	r7, sp, #0
 800d582:	4603      	mov	r3, r0
 800d584:	6039      	str	r1, [r7, #0]
 800d586:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800d588:	683b      	ldr	r3, [r7, #0]
 800d58a:	2204      	movs	r2, #4
 800d58c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800d58e:	4b03      	ldr	r3, [pc, #12]	@ (800d59c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800d590:	4618      	mov	r0, r3
 800d592:	370c      	adds	r7, #12
 800d594:	46bd      	mov	sp, r7
 800d596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d59a:	4770      	bx	lr
 800d59c:	200000e0 	.word	0x200000e0

0800d5a0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d5a0:	b580      	push	{r7, lr}
 800d5a2:	b082      	sub	sp, #8
 800d5a4:	af00      	add	r7, sp, #0
 800d5a6:	4603      	mov	r3, r0
 800d5a8:	6039      	str	r1, [r7, #0]
 800d5aa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d5ac:	79fb      	ldrb	r3, [r7, #7]
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	d105      	bne.n	800d5be <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d5b2:	683a      	ldr	r2, [r7, #0]
 800d5b4:	4907      	ldr	r1, [pc, #28]	@ (800d5d4 <USBD_FS_ProductStrDescriptor+0x34>)
 800d5b6:	4808      	ldr	r0, [pc, #32]	@ (800d5d8 <USBD_FS_ProductStrDescriptor+0x38>)
 800d5b8:	f7fd f856 	bl	800a668 <USBD_GetString>
 800d5bc:	e004      	b.n	800d5c8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d5be:	683a      	ldr	r2, [r7, #0]
 800d5c0:	4904      	ldr	r1, [pc, #16]	@ (800d5d4 <USBD_FS_ProductStrDescriptor+0x34>)
 800d5c2:	4805      	ldr	r0, [pc, #20]	@ (800d5d8 <USBD_FS_ProductStrDescriptor+0x38>)
 800d5c4:	f7fd f850 	bl	800a668 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d5c8:	4b02      	ldr	r3, [pc, #8]	@ (800d5d4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800d5ca:	4618      	mov	r0, r3
 800d5cc:	3708      	adds	r7, #8
 800d5ce:	46bd      	mov	sp, r7
 800d5d0:	bd80      	pop	{r7, pc}
 800d5d2:	bf00      	nop
 800d5d4:	20012894 	.word	0x20012894
 800d5d8:	0800de30 	.word	0x0800de30

0800d5dc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d5dc:	b580      	push	{r7, lr}
 800d5de:	b082      	sub	sp, #8
 800d5e0:	af00      	add	r7, sp, #0
 800d5e2:	4603      	mov	r3, r0
 800d5e4:	6039      	str	r1, [r7, #0]
 800d5e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d5e8:	683a      	ldr	r2, [r7, #0]
 800d5ea:	4904      	ldr	r1, [pc, #16]	@ (800d5fc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800d5ec:	4804      	ldr	r0, [pc, #16]	@ (800d600 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800d5ee:	f7fd f83b 	bl	800a668 <USBD_GetString>
  return USBD_StrDesc;
 800d5f2:	4b02      	ldr	r3, [pc, #8]	@ (800d5fc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800d5f4:	4618      	mov	r0, r3
 800d5f6:	3708      	adds	r7, #8
 800d5f8:	46bd      	mov	sp, r7
 800d5fa:	bd80      	pop	{r7, pc}
 800d5fc:	20012894 	.word	0x20012894
 800d600:	0800de48 	.word	0x0800de48

0800d604 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d604:	b580      	push	{r7, lr}
 800d606:	b082      	sub	sp, #8
 800d608:	af00      	add	r7, sp, #0
 800d60a:	4603      	mov	r3, r0
 800d60c:	6039      	str	r1, [r7, #0]
 800d60e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800d610:	683b      	ldr	r3, [r7, #0]
 800d612:	221a      	movs	r2, #26
 800d614:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800d616:	f000 f843 	bl	800d6a0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800d61a:	4b02      	ldr	r3, [pc, #8]	@ (800d624 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800d61c:	4618      	mov	r0, r3
 800d61e:	3708      	adds	r7, #8
 800d620:	46bd      	mov	sp, r7
 800d622:	bd80      	pop	{r7, pc}
 800d624:	200000e4 	.word	0x200000e4

0800d628 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d628:	b580      	push	{r7, lr}
 800d62a:	b082      	sub	sp, #8
 800d62c:	af00      	add	r7, sp, #0
 800d62e:	4603      	mov	r3, r0
 800d630:	6039      	str	r1, [r7, #0]
 800d632:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800d634:	79fb      	ldrb	r3, [r7, #7]
 800d636:	2b00      	cmp	r3, #0
 800d638:	d105      	bne.n	800d646 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d63a:	683a      	ldr	r2, [r7, #0]
 800d63c:	4907      	ldr	r1, [pc, #28]	@ (800d65c <USBD_FS_ConfigStrDescriptor+0x34>)
 800d63e:	4808      	ldr	r0, [pc, #32]	@ (800d660 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d640:	f7fd f812 	bl	800a668 <USBD_GetString>
 800d644:	e004      	b.n	800d650 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d646:	683a      	ldr	r2, [r7, #0]
 800d648:	4904      	ldr	r1, [pc, #16]	@ (800d65c <USBD_FS_ConfigStrDescriptor+0x34>)
 800d64a:	4805      	ldr	r0, [pc, #20]	@ (800d660 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d64c:	f7fd f80c 	bl	800a668 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d650:	4b02      	ldr	r3, [pc, #8]	@ (800d65c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800d652:	4618      	mov	r0, r3
 800d654:	3708      	adds	r7, #8
 800d656:	46bd      	mov	sp, r7
 800d658:	bd80      	pop	{r7, pc}
 800d65a:	bf00      	nop
 800d65c:	20012894 	.word	0x20012894
 800d660:	0800de5c 	.word	0x0800de5c

0800d664 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d664:	b580      	push	{r7, lr}
 800d666:	b082      	sub	sp, #8
 800d668:	af00      	add	r7, sp, #0
 800d66a:	4603      	mov	r3, r0
 800d66c:	6039      	str	r1, [r7, #0]
 800d66e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d670:	79fb      	ldrb	r3, [r7, #7]
 800d672:	2b00      	cmp	r3, #0
 800d674:	d105      	bne.n	800d682 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d676:	683a      	ldr	r2, [r7, #0]
 800d678:	4907      	ldr	r1, [pc, #28]	@ (800d698 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d67a:	4808      	ldr	r0, [pc, #32]	@ (800d69c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d67c:	f7fc fff4 	bl	800a668 <USBD_GetString>
 800d680:	e004      	b.n	800d68c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d682:	683a      	ldr	r2, [r7, #0]
 800d684:	4904      	ldr	r1, [pc, #16]	@ (800d698 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d686:	4805      	ldr	r0, [pc, #20]	@ (800d69c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d688:	f7fc ffee 	bl	800a668 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d68c:	4b02      	ldr	r3, [pc, #8]	@ (800d698 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800d68e:	4618      	mov	r0, r3
 800d690:	3708      	adds	r7, #8
 800d692:	46bd      	mov	sp, r7
 800d694:	bd80      	pop	{r7, pc}
 800d696:	bf00      	nop
 800d698:	20012894 	.word	0x20012894
 800d69c:	0800de68 	.word	0x0800de68

0800d6a0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800d6a0:	b580      	push	{r7, lr}
 800d6a2:	b084      	sub	sp, #16
 800d6a4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 += deviceserial2;
 800d6a6:	68fa      	ldr	r2, [r7, #12]
 800d6a8:	68bb      	ldr	r3, [r7, #8]
 800d6aa:	4413      	add	r3, r2
 800d6ac:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800d6ae:	68fb      	ldr	r3, [r7, #12]
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	d009      	beq.n	800d6c8 <Get_SerialNum+0x28>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800d6b4:	2208      	movs	r2, #8
 800d6b6:	4906      	ldr	r1, [pc, #24]	@ (800d6d0 <Get_SerialNum+0x30>)
 800d6b8:	68f8      	ldr	r0, [r7, #12]
 800d6ba:	f000 f80d 	bl	800d6d8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800d6be:	2204      	movs	r2, #4
 800d6c0:	4904      	ldr	r1, [pc, #16]	@ (800d6d4 <Get_SerialNum+0x34>)
 800d6c2:	6878      	ldr	r0, [r7, #4]
 800d6c4:	f000 f808 	bl	800d6d8 <IntToUnicode>
  }
}
 800d6c8:	bf00      	nop
 800d6ca:	3710      	adds	r7, #16
 800d6cc:	46bd      	mov	sp, r7
 800d6ce:	bd80      	pop	{r7, pc}
 800d6d0:	200000e6 	.word	0x200000e6
 800d6d4:	200000f6 	.word	0x200000f6

0800d6d8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800d6d8:	b480      	push	{r7}
 800d6da:	b087      	sub	sp, #28
 800d6dc:	af00      	add	r7, sp, #0
 800d6de:	60f8      	str	r0, [r7, #12]
 800d6e0:	60b9      	str	r1, [r7, #8]
 800d6e2:	4613      	mov	r3, r2
 800d6e4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800d6e6:	2300      	movs	r3, #0
 800d6e8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800d6ea:	2300      	movs	r3, #0
 800d6ec:	75fb      	strb	r3, [r7, #23]
 800d6ee:	e027      	b.n	800d740 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800d6f0:	68fb      	ldr	r3, [r7, #12]
 800d6f2:	0f1b      	lsrs	r3, r3, #28
 800d6f4:	2b09      	cmp	r3, #9
 800d6f6:	d80b      	bhi.n	800d710 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800d6f8:	68fb      	ldr	r3, [r7, #12]
 800d6fa:	0f1b      	lsrs	r3, r3, #28
 800d6fc:	b2da      	uxtb	r2, r3
 800d6fe:	7dfb      	ldrb	r3, [r7, #23]
 800d700:	005b      	lsls	r3, r3, #1
 800d702:	4619      	mov	r1, r3
 800d704:	68bb      	ldr	r3, [r7, #8]
 800d706:	440b      	add	r3, r1
 800d708:	3230      	adds	r2, #48	@ 0x30
 800d70a:	b2d2      	uxtb	r2, r2
 800d70c:	701a      	strb	r2, [r3, #0]
 800d70e:	e00a      	b.n	800d726 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d710:	68fb      	ldr	r3, [r7, #12]
 800d712:	0f1b      	lsrs	r3, r3, #28
 800d714:	b2da      	uxtb	r2, r3
 800d716:	7dfb      	ldrb	r3, [r7, #23]
 800d718:	005b      	lsls	r3, r3, #1
 800d71a:	4619      	mov	r1, r3
 800d71c:	68bb      	ldr	r3, [r7, #8]
 800d71e:	440b      	add	r3, r1
 800d720:	3237      	adds	r2, #55	@ 0x37
 800d722:	b2d2      	uxtb	r2, r2
 800d724:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800d726:	68fb      	ldr	r3, [r7, #12]
 800d728:	011b      	lsls	r3, r3, #4
 800d72a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800d72c:	7dfb      	ldrb	r3, [r7, #23]
 800d72e:	005b      	lsls	r3, r3, #1
 800d730:	3301      	adds	r3, #1
 800d732:	68ba      	ldr	r2, [r7, #8]
 800d734:	4413      	add	r3, r2
 800d736:	2200      	movs	r2, #0
 800d738:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800d73a:	7dfb      	ldrb	r3, [r7, #23]
 800d73c:	3301      	adds	r3, #1
 800d73e:	75fb      	strb	r3, [r7, #23]
 800d740:	7dfa      	ldrb	r2, [r7, #23]
 800d742:	79fb      	ldrb	r3, [r7, #7]
 800d744:	429a      	cmp	r2, r3
 800d746:	d3d3      	bcc.n	800d6f0 <IntToUnicode+0x18>
  }
}
 800d748:	bf00      	nop
 800d74a:	bf00      	nop
 800d74c:	371c      	adds	r7, #28
 800d74e:	46bd      	mov	sp, r7
 800d750:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d754:	4770      	bx	lr
	...

0800d758 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800d758:	b580      	push	{r7, lr}
 800d75a:	b08a      	sub	sp, #40	@ 0x28
 800d75c:	af00      	add	r7, sp, #0
 800d75e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d760:	f107 0314 	add.w	r3, r7, #20
 800d764:	2200      	movs	r2, #0
 800d766:	601a      	str	r2, [r3, #0]
 800d768:	605a      	str	r2, [r3, #4]
 800d76a:	609a      	str	r2, [r3, #8]
 800d76c:	60da      	str	r2, [r3, #12]
 800d76e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	681b      	ldr	r3, [r3, #0]
 800d774:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800d778:	d13a      	bne.n	800d7f0 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d77a:	2300      	movs	r3, #0
 800d77c:	613b      	str	r3, [r7, #16]
 800d77e:	4b1e      	ldr	r3, [pc, #120]	@ (800d7f8 <HAL_PCD_MspInit+0xa0>)
 800d780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d782:	4a1d      	ldr	r2, [pc, #116]	@ (800d7f8 <HAL_PCD_MspInit+0xa0>)
 800d784:	f043 0301 	orr.w	r3, r3, #1
 800d788:	6313      	str	r3, [r2, #48]	@ 0x30
 800d78a:	4b1b      	ldr	r3, [pc, #108]	@ (800d7f8 <HAL_PCD_MspInit+0xa0>)
 800d78c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d78e:	f003 0301 	and.w	r3, r3, #1
 800d792:	613b      	str	r3, [r7, #16]
 800d794:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800d796:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800d79a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d79c:	2302      	movs	r3, #2
 800d79e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d7a0:	2300      	movs	r3, #0
 800d7a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d7a4:	2303      	movs	r3, #3
 800d7a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800d7a8:	230a      	movs	r3, #10
 800d7aa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d7ac:	f107 0314 	add.w	r3, r7, #20
 800d7b0:	4619      	mov	r1, r3
 800d7b2:	4812      	ldr	r0, [pc, #72]	@ (800d7fc <HAL_PCD_MspInit+0xa4>)
 800d7b4:	f7f5 fee8 	bl	8003588 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800d7b8:	4b0f      	ldr	r3, [pc, #60]	@ (800d7f8 <HAL_PCD_MspInit+0xa0>)
 800d7ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d7bc:	4a0e      	ldr	r2, [pc, #56]	@ (800d7f8 <HAL_PCD_MspInit+0xa0>)
 800d7be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d7c2:	6353      	str	r3, [r2, #52]	@ 0x34
 800d7c4:	2300      	movs	r3, #0
 800d7c6:	60fb      	str	r3, [r7, #12]
 800d7c8:	4b0b      	ldr	r3, [pc, #44]	@ (800d7f8 <HAL_PCD_MspInit+0xa0>)
 800d7ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d7cc:	4a0a      	ldr	r2, [pc, #40]	@ (800d7f8 <HAL_PCD_MspInit+0xa0>)
 800d7ce:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800d7d2:	6453      	str	r3, [r2, #68]	@ 0x44
 800d7d4:	4b08      	ldr	r3, [pc, #32]	@ (800d7f8 <HAL_PCD_MspInit+0xa0>)
 800d7d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d7d8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d7dc:	60fb      	str	r3, [r7, #12]
 800d7de:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 6, 0);
 800d7e0:	2200      	movs	r2, #0
 800d7e2:	2106      	movs	r1, #6
 800d7e4:	2043      	movs	r0, #67	@ 0x43
 800d7e6:	f7f5 fb29 	bl	8002e3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800d7ea:	2043      	movs	r0, #67	@ 0x43
 800d7ec:	f7f5 fb42 	bl	8002e74 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800d7f0:	bf00      	nop
 800d7f2:	3728      	adds	r7, #40	@ 0x28
 800d7f4:	46bd      	mov	sp, r7
 800d7f6:	bd80      	pop	{r7, pc}
 800d7f8:	40023800 	.word	0x40023800
 800d7fc:	40020000 	.word	0x40020000

0800d800 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d800:	b580      	push	{r7, lr}
 800d802:	b082      	sub	sp, #8
 800d804:	af00      	add	r7, sp, #0
 800d806:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800d814:	4619      	mov	r1, r3
 800d816:	4610      	mov	r0, r2
 800d818:	f7fb fdc3 	bl	80093a2 <USBD_LL_SetupStage>
}
 800d81c:	bf00      	nop
 800d81e:	3708      	adds	r7, #8
 800d820:	46bd      	mov	sp, r7
 800d822:	bd80      	pop	{r7, pc}

0800d824 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d824:	b580      	push	{r7, lr}
 800d826:	b082      	sub	sp, #8
 800d828:	af00      	add	r7, sp, #0
 800d82a:	6078      	str	r0, [r7, #4]
 800d82c:	460b      	mov	r3, r1
 800d82e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800d836:	78fa      	ldrb	r2, [r7, #3]
 800d838:	6879      	ldr	r1, [r7, #4]
 800d83a:	4613      	mov	r3, r2
 800d83c:	00db      	lsls	r3, r3, #3
 800d83e:	4413      	add	r3, r2
 800d840:	009b      	lsls	r3, r3, #2
 800d842:	440b      	add	r3, r1
 800d844:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800d848:	681a      	ldr	r2, [r3, #0]
 800d84a:	78fb      	ldrb	r3, [r7, #3]
 800d84c:	4619      	mov	r1, r3
 800d84e:	f7fb fdfd 	bl	800944c <USBD_LL_DataOutStage>
}
 800d852:	bf00      	nop
 800d854:	3708      	adds	r7, #8
 800d856:	46bd      	mov	sp, r7
 800d858:	bd80      	pop	{r7, pc}

0800d85a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d85a:	b580      	push	{r7, lr}
 800d85c:	b082      	sub	sp, #8
 800d85e:	af00      	add	r7, sp, #0
 800d860:	6078      	str	r0, [r7, #4]
 800d862:	460b      	mov	r3, r1
 800d864:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800d86c:	78fa      	ldrb	r2, [r7, #3]
 800d86e:	6879      	ldr	r1, [r7, #4]
 800d870:	4613      	mov	r3, r2
 800d872:	00db      	lsls	r3, r3, #3
 800d874:	4413      	add	r3, r2
 800d876:	009b      	lsls	r3, r3, #2
 800d878:	440b      	add	r3, r1
 800d87a:	3320      	adds	r3, #32
 800d87c:	681a      	ldr	r2, [r3, #0]
 800d87e:	78fb      	ldrb	r3, [r7, #3]
 800d880:	4619      	mov	r1, r3
 800d882:	f7fb fe96 	bl	80095b2 <USBD_LL_DataInStage>
}
 800d886:	bf00      	nop
 800d888:	3708      	adds	r7, #8
 800d88a:	46bd      	mov	sp, r7
 800d88c:	bd80      	pop	{r7, pc}

0800d88e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d88e:	b580      	push	{r7, lr}
 800d890:	b082      	sub	sp, #8
 800d892:	af00      	add	r7, sp, #0
 800d894:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d89c:	4618      	mov	r0, r3
 800d89e:	f7fb ffd0 	bl	8009842 <USBD_LL_SOF>
}
 800d8a2:	bf00      	nop
 800d8a4:	3708      	adds	r7, #8
 800d8a6:	46bd      	mov	sp, r7
 800d8a8:	bd80      	pop	{r7, pc}

0800d8aa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d8aa:	b580      	push	{r7, lr}
 800d8ac:	b084      	sub	sp, #16
 800d8ae:	af00      	add	r7, sp, #0
 800d8b0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d8b2:	2301      	movs	r3, #1
 800d8b4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	79db      	ldrb	r3, [r3, #7]
 800d8ba:	2b00      	cmp	r3, #0
 800d8bc:	d102      	bne.n	800d8c4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800d8be:	2300      	movs	r3, #0
 800d8c0:	73fb      	strb	r3, [r7, #15]
 800d8c2:	e008      	b.n	800d8d6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	79db      	ldrb	r3, [r3, #7]
 800d8c8:	2b02      	cmp	r3, #2
 800d8ca:	d102      	bne.n	800d8d2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800d8cc:	2301      	movs	r3, #1
 800d8ce:	73fb      	strb	r3, [r7, #15]
 800d8d0:	e001      	b.n	800d8d6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800d8d2:	f7f3 fb67 	bl	8000fa4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d8dc:	7bfa      	ldrb	r2, [r7, #15]
 800d8de:	4611      	mov	r1, r2
 800d8e0:	4618      	mov	r0, r3
 800d8e2:	f7fb ff6a 	bl	80097ba <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d8ec:	4618      	mov	r0, r3
 800d8ee:	f7fb ff12 	bl	8009716 <USBD_LL_Reset>
}
 800d8f2:	bf00      	nop
 800d8f4:	3710      	adds	r7, #16
 800d8f6:	46bd      	mov	sp, r7
 800d8f8:	bd80      	pop	{r7, pc}
	...

0800d8fc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d8fc:	b580      	push	{r7, lr}
 800d8fe:	b082      	sub	sp, #8
 800d900:	af00      	add	r7, sp, #0
 800d902:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d90a:	4618      	mov	r0, r3
 800d90c:	f7fb ff65 	bl	80097da <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	681b      	ldr	r3, [r3, #0]
 800d914:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800d918:	681b      	ldr	r3, [r3, #0]
 800d91a:	687a      	ldr	r2, [r7, #4]
 800d91c:	6812      	ldr	r2, [r2, #0]
 800d91e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800d922:	f043 0301 	orr.w	r3, r3, #1
 800d926:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	7adb      	ldrb	r3, [r3, #11]
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	d005      	beq.n	800d93c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d930:	4b04      	ldr	r3, [pc, #16]	@ (800d944 <HAL_PCD_SuspendCallback+0x48>)
 800d932:	691b      	ldr	r3, [r3, #16]
 800d934:	4a03      	ldr	r2, [pc, #12]	@ (800d944 <HAL_PCD_SuspendCallback+0x48>)
 800d936:	f043 0306 	orr.w	r3, r3, #6
 800d93a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800d93c:	bf00      	nop
 800d93e:	3708      	adds	r7, #8
 800d940:	46bd      	mov	sp, r7
 800d942:	bd80      	pop	{r7, pc}
 800d944:	e000ed00 	.word	0xe000ed00

0800d948 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d948:	b580      	push	{r7, lr}
 800d94a:	b082      	sub	sp, #8
 800d94c:	af00      	add	r7, sp, #0
 800d94e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d956:	4618      	mov	r0, r3
 800d958:	f7fb ff5b 	bl	8009812 <USBD_LL_Resume>
}
 800d95c:	bf00      	nop
 800d95e:	3708      	adds	r7, #8
 800d960:	46bd      	mov	sp, r7
 800d962:	bd80      	pop	{r7, pc}

0800d964 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d964:	b580      	push	{r7, lr}
 800d966:	b082      	sub	sp, #8
 800d968:	af00      	add	r7, sp, #0
 800d96a:	6078      	str	r0, [r7, #4]
 800d96c:	460b      	mov	r3, r1
 800d96e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d976:	78fa      	ldrb	r2, [r7, #3]
 800d978:	4611      	mov	r1, r2
 800d97a:	4618      	mov	r0, r3
 800d97c:	f7fb ffb3 	bl	80098e6 <USBD_LL_IsoOUTIncomplete>
}
 800d980:	bf00      	nop
 800d982:	3708      	adds	r7, #8
 800d984:	46bd      	mov	sp, r7
 800d986:	bd80      	pop	{r7, pc}

0800d988 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d988:	b580      	push	{r7, lr}
 800d98a:	b082      	sub	sp, #8
 800d98c:	af00      	add	r7, sp, #0
 800d98e:	6078      	str	r0, [r7, #4]
 800d990:	460b      	mov	r3, r1
 800d992:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d99a:	78fa      	ldrb	r2, [r7, #3]
 800d99c:	4611      	mov	r1, r2
 800d99e:	4618      	mov	r0, r3
 800d9a0:	f7fb ff6f 	bl	8009882 <USBD_LL_IsoINIncomplete>
}
 800d9a4:	bf00      	nop
 800d9a6:	3708      	adds	r7, #8
 800d9a8:	46bd      	mov	sp, r7
 800d9aa:	bd80      	pop	{r7, pc}

0800d9ac <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d9ac:	b580      	push	{r7, lr}
 800d9ae:	b082      	sub	sp, #8
 800d9b0:	af00      	add	r7, sp, #0
 800d9b2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d9ba:	4618      	mov	r0, r3
 800d9bc:	f7fb ffc5 	bl	800994a <USBD_LL_DevConnected>
}
 800d9c0:	bf00      	nop
 800d9c2:	3708      	adds	r7, #8
 800d9c4:	46bd      	mov	sp, r7
 800d9c6:	bd80      	pop	{r7, pc}

0800d9c8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d9c8:	b580      	push	{r7, lr}
 800d9ca:	b082      	sub	sp, #8
 800d9cc:	af00      	add	r7, sp, #0
 800d9ce:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d9d6:	4618      	mov	r0, r3
 800d9d8:	f7fb ffc2 	bl	8009960 <USBD_LL_DevDisconnected>
}
 800d9dc:	bf00      	nop
 800d9de:	3708      	adds	r7, #8
 800d9e0:	46bd      	mov	sp, r7
 800d9e2:	bd80      	pop	{r7, pc}

0800d9e4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d9e4:	b580      	push	{r7, lr}
 800d9e6:	b082      	sub	sp, #8
 800d9e8:	af00      	add	r7, sp, #0
 800d9ea:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	781b      	ldrb	r3, [r3, #0]
 800d9f0:	2b00      	cmp	r3, #0
 800d9f2:	d13c      	bne.n	800da6e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800d9f4:	4a20      	ldr	r2, [pc, #128]	@ (800da78 <USBD_LL_Init+0x94>)
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	4a1e      	ldr	r2, [pc, #120]	@ (800da78 <USBD_LL_Init+0x94>)
 800da00:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800da04:	4b1c      	ldr	r3, [pc, #112]	@ (800da78 <USBD_LL_Init+0x94>)
 800da06:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800da0a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800da0c:	4b1a      	ldr	r3, [pc, #104]	@ (800da78 <USBD_LL_Init+0x94>)
 800da0e:	2204      	movs	r2, #4
 800da10:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800da12:	4b19      	ldr	r3, [pc, #100]	@ (800da78 <USBD_LL_Init+0x94>)
 800da14:	2202      	movs	r2, #2
 800da16:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800da18:	4b17      	ldr	r3, [pc, #92]	@ (800da78 <USBD_LL_Init+0x94>)
 800da1a:	2200      	movs	r2, #0
 800da1c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800da1e:	4b16      	ldr	r3, [pc, #88]	@ (800da78 <USBD_LL_Init+0x94>)
 800da20:	2202      	movs	r2, #2
 800da22:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800da24:	4b14      	ldr	r3, [pc, #80]	@ (800da78 <USBD_LL_Init+0x94>)
 800da26:	2200      	movs	r2, #0
 800da28:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800da2a:	4b13      	ldr	r3, [pc, #76]	@ (800da78 <USBD_LL_Init+0x94>)
 800da2c:	2200      	movs	r2, #0
 800da2e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800da30:	4b11      	ldr	r3, [pc, #68]	@ (800da78 <USBD_LL_Init+0x94>)
 800da32:	2200      	movs	r2, #0
 800da34:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800da36:	4b10      	ldr	r3, [pc, #64]	@ (800da78 <USBD_LL_Init+0x94>)
 800da38:	2200      	movs	r2, #0
 800da3a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800da3c:	4b0e      	ldr	r3, [pc, #56]	@ (800da78 <USBD_LL_Init+0x94>)
 800da3e:	2200      	movs	r2, #0
 800da40:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800da42:	480d      	ldr	r0, [pc, #52]	@ (800da78 <USBD_LL_Init+0x94>)
 800da44:	f7f6 f89a 	bl	8003b7c <HAL_PCD_Init>
 800da48:	4603      	mov	r3, r0
 800da4a:	2b00      	cmp	r3, #0
 800da4c:	d001      	beq.n	800da52 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800da4e:	f7f3 faa9 	bl	8000fa4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800da52:	2180      	movs	r1, #128	@ 0x80
 800da54:	4808      	ldr	r0, [pc, #32]	@ (800da78 <USBD_LL_Init+0x94>)
 800da56:	f7f7 fac4 	bl	8004fe2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800da5a:	2240      	movs	r2, #64	@ 0x40
 800da5c:	2100      	movs	r1, #0
 800da5e:	4806      	ldr	r0, [pc, #24]	@ (800da78 <USBD_LL_Init+0x94>)
 800da60:	f7f7 fa78 	bl	8004f54 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800da64:	2280      	movs	r2, #128	@ 0x80
 800da66:	2101      	movs	r1, #1
 800da68:	4803      	ldr	r0, [pc, #12]	@ (800da78 <USBD_LL_Init+0x94>)
 800da6a:	f7f7 fa73 	bl	8004f54 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800da6e:	2300      	movs	r3, #0
}
 800da70:	4618      	mov	r0, r3
 800da72:	3708      	adds	r7, #8
 800da74:	46bd      	mov	sp, r7
 800da76:	bd80      	pop	{r7, pc}
 800da78:	20012a94 	.word	0x20012a94

0800da7c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800da7c:	b580      	push	{r7, lr}
 800da7e:	b084      	sub	sp, #16
 800da80:	af00      	add	r7, sp, #0
 800da82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800da84:	2300      	movs	r3, #0
 800da86:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800da88:	2300      	movs	r3, #0
 800da8a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800da92:	4618      	mov	r0, r3
 800da94:	f7f6 f981 	bl	8003d9a <HAL_PCD_Start>
 800da98:	4603      	mov	r3, r0
 800da9a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800da9c:	7bfb      	ldrb	r3, [r7, #15]
 800da9e:	4618      	mov	r0, r3
 800daa0:	f000 f942 	bl	800dd28 <USBD_Get_USB_Status>
 800daa4:	4603      	mov	r3, r0
 800daa6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800daa8:	7bbb      	ldrb	r3, [r7, #14]
}
 800daaa:	4618      	mov	r0, r3
 800daac:	3710      	adds	r7, #16
 800daae:	46bd      	mov	sp, r7
 800dab0:	bd80      	pop	{r7, pc}

0800dab2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800dab2:	b580      	push	{r7, lr}
 800dab4:	b084      	sub	sp, #16
 800dab6:	af00      	add	r7, sp, #0
 800dab8:	6078      	str	r0, [r7, #4]
 800daba:	4608      	mov	r0, r1
 800dabc:	4611      	mov	r1, r2
 800dabe:	461a      	mov	r2, r3
 800dac0:	4603      	mov	r3, r0
 800dac2:	70fb      	strb	r3, [r7, #3]
 800dac4:	460b      	mov	r3, r1
 800dac6:	70bb      	strb	r3, [r7, #2]
 800dac8:	4613      	mov	r3, r2
 800daca:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dacc:	2300      	movs	r3, #0
 800dace:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dad0:	2300      	movs	r3, #0
 800dad2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800dada:	78bb      	ldrb	r3, [r7, #2]
 800dadc:	883a      	ldrh	r2, [r7, #0]
 800dade:	78f9      	ldrb	r1, [r7, #3]
 800dae0:	f7f6 fe55 	bl	800478e <HAL_PCD_EP_Open>
 800dae4:	4603      	mov	r3, r0
 800dae6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dae8:	7bfb      	ldrb	r3, [r7, #15]
 800daea:	4618      	mov	r0, r3
 800daec:	f000 f91c 	bl	800dd28 <USBD_Get_USB_Status>
 800daf0:	4603      	mov	r3, r0
 800daf2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800daf4:	7bbb      	ldrb	r3, [r7, #14]
}
 800daf6:	4618      	mov	r0, r3
 800daf8:	3710      	adds	r7, #16
 800dafa:	46bd      	mov	sp, r7
 800dafc:	bd80      	pop	{r7, pc}

0800dafe <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dafe:	b580      	push	{r7, lr}
 800db00:	b084      	sub	sp, #16
 800db02:	af00      	add	r7, sp, #0
 800db04:	6078      	str	r0, [r7, #4]
 800db06:	460b      	mov	r3, r1
 800db08:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800db0a:	2300      	movs	r3, #0
 800db0c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800db0e:	2300      	movs	r3, #0
 800db10:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800db18:	78fa      	ldrb	r2, [r7, #3]
 800db1a:	4611      	mov	r1, r2
 800db1c:	4618      	mov	r0, r3
 800db1e:	f7f6 fe9e 	bl	800485e <HAL_PCD_EP_Close>
 800db22:	4603      	mov	r3, r0
 800db24:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800db26:	7bfb      	ldrb	r3, [r7, #15]
 800db28:	4618      	mov	r0, r3
 800db2a:	f000 f8fd 	bl	800dd28 <USBD_Get_USB_Status>
 800db2e:	4603      	mov	r3, r0
 800db30:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800db32:	7bbb      	ldrb	r3, [r7, #14]
}
 800db34:	4618      	mov	r0, r3
 800db36:	3710      	adds	r7, #16
 800db38:	46bd      	mov	sp, r7
 800db3a:	bd80      	pop	{r7, pc}

0800db3c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800db3c:	b580      	push	{r7, lr}
 800db3e:	b084      	sub	sp, #16
 800db40:	af00      	add	r7, sp, #0
 800db42:	6078      	str	r0, [r7, #4]
 800db44:	460b      	mov	r3, r1
 800db46:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800db48:	2300      	movs	r3, #0
 800db4a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800db4c:	2300      	movs	r3, #0
 800db4e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800db56:	78fa      	ldrb	r2, [r7, #3]
 800db58:	4611      	mov	r1, r2
 800db5a:	4618      	mov	r0, r3
 800db5c:	f7f6 ff56 	bl	8004a0c <HAL_PCD_EP_SetStall>
 800db60:	4603      	mov	r3, r0
 800db62:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800db64:	7bfb      	ldrb	r3, [r7, #15]
 800db66:	4618      	mov	r0, r3
 800db68:	f000 f8de 	bl	800dd28 <USBD_Get_USB_Status>
 800db6c:	4603      	mov	r3, r0
 800db6e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800db70:	7bbb      	ldrb	r3, [r7, #14]
}
 800db72:	4618      	mov	r0, r3
 800db74:	3710      	adds	r7, #16
 800db76:	46bd      	mov	sp, r7
 800db78:	bd80      	pop	{r7, pc}

0800db7a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800db7a:	b580      	push	{r7, lr}
 800db7c:	b084      	sub	sp, #16
 800db7e:	af00      	add	r7, sp, #0
 800db80:	6078      	str	r0, [r7, #4]
 800db82:	460b      	mov	r3, r1
 800db84:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800db86:	2300      	movs	r3, #0
 800db88:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800db8a:	2300      	movs	r3, #0
 800db8c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800db94:	78fa      	ldrb	r2, [r7, #3]
 800db96:	4611      	mov	r1, r2
 800db98:	4618      	mov	r0, r3
 800db9a:	f7f6 ff9a 	bl	8004ad2 <HAL_PCD_EP_ClrStall>
 800db9e:	4603      	mov	r3, r0
 800dba0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dba2:	7bfb      	ldrb	r3, [r7, #15]
 800dba4:	4618      	mov	r0, r3
 800dba6:	f000 f8bf 	bl	800dd28 <USBD_Get_USB_Status>
 800dbaa:	4603      	mov	r3, r0
 800dbac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dbae:	7bbb      	ldrb	r3, [r7, #14]
}
 800dbb0:	4618      	mov	r0, r3
 800dbb2:	3710      	adds	r7, #16
 800dbb4:	46bd      	mov	sp, r7
 800dbb6:	bd80      	pop	{r7, pc}

0800dbb8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dbb8:	b480      	push	{r7}
 800dbba:	b085      	sub	sp, #20
 800dbbc:	af00      	add	r7, sp, #0
 800dbbe:	6078      	str	r0, [r7, #4]
 800dbc0:	460b      	mov	r3, r1
 800dbc2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800dbca:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800dbcc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	da0b      	bge.n	800dbec <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800dbd4:	78fb      	ldrb	r3, [r7, #3]
 800dbd6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800dbda:	68f9      	ldr	r1, [r7, #12]
 800dbdc:	4613      	mov	r3, r2
 800dbde:	00db      	lsls	r3, r3, #3
 800dbe0:	4413      	add	r3, r2
 800dbe2:	009b      	lsls	r3, r3, #2
 800dbe4:	440b      	add	r3, r1
 800dbe6:	3316      	adds	r3, #22
 800dbe8:	781b      	ldrb	r3, [r3, #0]
 800dbea:	e00b      	b.n	800dc04 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800dbec:	78fb      	ldrb	r3, [r7, #3]
 800dbee:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800dbf2:	68f9      	ldr	r1, [r7, #12]
 800dbf4:	4613      	mov	r3, r2
 800dbf6:	00db      	lsls	r3, r3, #3
 800dbf8:	4413      	add	r3, r2
 800dbfa:	009b      	lsls	r3, r3, #2
 800dbfc:	440b      	add	r3, r1
 800dbfe:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800dc02:	781b      	ldrb	r3, [r3, #0]
  }
}
 800dc04:	4618      	mov	r0, r3
 800dc06:	3714      	adds	r7, #20
 800dc08:	46bd      	mov	sp, r7
 800dc0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc0e:	4770      	bx	lr

0800dc10 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800dc10:	b580      	push	{r7, lr}
 800dc12:	b084      	sub	sp, #16
 800dc14:	af00      	add	r7, sp, #0
 800dc16:	6078      	str	r0, [r7, #4]
 800dc18:	460b      	mov	r3, r1
 800dc1a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dc1c:	2300      	movs	r3, #0
 800dc1e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dc20:	2300      	movs	r3, #0
 800dc22:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800dc2a:	78fa      	ldrb	r2, [r7, #3]
 800dc2c:	4611      	mov	r1, r2
 800dc2e:	4618      	mov	r0, r3
 800dc30:	f7f6 fd89 	bl	8004746 <HAL_PCD_SetAddress>
 800dc34:	4603      	mov	r3, r0
 800dc36:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dc38:	7bfb      	ldrb	r3, [r7, #15]
 800dc3a:	4618      	mov	r0, r3
 800dc3c:	f000 f874 	bl	800dd28 <USBD_Get_USB_Status>
 800dc40:	4603      	mov	r3, r0
 800dc42:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dc44:	7bbb      	ldrb	r3, [r7, #14]
}
 800dc46:	4618      	mov	r0, r3
 800dc48:	3710      	adds	r7, #16
 800dc4a:	46bd      	mov	sp, r7
 800dc4c:	bd80      	pop	{r7, pc}

0800dc4e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800dc4e:	b580      	push	{r7, lr}
 800dc50:	b086      	sub	sp, #24
 800dc52:	af00      	add	r7, sp, #0
 800dc54:	60f8      	str	r0, [r7, #12]
 800dc56:	607a      	str	r2, [r7, #4]
 800dc58:	603b      	str	r3, [r7, #0]
 800dc5a:	460b      	mov	r3, r1
 800dc5c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dc5e:	2300      	movs	r3, #0
 800dc60:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dc62:	2300      	movs	r3, #0
 800dc64:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800dc66:	68fb      	ldr	r3, [r7, #12]
 800dc68:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800dc6c:	7af9      	ldrb	r1, [r7, #11]
 800dc6e:	683b      	ldr	r3, [r7, #0]
 800dc70:	687a      	ldr	r2, [r7, #4]
 800dc72:	f7f6 fe91 	bl	8004998 <HAL_PCD_EP_Transmit>
 800dc76:	4603      	mov	r3, r0
 800dc78:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dc7a:	7dfb      	ldrb	r3, [r7, #23]
 800dc7c:	4618      	mov	r0, r3
 800dc7e:	f000 f853 	bl	800dd28 <USBD_Get_USB_Status>
 800dc82:	4603      	mov	r3, r0
 800dc84:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800dc86:	7dbb      	ldrb	r3, [r7, #22]
}
 800dc88:	4618      	mov	r0, r3
 800dc8a:	3718      	adds	r7, #24
 800dc8c:	46bd      	mov	sp, r7
 800dc8e:	bd80      	pop	{r7, pc}

0800dc90 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800dc90:	b580      	push	{r7, lr}
 800dc92:	b086      	sub	sp, #24
 800dc94:	af00      	add	r7, sp, #0
 800dc96:	60f8      	str	r0, [r7, #12]
 800dc98:	607a      	str	r2, [r7, #4]
 800dc9a:	603b      	str	r3, [r7, #0]
 800dc9c:	460b      	mov	r3, r1
 800dc9e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dca0:	2300      	movs	r3, #0
 800dca2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dca4:	2300      	movs	r3, #0
 800dca6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800dca8:	68fb      	ldr	r3, [r7, #12]
 800dcaa:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800dcae:	7af9      	ldrb	r1, [r7, #11]
 800dcb0:	683b      	ldr	r3, [r7, #0]
 800dcb2:	687a      	ldr	r2, [r7, #4]
 800dcb4:	f7f6 fe1d 	bl	80048f2 <HAL_PCD_EP_Receive>
 800dcb8:	4603      	mov	r3, r0
 800dcba:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dcbc:	7dfb      	ldrb	r3, [r7, #23]
 800dcbe:	4618      	mov	r0, r3
 800dcc0:	f000 f832 	bl	800dd28 <USBD_Get_USB_Status>
 800dcc4:	4603      	mov	r3, r0
 800dcc6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800dcc8:	7dbb      	ldrb	r3, [r7, #22]
}
 800dcca:	4618      	mov	r0, r3
 800dccc:	3718      	adds	r7, #24
 800dcce:	46bd      	mov	sp, r7
 800dcd0:	bd80      	pop	{r7, pc}

0800dcd2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dcd2:	b580      	push	{r7, lr}
 800dcd4:	b082      	sub	sp, #8
 800dcd6:	af00      	add	r7, sp, #0
 800dcd8:	6078      	str	r0, [r7, #4]
 800dcda:	460b      	mov	r3, r1
 800dcdc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800dce4:	78fa      	ldrb	r2, [r7, #3]
 800dce6:	4611      	mov	r1, r2
 800dce8:	4618      	mov	r0, r3
 800dcea:	f7f6 fe3d 	bl	8004968 <HAL_PCD_EP_GetRxCount>
 800dcee:	4603      	mov	r3, r0
}
 800dcf0:	4618      	mov	r0, r3
 800dcf2:	3708      	adds	r7, #8
 800dcf4:	46bd      	mov	sp, r7
 800dcf6:	bd80      	pop	{r7, pc}

0800dcf8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800dcf8:	b480      	push	{r7}
 800dcfa:	b083      	sub	sp, #12
 800dcfc:	af00      	add	r7, sp, #0
 800dcfe:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800dd00:	4b03      	ldr	r3, [pc, #12]	@ (800dd10 <USBD_static_malloc+0x18>)
}
 800dd02:	4618      	mov	r0, r3
 800dd04:	370c      	adds	r7, #12
 800dd06:	46bd      	mov	sp, r7
 800dd08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd0c:	4770      	bx	lr
 800dd0e:	bf00      	nop
 800dd10:	20012f78 	.word	0x20012f78

0800dd14 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800dd14:	b480      	push	{r7}
 800dd16:	b083      	sub	sp, #12
 800dd18:	af00      	add	r7, sp, #0
 800dd1a:	6078      	str	r0, [r7, #4]

}
 800dd1c:	bf00      	nop
 800dd1e:	370c      	adds	r7, #12
 800dd20:	46bd      	mov	sp, r7
 800dd22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd26:	4770      	bx	lr

0800dd28 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800dd28:	b480      	push	{r7}
 800dd2a:	b085      	sub	sp, #20
 800dd2c:	af00      	add	r7, sp, #0
 800dd2e:	4603      	mov	r3, r0
 800dd30:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dd32:	2300      	movs	r3, #0
 800dd34:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800dd36:	79fb      	ldrb	r3, [r7, #7]
 800dd38:	2b03      	cmp	r3, #3
 800dd3a:	d817      	bhi.n	800dd6c <USBD_Get_USB_Status+0x44>
 800dd3c:	a201      	add	r2, pc, #4	@ (adr r2, 800dd44 <USBD_Get_USB_Status+0x1c>)
 800dd3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd42:	bf00      	nop
 800dd44:	0800dd55 	.word	0x0800dd55
 800dd48:	0800dd5b 	.word	0x0800dd5b
 800dd4c:	0800dd61 	.word	0x0800dd61
 800dd50:	0800dd67 	.word	0x0800dd67
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800dd54:	2300      	movs	r3, #0
 800dd56:	73fb      	strb	r3, [r7, #15]
    break;
 800dd58:	e00b      	b.n	800dd72 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800dd5a:	2303      	movs	r3, #3
 800dd5c:	73fb      	strb	r3, [r7, #15]
    break;
 800dd5e:	e008      	b.n	800dd72 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800dd60:	2301      	movs	r3, #1
 800dd62:	73fb      	strb	r3, [r7, #15]
    break;
 800dd64:	e005      	b.n	800dd72 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800dd66:	2303      	movs	r3, #3
 800dd68:	73fb      	strb	r3, [r7, #15]
    break;
 800dd6a:	e002      	b.n	800dd72 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800dd6c:	2303      	movs	r3, #3
 800dd6e:	73fb      	strb	r3, [r7, #15]
    break;
 800dd70:	bf00      	nop
  }
  return usb_status;
 800dd72:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd74:	4618      	mov	r0, r3
 800dd76:	3714      	adds	r7, #20
 800dd78:	46bd      	mov	sp, r7
 800dd7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd7e:	4770      	bx	lr

0800dd80 <memset>:
 800dd80:	4402      	add	r2, r0
 800dd82:	4603      	mov	r3, r0
 800dd84:	4293      	cmp	r3, r2
 800dd86:	d100      	bne.n	800dd8a <memset+0xa>
 800dd88:	4770      	bx	lr
 800dd8a:	f803 1b01 	strb.w	r1, [r3], #1
 800dd8e:	e7f9      	b.n	800dd84 <memset+0x4>

0800dd90 <__libc_init_array>:
 800dd90:	b570      	push	{r4, r5, r6, lr}
 800dd92:	4d0d      	ldr	r5, [pc, #52]	@ (800ddc8 <__libc_init_array+0x38>)
 800dd94:	4c0d      	ldr	r4, [pc, #52]	@ (800ddcc <__libc_init_array+0x3c>)
 800dd96:	1b64      	subs	r4, r4, r5
 800dd98:	10a4      	asrs	r4, r4, #2
 800dd9a:	2600      	movs	r6, #0
 800dd9c:	42a6      	cmp	r6, r4
 800dd9e:	d109      	bne.n	800ddb4 <__libc_init_array+0x24>
 800dda0:	4d0b      	ldr	r5, [pc, #44]	@ (800ddd0 <__libc_init_array+0x40>)
 800dda2:	4c0c      	ldr	r4, [pc, #48]	@ (800ddd4 <__libc_init_array+0x44>)
 800dda4:	f000 f826 	bl	800ddf4 <_init>
 800dda8:	1b64      	subs	r4, r4, r5
 800ddaa:	10a4      	asrs	r4, r4, #2
 800ddac:	2600      	movs	r6, #0
 800ddae:	42a6      	cmp	r6, r4
 800ddb0:	d105      	bne.n	800ddbe <__libc_init_array+0x2e>
 800ddb2:	bd70      	pop	{r4, r5, r6, pc}
 800ddb4:	f855 3b04 	ldr.w	r3, [r5], #4
 800ddb8:	4798      	blx	r3
 800ddba:	3601      	adds	r6, #1
 800ddbc:	e7ee      	b.n	800dd9c <__libc_init_array+0xc>
 800ddbe:	f855 3b04 	ldr.w	r3, [r5], #4
 800ddc2:	4798      	blx	r3
 800ddc4:	3601      	adds	r6, #1
 800ddc6:	e7f2      	b.n	800ddae <__libc_init_array+0x1e>
 800ddc8:	0800dec4 	.word	0x0800dec4
 800ddcc:	0800dec4 	.word	0x0800dec4
 800ddd0:	0800dec4 	.word	0x0800dec4
 800ddd4:	0800dec8 	.word	0x0800dec8

0800ddd8 <memcpy>:
 800ddd8:	440a      	add	r2, r1
 800ddda:	4291      	cmp	r1, r2
 800dddc:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800dde0:	d100      	bne.n	800dde4 <memcpy+0xc>
 800dde2:	4770      	bx	lr
 800dde4:	b510      	push	{r4, lr}
 800dde6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ddea:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ddee:	4291      	cmp	r1, r2
 800ddf0:	d1f9      	bne.n	800dde6 <memcpy+0xe>
 800ddf2:	bd10      	pop	{r4, pc}

0800ddf4 <_init>:
 800ddf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ddf6:	bf00      	nop
 800ddf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ddfa:	bc08      	pop	{r3}
 800ddfc:	469e      	mov	lr, r3
 800ddfe:	4770      	bx	lr

0800de00 <_fini>:
 800de00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de02:	bf00      	nop
 800de04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800de06:	bc08      	pop	{r3}
 800de08:	469e      	mov	lr, r3
 800de0a:	4770      	bx	lr
